<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.13">

  <TSI1>

    <glyphProgram name=".notdef">
/* TT glyph 0, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 3, 8
SHP[1], 23
SRP1[], 23
SHP[1], 26
SRP1[], 26
SHP[1], 29
MIAP[R], 9, 2
SHP[1], 17
SRP1[], 17
SHP[1], 28
SRP1[], 28
SHP[1], 27
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="A">
/* TT glyph 1, char 0x41 (A) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 2, 114
CALL[], 7, 8, 114
SHP[2], 3
SRP2[], 0
IP[], 5
MDAP[R], 5
IP[], 9
SHP[1], 4
SHP[1], 10
SRP1[], 10
SHP[1], 8
SVTCA[X]
MDAP[R], 7
MDAP[R], 2
SRP2[], 7
SLOOP[], 9
IP[], 6, 5, 4, 3, 1, 0, 9, 10, 8
/* Align [9...6] */
SRP0[], 9
SPVTL[R], 9, 6
ALIGNRP[], 10
ALIGNRP[], 5
/* Align [9...3] */
SPVTL[R], 9, 3
ALIGNRP[], 8
ALIGNRP[], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="AE">
/* TT glyph 26, char 0xc6 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 2, 114
SHP[2], 3
SRP1[], 3
SHP[1], 17
MIAP[R], 15, 8
IP[], 13
IP[], 7
MDAP[R], 13
MDAP[R], 7
SRP1[], 13
SHP[1], 12
SHP[1], 18
SRP1[], 18
SHP[1], 16
SRP1[], 7
SHP[1], 4
SRP1[], 15
SHP[1], 11
SRP1[], 11
SHP[1], 8
SVTCA[X]
MDAP[R], 1
MDAP[R], 15
SRP2[], 1
SLOOP[], 17
IP[], 2, 5, 6, 9, 10, 3, 0, 17, 4, 7, 16, 12, 8, 11, 18, 13, 14
/* Align [17...14] */
SRP0[], 17
SPVTL[R], 17, 14
ALIGNRP[], 18
ALIGNRP[], 13
/* Align [3...8] */
SRP0[], 3
SPVTL[R], 3, 8
ALIGNRP[], 4
ALIGNRP[], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="AEacute">
/* VTTTalk Unicode 0x1fc */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 26, 0, 0
OFFSET[R], 974, 509, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 19

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="Aacute">
/* VTTTalk Unicode 0xc1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 974, 294, 191

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 11

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Abreve">
/* VTTTalk Unicode 0x102 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 979, 240, 191

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 19
IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Acircumflex">
/* VTTTalk Unicode 0xc2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 977, 216, 191


SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 17
IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="Adieresis">
/* VTTTalk Unicode 0xc4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 971, 244, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 11
MDRP[m&gt;RWh], 15

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Agrave">
/* VTTTalk Unicode 0xc0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 973, 203, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 14

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Amacron">
/* VTTTalk Unicode 0x100 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 982, 177, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 11

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="Aogonek">
/* VTTTalk Unicode 0x104 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 992, 498, 0


    </glyphProgram>

    <glyphProgram name="Aring">
/* VTTTalk Unicode 0xc5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 980, 255, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 20
MDAP[R], 20

SHP[1], 29

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Aringacute">
/* TT glyph 24, char 0x1fa */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 5, 2, 114
SHP[2], 13
SHP[2], 24
MDAP[R], 24
SHP[1], 33
SHP[1], 18
MDAP[R], 18
SHP[1], 27
SRP1[], 27
SHP[1], 0
SRP1[], 0
SHP[1], 3
MIAP[R], 11, 8
SHP[1], 7
IP[], 9
MDAP[R], 9
SHP[1], 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Atilde">
/* VTTTalk Unicode 0xc3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 981, 178, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 11

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="B">
/* TT glyph 28, char 0x42 (B) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 2, 114
SHP[2], 40
CALL[], 18, 8, 114
SHP[2], 30
SRP2[], 0
IP[], 29
MDAP[R], 29
SHP[1], 41
SRP2[], 41
IP[], 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="C">
/* TT glyph 29, char 0x43 (C) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 11, 3, 114
SHP[2], 19
SRP1[], 0
SHP[1], 28
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="CR">
/* TT glyph 898, char 0xd */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */

    </glyphProgram>

    <glyphProgram name="Cacute">
/* VTTTalk Unicode 0x106 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 29, 0, 0
OFFSET[R], 974, 307, 191

SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 37
IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="Ccaron">
/* VTTTalk Unicode 0x10c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 29, 0, 0
OFFSET[R], 978, 220, 191

SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 43
IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Ccedilla">
/* VTTTalk Unicode 0xc7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 29, 0, 0
OFFSET[R], 991, 177, 0


    </glyphProgram>

    <glyphProgram name="Ccircumflex">
/* VTTTalk Unicode 0x108 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 29, 0, 0
OFFSET[R], 977, 229, 191

SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 43
IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Cdotaccent">
/* VTTTalk Unicode 0x10a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 29, 0, 0
OFFSET[R], 972, 313, 191

SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 37
IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="D">
/* TT glyph 36, char 0x44 (D) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 11, 8, 114
CALL[], 0, 2, 114
SHP[2], 22
SRP1[], 11
SHP[1], 23
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Dcaron">
/* VTTTalk Unicode 0x10e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 36, 0, 0
OFFSET[R], 978, 200, 191


SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 30

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="Dcroat">
/* TT glyph 39, char 0x110 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
SHP[2], 26
CALL[], 15, 8, 114
SHP[2], 27
SRP2[], 4
IP[], 3
MDAP[R], 3
SHP[1], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="E">
/* TT glyph 42, char 0x45 (E) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 11, 8, 114
CALL[], 0, 2, 114
SHP[2], 3
SRP1[], 11
IP[], 7
MDAP[R], 7
SHP[1], 4
SRP1[], 11
SHP[1], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Eacute">
/* VTTTalk Unicode 0xc9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 974, 269, 191

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 12
IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Ebreve">
/* VTTTalk Unicode 0x114 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 979, 215, 191


SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 20
IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="Ecaron">
/* VTTTalk Unicode 0x11a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 978, 182, 191

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 18
IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="Ecircumflex">
/* VTTTalk Unicode 0xca */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 977, 191, 191

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 18
IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="Edieresis">
/* VTTTalk Unicode 0xcb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 971, 219, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 12
MDRP[m&gt;RWh], 16

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="Edotaccent">
/* VTTTalk Unicode 0x116 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 972, 275, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 12

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Egrave">
/* VTTTalk Unicode 0xc8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 973, 178, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 15

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="Emacron">
/* VTTTalk Unicode 0x112 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 982, 152, 191




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 12

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="Eng">
/* TT glyph 113, char 0x14a */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 7
MIAP[R], 15, 8
CALL[], 16, 2, 114
SHP[2], 19
SRP2[], 15
SLOOP[], 5
IP[], 18, 13, 12, 21, 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Eogonek">
/* VTTTalk Unicode 0x118 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 992, 408, 0

    </glyphProgram>

    <glyphProgram name="Eth">
/* TT glyph 37, char 0xd0 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
SHP[2], 26
CALL[], 15, 8, 114
SHP[2], 27
SRP2[], 4
IP[], 3
MDAP[R], 3
SHP[1], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Euro">
/* TT glyph 905, char 0x20ac */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 14, 3, 114
SHP[2], 22
CALL[], 40, 9, 114
SHP[2], 31
SRP1[], 14
IP[], 1
MDAP[R], 1
SHP[1], 0
MDRP[m&gt;RWh], 6
SHP[2], 7
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="F">
/* TT glyph 65, char 0x46 (F) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 9, 8, 114
CALL[], 0, 2, 114
SHP[2], 3
SRP1[], 9
IP[], 7
MDAP[R], 7
SHP[1], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="G">
/* TT glyph 66, char 0x47 (G) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 26
CALL[], 10, 3, 114
SHP[2], 17
SRP1[], 0
IP[], 34
MDAP[R], 34
SRP2[], 0
IP[], 29
IP[], 30
SHP[1], 35
CALL[], 37, 8, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="G.ss11">
/* TT glyph 228, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 29
CALL[], 11, 3, 114
SHP[2], 19
SRP1[], 0
IP[], 35
MDAP[R], 35
SHP[1], 36
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Gbreve">
/* VTTTalk Unicode 0x11e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 66, 0, 0
OFFSET[R], 979, 266, 188


SVTCA[Y]
MDAP[R], 10
MDRP[m&gt;RWh], 47

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="Gcaron">
/* VTTTalk Unicode 0x1e6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 66, 0, 0
OFFSET[R], 978, 233, 188


SVTCA[Y]
MDAP[R], 10
MDRP[m&gt;RWh], 45

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="Gcircumflex">
/* VTTTalk Unicode 0x11c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 66, 0, 0
OFFSET[R], 977, 242, 188


SVTCA[Y]
MDAP[R], 10
MDRP[m&gt;RWh], 45

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="Gdotaccent">
/* VTTTalk Unicode 0x120 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 66, 0, 0
OFFSET[R], 972, 326, 188



SVTCA[Y]
MDAP[R], 10
MDRP[m&gt;RWh], 39

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="H">
/* TT glyph 73, char 0x48 (H) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 2, 114
SHP[2], 5
CALL[], 11, 8, 114
SHP[2], 7
SRP2[], 0
IP[], 9
MDAP[R], 9
SHP[1], 8
SHP[1], 2
SRP1[], 2
SHP[1], 3
SVTCA[X]
MDAP[R], 11
MDAP[R], 5
SRP2[], 11
SLOOP[], 10
IP[], 0, 1, 2, 3, 4, 6, 7, 8, 9, 10
/* Align [10...1] */
SRP0[], 10
SPVTL[R], 10, 1
ALIGNRP[], 9
ALIGNRP[], 2
/* Align [7...4] */
SRP0[], 7
SPVTL[R], 7, 4
ALIGNRP[], 8
ALIGNRP[], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Hbar">
/* TT glyph 74, char 0x126 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
SHP[2], 9
CALL[], 15, 8, 114
SHP[2], 11
SRP1[], 4
IP[], 13
MDAP[R], 13
SHP[1], 6
SMD[], 128
MDRP[m&gt;RGr], 3
SHP[2], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Hcircumflex">
/* VTTTalk Unicode 0x124 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 73, 0, 0
OFFSET[R], 977, 248, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 18

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="I">
/* TT glyph 78, char 0x49 (I) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 3, 8, 114
CALL[], 0, 2, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="IJ">
/* VTTTalk Unicode 0x132 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 78, 0, 0
OFFSET[R], 93, 214, 0



    </glyphProgram>

    <glyphProgram name="Iacute">
/* VTTTalk Unicode 0xcd */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 974, 72, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="Ibreve">
/* VTTTalk Unicode 0x12c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 979, 18, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 12

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="Icircumflex">
/* VTTTalk Unicode 0xce */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 977, -6, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 10

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Idieresis">
/* VTTTalk Unicode 0xcf */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 971, 22, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4
MDRP[m&gt;RWh], 8

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Idotaccent">
/* VTTTalk Unicode 0x130 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 972, 78, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Igrave">
/* VTTTalk Unicode 0xcc */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 973, -19, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 7

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Imacron">
/* VTTTalk Unicode 0x12a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 982, -45, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="Iogonek">
/* VTTTalk Unicode 0x12e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 992, -15, 0

    </glyphProgram>

    <glyphProgram name="Itilde">
/* VTTTalk Unicode 0x128 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 981, -44, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="J">
/* TT glyph 93, char 0x4a (J) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 13, 2, 114
SRP1[], 0
SHP[1], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Jcircumflex">
/* VTTTalk Unicode 0x134 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 93, 0, 0
OFFSET[R], 977, 249, 188



SVTCA[Y]
MDAP[R], 13
MDRP[m&gt;RWh], 26

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="K">
/* TT glyph 95, char 0x4b (K) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
SHP[2], 1
CALL[], 11, 8, 114
SHP[2], 7
SRP1[], 4
SLOOP[], 4
IP[], 9, 2, 8, 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="L">
/* TT glyph 97, char 0x4c (L) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 5, 8, 114
CALL[], 0, 2, 114
SRP1[], 5
SHP[1], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Lacute">
/* VTTTalk Unicode 0x139 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 97, 0, 0
OFFSET[R], 974, 72, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 6

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Lcaron">
/* VTTTalk Unicode 0x13d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 97, 0, 0
OFFSET[R], 976, 325, 0

    </glyphProgram>

    <glyphProgram name="Ldot">
/* VTTTalk Unicode 0x13f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 97, 0, 0
OFFSET[R], 849, 278, 110



    </glyphProgram>

    <glyphProgram name="Lslash">
/* TT glyph 104, char 0x141 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
CALL[], 9, 8, 114
SHP[2], 6
SRP1[], 4
IP[], 3
IP[], 1
MDAP[R], 3
MDAP[R], 1
SRP1[], 3
SHP[1], 0
SRP1[], 1
SHP[1], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="M">
/* TT glyph 105, char 0x4d (M) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 2, 114
SHP[2], 4
CALL[], 12, 8, 114
SHP[2], 6
SRP1[], 0
SLOOP[], 4
IP[], 9, 2, 7, 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="N">
/* TT glyph 107, char 0x4e (N) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 2, 114
SHP[2], 4
CALL[], 9, 8, 114
SHP[2], 6
SRP1[], 0
IP[], 2
IP[], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="NULL">
/* TT glyph 1037, char 0x0 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */


    </glyphProgram>

    <glyphProgram name="Nacute">
/* VTTTalk Unicode 0x143 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 107, 0, 0
OFFSET[R], 974, 348, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 10

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="Ncaron">
/* VTTTalk Unicode 0x147 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 107, 0, 0
OFFSET[R], 978, 261, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 16

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="Ntilde">
/* VTTTalk Unicode 0xd1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 107, 0, 0
OFFSET[R], 981, 232, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 10

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="O">
/* TT glyph 116, char 0x4f (O) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 11, 3, 114
SHP[2], 31
SRP1[], 0
SHP[1], 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="OE">
/* TT glyph 150, char 0x152 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 32
SRP1[], 32
SHP[1], 28
CALL[], 11, 3, 114
SRP1[], 0
IP[], 23
MDAP[R], 23
SHP[1], 20
SHP[2], 42
SRP1[], 42
SHP[1], 15
CALL[], 16, 2, 114
SHP[2], 19
CALL[], 27, 8, 114
SHP[2], 24
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Oacute">
/* VTTTalk Unicode 0xd3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 974, 339, 188



SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 40

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="Obreve">
/* VTTTalk Unicode 0x14e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 979, 285, 188


SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 48

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="Ocircumflex">
/* VTTTalk Unicode 0xd4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 977, 261, 188


SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 44

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Odieresis">
/* VTTTalk Unicode 0xd6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 971, 289, 188



SVTCA[Y]
MDAP[R], 10
MDRP[m&gt;RWh], 40
MDRP[m&gt;RWh], 44

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Ograve">
/* VTTTalk Unicode 0xd2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 973, 248, 188




SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 43

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Ohorn">
/* VTTTalk Unicode 0x1a0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 987, 387, 153

SVTCA[Y]
CALL[], 40, 31, 0, 0, 5, 86
SHC[2], 2




    </glyphProgram>

    <glyphProgram name="Ohungarumlaut">
/* VTTTalk Unicode 0x150 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 975, 276, 188




SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 40
MDRP[m&gt;RWh], 44

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="Omacron">
/* VTTTalk Unicode 0x14c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 982, 222, 188



SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 40

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="Oslash">
/* VTTTalk Unicode 0xd8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 863, 97, 0


    </glyphProgram>

    <glyphProgram name="Oslashacute">
/* VTTTalk Unicode 0x1fe */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 863, 102, 0
OFFSET[R], 974, 339, 188



SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 44

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="Otilde">
/* VTTTalk Unicode 0xd5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 981, 223, 188



SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 40

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="P">
/* TT glyph 151, char 0x50 (P) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 13, 8, 114
CALL[], 0, 2, 114
SHP[2], 24
SRP1[], 13
IP[], 11
MDAP[R], 11
SHP[1], 25
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Q">
/* TT glyph 153, char 0x51 (Q) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 26
SRP1[], 26
SHP[1], 23
CALL[], 11, 3, 114
SHP[2], 35
CALL[], 25, 8, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="R">
/* TT glyph 154, char 0x52 (R) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 13
CALL[], 1, 2, 114
SHP[2], 27
SRP1[], 0
IP[], 15
MDAP[R], 15
SHP[1], 11
SHP[1], 28
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Racute">
/* VTTTalk Unicode 0x154 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 154, 0, 0
OFFSET[R], 974, 277, 191


SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 29

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Rcaron">
/* VTTTalk Unicode 0x158 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 154, 0, 0
OFFSET[R], 978, 190, 191


SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 35

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="S">
/* TT glyph 162, char 0x53 (S) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 9
CALL[], 26, 3, 114
SHP[2], 36
SRP2[], 0
IP[], 13
IP[], 21
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Sacute">
/* VTTTalk Unicode 0x15a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 974, 271, 210



SVTCA[Y]
MDAP[R], 26
MDRP[m&gt;RWh], 53

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="Scaron">
/* VTTTalk Unicode 0x160 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 978, 184, 210



SVTCA[Y]
MDAP[R], 26
MDRP[m&gt;RWh], 59

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Scedilla">
/* VTTTalk Unicode 0x15e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 991, 139, 0


    </glyphProgram>

    <glyphProgram name="Scircumflex">
/* VTTTalk Unicode 0x15c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 977, 193, 210



SVTCA[Y]
MDAP[R], 26
MDRP[m&gt;RWh], 59

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="T">
/* TT glyph 175, char 0x54 (T) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 6, 8, 114
CALL[], 2, 2, 114
SHP[2], 1
SRP1[], 1
SHP[1], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Tbar">
/* TT glyph 176, char 0x166 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 6, 2, 114
SHP[2], 5
SRP1[], 5
SHP[1], 9
CALL[], 10, 8, 114
SRP2[], 6
IP[], 0
MDAP[R], 0
SHP[1], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Tcaron">
/* VTTTalk Unicode 0x164 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 175, 0, 0
OFFSET[R], 978, 161, 188

SVTCA[Y]
MDAP[R], 2
MDRP[m&gt;RWh], 14

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="Thorn">
/* TT glyph 152, char 0xde */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 2, 114
CALL[], 15, 8, 114
SRP2[], 0
IP[], 2
IP[], 13
MDAP[R], 2
MDAP[R], 13
SRP1[], 2
SHP[1], 26
SRP1[], 13
SHP[1], 27
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="U">
/* TT glyph 182, char 0x55 (U) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 8, 2, 114
SRP1[], 0
SHP[1], 17
SHP[2], 24
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Uacute">
/* VTTTalk Unicode 0xda */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 974, 324, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 30

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="Ubreve">
/* VTTTalk Unicode 0x16c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 979, 270, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 38

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="Ucircumflex">
/* VTTTalk Unicode 0xdb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 977, 246, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 36

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="Udieresis">
/* VTTTalk Unicode 0xdc */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 971, 274, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 30
MDRP[m&gt;RWh], 34

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="Ugrave">
/* VTTTalk Unicode 0xd9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 973, 233, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 33

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Uhorn">
/* VTTTalk Unicode 0x1af */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 987, 593, 153

SVTCA[Y]
CALL[], 31, 23, 0, 0, 0, 86
SHC[2], 1




    </glyphProgram>

    <glyphProgram name="Uhungarumlaut">
/* VTTTalk Unicode 0x170 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 975, 261, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 30
MDRP[m&gt;RWh], 34

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Umacron">
/* VTTTalk Unicode 0x16a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 982, 207, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 30

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="Uogonek">
/* VTTTalk Unicode 0x172 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 992, 263, 0


    </glyphProgram>

    <glyphProgram name="Uring">
/* VTTTalk Unicode 0x16e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 980, 285, 188


SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 39
MDAP[R], 39

SHP[1], 48

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Ustraitcy">
/* VTTTalk Unicode 0x4ae */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 212, 0, 0



    </glyphProgram>

    <glyphProgram name="Ustraitstrokecy">
/* TT glyph 575, char 0x4b0 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 5, 2, 114
SHP[2], 9
CALL[], 11, 8, 114
SRP2[], 5
IP[], 0
MDAP[R], 0
SLOOP[], 3
IP[], 7, 4, 10
SHP[1], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Utilde">
/* VTTTalk Unicode 0x168 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 981, 208, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 30

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="V">
/* TT glyph 205, char 0x56 (V) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 2, 114
SHP[2], 4
CALL[], 6, 8, 114
SRP1[], 0
IP[], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="W">
/* TT glyph 206, char 0x57 (W) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 2, 114
SHP[2], 5
SHP[2], 8
SHP[2], 12
CALL[], 17, 8, 114
SHP[2], 14
SRP1[], 0
SLOOP[], 6
IP[], 10, 2, 15, 3, 9, 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="W.ss09">
/* TT glyph 227, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 2, 114
SHP[2], 4
SHP[2], 7
MDAP[R], 8
SHP[1], 12
SRP1[], 12
SLOOP[], 3
IP[], 2, 5, 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Wacute">
/* VTTTalk Unicode 0x1e82 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 206, 0, 0
OFFSET[R], 974, 454, 188

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 18

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="Wcircumflex">
/* VTTTalk Unicode 0x174 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 206, 0, 0
OFFSET[R], 977, 376, 188

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 22

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="Wdieresis">
/* VTTTalk Unicode 0x1e84 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 206, 0, 0
OFFSET[R], 971, 404, 188

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 18
MDRP[m&gt;RWh], 22

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="Wgrave">
/* VTTTalk Unicode 0x1e80 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 206, 0, 0
OFFSET[R], 973, 363, 188


SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 21

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="X">
/* TT glyph 211, char 0x58 (X) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
SHP[2], 5
CALL[], 11, 8, 114
SHP[2], 8
SRP1[], 1
SLOOP[], 4
IP[], 9, 6, 0, 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Y">
/* TT glyph 212, char 0x59 (Y) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
SHP[2], 5
CALL[], 7, 8, 114
SRP1[], 1
SLOOP[], 3
IP[], 6, 0, 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Yacute">
/* VTTTalk Unicode 0xdd */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 212, 0, 0
OFFSET[R], 974, 258, 188

SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 9

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="Ycircumflex">
/* VTTTalk Unicode 0x176 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 212, 0, 0
OFFSET[R], 977, 180, 188

SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 15

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Ydieresis">
/* VTTTalk Unicode 0x178 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 212, 0, 0
OFFSET[R], 971, 208, 188

SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 9
MDRP[m&gt;RWh], 13

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="Ygrave">
/* VTTTalk Unicode 0x1ef2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 212, 0, 0
OFFSET[R], 973, 167, 188

SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 12

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="Z">
/* TT glyph 222, char 0x5a (Z) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 3, 2, 114
SHP[2], 2
SHP[2], 5
CALL[], 9, 8, 114
SHP[2], 6
SRP1[], 6
SHP[1], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Zacute">
/* VTTTalk Unicode 0x179 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 222, 0, 0
OFFSET[R], 974, 269, 191

SVTCA[Y]
MDAP[R], 3
MDRP[m&gt;RWh], 10

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="Zcaron">
/* VTTTalk Unicode 0x17d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 222, 0, 0
OFFSET[R], 978, 182, 191

SVTCA[Y]
MDAP[R], 3
MDRP[m&gt;RWh], 16

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="Zdotaccent">
/* VTTTalk Unicode 0x17b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 222, 0, 0
OFFSET[R], 972, 275, 191

SVTCA[Y]
MDAP[R], 3
MDRP[m&gt;RWh], 10

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="a">
/* TT glyph 229, char 0x61 (a) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 34
CALL[], 9, 7, 114
SHP[2], 44
SRP2[], 0
SLOOP[], 4
IP[], 31, 39, 40, 12
CALL[], 14, 6, 114
CALL[], 24, 10, 114
SHP[2], 20
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="a.sc">
/* TT glyph 476, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
MDAP[R], 2
SHP[1], 7
IP[], 5
MDAP[R], 5
IP[], 9
SHP[1], 4
SHP[1], 10
SRP1[], 10
SHP[1], 8
MIAP[R], 3, 18
MIAP[R], 6, 18
SVTCA[X]
MDAP[R], 2
MDAP[R], 6
MDAP[R], 7
SRP2[], 2
IP[], 3
IP[], 9
/* DAlign [3...9] */
SRP0[], 3
RDTG[]
SDPVTL[R], 3, 9
MDRP[m&lt;RGr], 4
MDRP[m&lt;RGr], 8
/* DAlign [6...9] */
SRP0[], 6
SDPVTL[R], 6, 9
MDRP[m&lt;RGr], 5
MDRP[m&lt;RGr], 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="a.ss01">
/* TT glyph 459, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 16
MDAP[R], 16
SHP[2], 20
CALL[], 9, 7, 114
SHP[2], 14
MDAP[R], 14
SHP[2], 28
SRP1[], 0
SLOOP[], 4
IP[], 17, 24, 25, 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="a.ss02">
/* TT glyph 460, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 32
MDAP[R], 32
SHP[2], 36
CALL[], 25, 7, 114
SHP[2], 18
SRP1[], 0
IP[], 8
MDAP[R], 8
SRP2[], 0
SLOOP[], 3
IP[], 42, 39, 33
SHP[1], 46
SRP1[], 46
SHP[1], 11
SRP1[], 11
SHP[1], 43
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="aacute">
/* VTTTalk Unicode 0xe1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 974, 224, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 53

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="abreve">
/* VTTTalk Unicode 0x103 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 979, 170, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 61

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="acircumflex">
/* VTTTalk Unicode 0xe2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 977, 146, 0


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 59

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="acute">
/* VTTTalk Unicode 0xb4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 974, 0, 0



    </glyphProgram>

    <glyphProgram name="acutecomb">
/* TT glyph 974, char 0x301 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
SMD[], 128
MDRP[m&gt;RBl], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="adieresis">
/* VTTTalk Unicode 0xe4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 971, 174, 0


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 53
MDRP[m&gt;RWh], 57

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="ae">
/* TT glyph 254, char 0xe6 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 51
SRP1[], 51
SHP[1], 43
SHP[2], 58
SRP1[], 58
SHP[1], 54
SRP1[], 54
SHP[1], 63
CALL[], 22, 7, 114
SRP1[], 0
IP[], 7
MDAP[R], 7
SHP[1], 72
SHP[1], 10
SRP1[], 10
SHP[1], 69
SHP[2], 16
SRP1[], 16
SHP[1], 25
SRP1[], 25
SHP[1], 13
SHP[2], 28
SRP1[], 28
SHP[1], 87
SRP2[], 51
IP[], 36
MDAP[R], 36
SHP[1], 91
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="aeacute">
/* VTTTalk Unicode 0x1fd */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 254, 0, 0
OFFSET[R], 974, 331, 0




SVTCA[Y]
MDAP[R], 22
MDRP[m&gt;RWh], 92

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="agrave">
/* VTTTalk Unicode 0xe0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 973, 133, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 56

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="amacron">
/* VTTTalk Unicode 0x101 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 982, 107, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 53

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="ampersand">
/* TT glyph 954, char 0x26 (&amp;) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 17
CALL[], 36, 3, 114
SHP[2], 44
SRP2[], 0
IP[], 22
MDAP[R], 22
SLOOP[], 3
IP[], 28, 10, 52
SRP2[], 36
SLOOP[], 3
IP[], 9, 32, 48
SHP[1], 55
SRP1[], 55
SHP[1], 58
MIAP[R], 54, 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="aogonek">
/* VTTTalk Unicode 0x105 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 992, 380, 0


    </glyphProgram>

    <glyphProgram name="apostrophe">
/* TT glyph 1045, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 2
SMD[], 128
MDRP[m&gt;RGr], 4
IP[], 0
IP[], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="approxequal">
/* TT glyph 937, char 0x2248 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 30, 18
SHP[1], 37
MDRP[m&gt;RWh], 18
SHP[2], 3
SHP[2], 14
SRP1[], 14
SHP[1], 7
SRP1[], 30
SHP[1], 26
SRP1[], 26
SHP[1], 41
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="aring">
/* VTTTalk Unicode 0xe5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 980, 185, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 62
MDAP[R], 62

SHP[1], 71

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="aringacute">
/* VTTTalk Unicode 0x1fb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 980, 185, 0
OFFSET[R], 974, 269, 211



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 62
MDAP[R], 62

SHP[1], 71
SHP[1], 77

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="asciicircum">
/* TT glyph 968, char 0x5e (^) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 1, 2
MDRP[m&gt;RBl], 6
SHP[2], 4
IP[], 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="asciitilde">
/* TT glyph 938, char 0x7e (~) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 19
SHP[1], 9
SHP[1], 27
SMD[], 128
MDRP[m&gt;RBl], 5
SHP[2], 13
SHP[2], 23
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="asterisk">
/* TT glyph 847, char 0x2a (*) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 5, 2
SMD[], 128
MDRP[m&gt;RGr], 14
SHP[2], 0
SLOOP[], 9
IP[], 13, 10, 1, 4, 7, 9, 2, 3, 8
SHP[2], 12
SRP1[], 12
SHP[1], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="at">
/* TT glyph 953, char 0x40 (@) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 26
SHP[1], 19
SMD[], 128
MDRP[m&gt;RGr], 56
SHP[2], 47
MDAP[R], 47
SHP[1], 0
SHP[2], 77
SRP1[], 77
SHP[1], 53
SRP1[], 53
SHP[1], 81
MIAP[R], 36, 16
SHP[1], 10
MDRP[m&gt;RGr], 65
SHP[2], 69
MDAP[R], 69
SHP[2], 85
SRP1[], 85
SHP[1], 68
SRP1[], 68
SHP[1], 82
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="atilde">
/* VTTTalk Unicode 0xe3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 981, 108, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 53

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="b">
/* TT glyph 256, char 0x62 (b) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 20
CALL[], 5, 10, 114
CALL[], 6, 0, 114
CALL[], 11, 7, 114
SHP[2], 29
SRP2[], 0
SLOOP[], 4
IP[], 3, 34, 33, 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="b.sc">
/* TT glyph 477, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
SHP[2], 35
MDAP[R], 16
SHP[1], 26
IP[], 25
MDAP[R], 25
SHP[1], 8
SHP[1], 36
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="backslash">
/* TT glyph 848, char 0x5c (\) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 1, 18, 114
CALL[], 3, 2, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="bar">
/* TT glyph 961, char 0x7c (|) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="braceleft">
/* TT glyph 866, char 0x7b ({) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 14
SHP[1], 11
MDAP[R], 36
SHP[1], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="braceright">
/* TT glyph 867, char 0x7d (}) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 1
SHP[1], 0
MDAP[R], 23
SHP[1], 24
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bracketleft">
/* TT glyph 868, char 0x5b ([) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 5
MDAP[R], 1
SHP[1], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bracketright">
/* TT glyph 869, char 0x5d (]) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
MDAP[R], 5
SHP[1], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="breve">
/* VTTTalk Unicode 0x2d8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 979, 0, 0


    </glyphProgram>

    <glyphProgram name="brevecombcy">
/* TT glyph 1019, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 8
SMD[], 128
MDRP[m&gt;RGr], 4
SHP[2], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="brevecombcy.case">
/* TT glyph 1020, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
DLTP1[(0 @1 8)(0 @5 8)]
SHP[2], 7
SMD[], 128
MDRP[m&gt;RGr], 4
SHP[2], 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="brokenbar">
/* TT glyph 962, char 0xa6 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 1
SHP[1], 3
MDAP[R], 3
MDAP[R], 4
SHP[1], 6
RUTG[]
MDAP[R], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="bullet">
/* TT glyph 850, char 0x2022 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 4
SHP[1], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="c">
/* TT glyph 257, char 0x63 (c) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 9, 7, 114
SHP[2], 16
SRP1[], 0
SHP[1], 25
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="c.sc">
/* TT glyph 478, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 25
MIAP[R], 9, 75
SHP[1], 16
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="c_t">
/* TT glyph 469, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 80
CALL[], 9, 7, 114
SHP[2], 71
SHP[2], 19
MDAP[R], 19
SHP[1], 59
CALL[], 43, 11, 114
SHP[2], 36
CALL[], 53, 6, 114
SHP[2], 26
SHP[2], 50
SRP1[], 50
SHP[1], 29
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="cacute">
/* VTTTalk Unicode 0x107 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 257, 0, 0
OFFSET[R], 974, 209, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 34

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="caron">
/* VTTTalk Unicode 0x2c7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 978, 0, 0


    </glyphProgram>

    <glyphProgram name="ccaron">
/* VTTTalk Unicode 0x10d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 257, 0, 0
OFFSET[R], 978, 122, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 40

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="ccedilla">
/* VTTTalk Unicode 0xe7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 257, 0, 0
OFFSET[R], 991, 122, 0

    </glyphProgram>

    <glyphProgram name="ccircumflex">
/* VTTTalk Unicode 0x109 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 257, 0, 0
OFFSET[R], 977, 131, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 40

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="cdotaccent">
/* VTTTalk Unicode 0x10b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 257, 0, 0
OFFSET[R], 972, 215, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 34

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="cedilla">
/* VTTTalk Unicode 0xb8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 991, 0, 0



    </glyphProgram>

    <glyphProgram name="cent">
/* TT glyph 900, char 0xa2 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 10, 7, 114
MDRP[m&gt;RBl], 11
SHP[1], 13
SHP[1], 20
SRP1[], 20
SHP[1], 37
CALL[], 30, 11, 114
SHP[2], 1
MDRP[m&gt;RBl], 31
SHP[1], 21
SRP1[], 21
SHP[1], 36
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="circumflex">
/* VTTTalk Unicode 0x2c6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 977, 0, 0


    </glyphProgram>

    <glyphProgram name="colon">
/* TT glyph 851, char 0x3a (:) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 1, 6, 114
SHP[2], 0
MIAP[R], 4, 10
SHP[1], 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="colonmonetary">
/* TT glyph 901, char 0x20a1 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 5, 7, 114
SHP[2], 12
SRP1[], 12
SHP[1], 35
SHP[1], 41
MDRP[m&gt;RGr], 38
SHP[2], 36
MDAP[R], 36
CALL[], 30, 11, 114
SHP[2], 21
SHP[2], 44
SHP[2], 47
MDRP[m&gt;RWh], 48
SHP[2], 43
MDAP[R], 43
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="comma">
/* TT glyph 852, char 0x2c (,) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SMD[], 128
MDRP[m&gt;RGr], 6
IP[], 5
IP[], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="copyright">
/* TT glyph 957, char 0xa9 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 20
SMD[], 128
MDRP[m&gt;RGr], 40
SHP[2], 68
CALL[], 10, 3, 114
SHP[2], 30
MDRP[m&gt;RGr], 50
SHP[2], 58
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="currency">
/* TT glyph 902, char 0xa4 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SHP[1], 47
MDAP[R], 21
SHP[1], 39
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="d">
/* TT glyph 264, char 0x64 (d) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 34
CALL[], 9, 7, 114
SHP[2], 44
SRP2[], 0
SLOOP[], 4
IP[], 31, 39, 40, 12
CALL[], 14, 0, 114
CALL[], 21, 10, 114
SHP[2], 20
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="d.sc">
/* TT glyph 479, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
SHP[2], 21
MDAP[R], 11
SHP[1], 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="d.ss03">
/* TT glyph 461, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 20
CALL[], 9, 7, 114
SHP[2], 30
CALL[], 13, 0, 114
MIAP[R], 16, 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dagger">
/* TT glyph 963, char 0x2020 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
MDAP[R], 1
SHP[1], 10
SHP[1], 4
SRP1[], 4
SHP[1], 7
MDAP[R], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="daggerdbl">
/* TT glyph 965, char 0x2021 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 9
IP[], 4
MDAP[R], 4
SHP[1], 15
SHP[1], 1
SRP1[], 1
SHP[1], 18
MDRP[m&gt;RWh], 5
SHP[2], 14
SHP[2], 8
SRP1[], 8
SHP[1], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dcaron">
/* VTTTalk Unicode 0x10f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 264, 0, 0
OFFSET[R], 976, 475, 0

SVTCA[Y]
CALL[], 54, 13, 0, 0, 0, 86
SHC[2], 2




    </glyphProgram>

    <glyphProgram name="dcroat">
/* TT glyph 267, char 0x111 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 11, 114
SHP[2], 38
SRP1[], 38
SHP[1], 35
SHP[1], 43
CALL[], 13, 7, 114
SHP[2], 48
MDRP[m&gt;RWh], 3
SHP[2], 0
SHP[1], 16
SRP1[], 16
SHP[1], 44
CALL[], 18, 0, 114
CALL[], 25, 10, 114
SHP[2], 24
SRP1[], 24
SHP[1], 22
SRP1[], 22
SHP[1], 19
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="degree">
/* TT glyph 960, char 0xb0 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 7
SHP[1], 20
SMD[], 128
MDRP[m&gt;RGr], 0
SHP[2], 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="descendercy">
/* TT glyph 1025, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SMD[], 128
MDRP[m&gt;RGr], 0
SHP[1], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="descendercy.case">
/* TT glyph 1027, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SHP[1], 2
SMD[], 128
MDRP[m&gt;RGr], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dieresis">
/* VTTTalk Unicode 0xa8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 971, 0, 0



    </glyphProgram>

    <glyphProgram name="divide">
/* TT glyph 929, char 0xf7 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 8
SHP[1], 5
MDAP[R], 5
SHP[1], 4
SRP1[], 8
SHP[1], 9
SRP1[], 9
SHP[1], 0
RUTG[]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dollar">
/* TT glyph 903, char 0x24 ($) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 34, 9, 114
MDRP[m&gt;RWh], 2
SHP[1], 43
SRP2[], 43
SLOOP[], 4
IP[], 0, 1, 7, 4
CALL[], 59, 3, 114
MDRP[m&gt;RBl], 8
SHP[1], 17
SRP2[], 17
SLOOP[], 4
IP[], 6, 5, 10, 11
SRP2[], 34
SLOOP[], 6
IP[], 46, 29, 54, 21, 50, 25
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="dong">
/* TT glyph 904, char 0x20ab */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 48
SHP[1], 49
MDRP[m&gt;RWh], 24
SHP[2], 15
MDAP[R], 15
SHP[2], 42
SHP[2], 5
MDAP[R], 5
SHP[1], 33
SLOOP[], 4
IP[], 21, 28, 29, 8
MDRP[m&gt;RWh], 54
SHP[2], 51
SRP1[], 51
SHP[1], 9
MDAP[R], 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="dotaccent">
/* VTTTalk Unicode 0x2d9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 972, 0, 0


    </glyphProgram>

    <glyphProgram name="dotbelow">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 988, 0, 0



    </glyphProgram>

    <glyphProgram name="dotbelowcomb">
/* TT glyph 988, char 0x323 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 1
SHP[1], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dotlessi">
/* TT glyph 308, char 0x131 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 3, 10, 114
CALL[], 0, 6, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="e">
/* TT glyph 270, char 0x65 (e) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 40
CALL[], 9, 7, 114
SHP[2], 31
SRP1[], 0
IP[], 16
MDAP[R], 16
SHP[1], 23
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="e.sc">
/* TT glyph 480, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
SHP[2], 3
MDAP[R], 11
SHP[1], 8
IP[], 7
MDAP[R], 7
SHP[1], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="eacute">
/* VTTTalk Unicode 0xe9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 974, 198, 0





SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 48

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="ebreve">
/* VTTTalk Unicode 0x115 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 979, 144, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 56

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="ecaron">
/* VTTTalk Unicode 0x11b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 978, 111, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 54

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="ecircumflex">
/* VTTTalk Unicode 0xea */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 977, 120, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 54

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="edieresis">
/* VTTTalk Unicode 0xeb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 971, 148, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 48
MDRP[m&gt;RWh], 52

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="edotaccent">
/* VTTTalk Unicode 0x117 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 972, 204, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 48

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="egrave">
/* VTTTalk Unicode 0xe8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 973, 107, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 51

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="eight">
/* TT glyph 775, char 0x38 (8) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 13, 114
SHP[2], 32
MDAP[R], 16
SHP[1], 59
IP[], 50
MDAP[R], 50
SHP[1], 41
SRP1[], 41
SHP[1], 8
SHP[1], 24
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="eight.dnom">
/* TT glyph 815, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 30
MIRP[m&lt;RGr], 16, 77
SHP[2], 53
IP[], 38
MDAP[R], 38
SHP[1], 46
SHP[1], 8
SRP1[], 8
SHP[1], 23
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="eight.lf">
/* TT glyph 785, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 5, 9, 114
SHP[2], 45
CALL[], 21, 3, 114
SHP[2], 63
SRP1[], 5
IP[], 54
MDAP[R], 54
SHP[1], 13
SHP[1], 29
SHP[1], 36
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="eight.numr">
/* TT glyph 825, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 4, 78
SHP[1], 40
MIRP[m&lt;RGr], 20, 77
SHP[2], 54
IP[], 33
MDAP[R], 33
SHP[1], 47
SHP[1], 12
SRP1[], 12
SHP[1], 27
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="eight.subs">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 798, 0, 0


    </glyphProgram>

    <glyphProgram name="ellipsis">
/* TT glyph 853, char 0x2026 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 10
SHP[2], 1
SRP1[], 1
SHP[1], 5
SRP1[], 5
SHP[1], 9
SHP[2], 4
SRP1[], 4
SHP[1], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="emacron">
/* VTTTalk Unicode 0x113 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 982, 81, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 48

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="emdash">
/* TT glyph 872, char 0x2014 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="emptyset">
/* TT glyph 941, char 0x2205 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 22
MDRP[m&gt;RWh], 39
SHP[2], 36
CALL[], 9, 7, 114
SHP[2], 31
MDRP[m&gt;RWh], 37
SHP[2], 38
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="endash">
/* TT glyph 873, char 0x2013 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="eng">
/* TT glyph 345, char 0x14b */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 7
CALL[], 24, 10, 114
CALL[], 25, 6, 114
CALL[], 31, 7, 114
SHP[2], 18
SRP2[], 24
IP[], 22
IP[], 27
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="eogonek">
/* VTTTalk Unicode 0x119 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 992, 263, 10

    </glyphProgram>

    <glyphProgram name="equal">
/* TT glyph 930, char 0x3d (=) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 4
SHP[1], 5
MDRP[m&gt;RWh], 1
SHP[2], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="estimated">
/* TT glyph 967, char 0x212e */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 9, 7, 114
SHP[2], 24
CALL[], 17, 11, 114
SHP[2], 0
SRP1[], 0
SHP[1], 3
SHP[1], 21
SRP1[], 21
SHP[1], 20
SRP1[], 9
IP[], 5
MDAP[R], 5
SHP[1], 28
SRP1[], 28
SHP[1], 27
SRP1[], 27
SHP[1], 30
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="eth">
/* TT glyph 265, char 0xf0 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 5, 11, 114
SHP[2], 33
CALL[], 25, 0, 114
SRP1[], 5
IP[], 14
MDAP[R], 14
SLOOP[], 8
IP[], 54, 47, 53, 52, 48, 49, 51, 50
SRP2[], 5
IP[], 20
IP[], 0
SHP[1], 42
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="exclam">
/* TT glyph 854, char 0x21 (!) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
CALL[], 4, -1, 114
SHP[2], 5
SRP1[], 5
SHP[1], 0
MDAP[R], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="exclamdown">
/* TT glyph 855, char 0xa1 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 2, 10
MIAP[R], 3, 6
MDRP[m&gt;RWh], 6
SHP[2], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="f">
/* TT glyph 294, char 0x66 (f) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 24, 14, 114
CALL[], 8, 1, 114
MDAP[R], 2
SHP[2], 15
SHP[1], 1
SRP1[], 1
SHP[1], 22
SRP1[], 2
SHP[1], 19
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="f.sc">
/* TT glyph 481, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
SHP[2], 3
MDAP[R], 8
IP[], 4
MDAP[R], 4
SHP[1], 7
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="f_f">
/* TT glyph 470, char 0xfb00 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 10
MIAP[R], 4, 6
SHP[1], 1
SRP1[], 1
SHP[1], 35
SRP1[], 35
SHP[1], 31
SRP1[], 4
SHP[1], 37
SRP1[], 37
SHP[1], 28
MIAP[R], 15, 1
SHP[1], 23
SRP2[], 37
SLOOP[], 4
IP[], 41, 12, 44, 9
MIAP[R], 33, 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="f_f_i">
/* TT glyph 471, char 0xfb03 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 10
SHP[2], 35
SRP1[], 35
SHP[1], 31
MIAP[R], 4, 6
SHP[1], 28
SHP[1], 39
SHP[1], 1
SRP1[], 1
SHP[1], 37
SRP1[], 37
SHP[1], 33
MIAP[R], 15, 1
SHP[1], 23
SRP2[], 4
SLOOP[], 4
IP[], 43, 12, 46, 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="f_f_l">
/* TT glyph 472, char 0xfb04 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 55
MIAP[R], 27, 10
SHP[1], 23
MIAP[R], 31, 6
SHP[1], 18
SHP[1], 64
SHP[1], 28
SRP1[], 28
SHP[1], 21
SHP[1], 25
MIAP[R], 42, 1
SHP[1], 13
SRP2[], 31
SLOOP[], 4
IP[], 68, 39, 71, 36
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="fi">
/* TT glyph 473, char 0xfb01 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */


    </glyphProgram>

    <glyphProgram name="figuredash">
/* TT glyph 874, char 0x2012 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="five">
/* TT glyph 772, char 0x35 (5) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 7
CALL[], 25, 4, 114
SHP[2], 29
SRP1[], 0
IP[], 33
MDAP[R], 33
SHP[1], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="five.dnom">
/* TT glyph 812, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 7
MIRP[m&lt;RGr], 24, 77
SHP[2], 27
IP[], 32
MDAP[R], 32
SHP[1], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="five.lf">
/* TT glyph 782, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 7
CALL[], 26, 2, 114
SHP[2], 29
SHP[2], 25
SRP1[], 0
IP[], 33
MDAP[R], 33
SHP[1], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="five.numr">
/* TT glyph 822, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 7, 78
SHP[1], 14
MIRP[m&lt;RGr], 31, 77
SHP[2], 34
IP[], 0
MDAP[R], 0
SHP[1], 21
SRP1[], 21
SHP[1], 35
SRP1[], 35
SHP[1], 24
SHP[1], 25
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="five.subs">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 795, 0, 0


    </glyphProgram>

    <glyphProgram name="fiveeighths">
/* VTTTalk Unicode 0x215d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 822, 0, 0
OFFSET[R], 837, 350, 0
OFFSET[R], 815, 470, 0



    </glyphProgram>

    <glyphProgram name="fl">
/* TT glyph 474, char 0xfb02 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */


    </glyphProgram>

    <glyphProgram name="florin">
/* TT glyph 906, char 0x192 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 7
MIAP[R], 20, 1
SHP[1], 27
IP[], 15
MDAP[R], 15
SHP[1], 31
SHP[1], 12
SRP1[], 12
SHP[1], 34
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="four">
/* TT glyph 771, char 0x34 (4) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 3, 4, 114
SHP[2], 12
MDAP[R], 9
IP[], 8
MDAP[R], 8
SHP[1], 1
SHP[1], 5
SRP1[], 5
SHP[1], 13
SRP1[], 13
SHP[1], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="four.dnom">
/* TT glyph 811, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 10
MIRP[m&gt;RBl], 4, 77
SHP[2], 13
IP[], 1
MDAP[R], 1
SHP[1], 9
SHP[1], 12
SRP1[], 12
SHP[1], 3
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="four.lf">
/* TT glyph 781, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 8
CALL[], 4, 2, 114
SHP[2], 12
SRP2[], 0
IP[], 1
MDAP[R], 1
SHP[1], 9
SHP[1], 11
SRP1[], 11
SHP[1], 3
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="four.numr">
/* TT glyph 821, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 78
MIRP[m&gt;RBl], 4, 77
SHP[2], 13
IP[], 1
MDAP[R], 1
SHP[1], 9
SHP[1], 12
SRP1[], 12
SHP[1], 3
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="four.subs">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 794, 0, 0


    </glyphProgram>

    <glyphProgram name="fraction">
/* TT glyph 837, char 0x2044 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 2, 2, 114
SHP[2], 3
CALL[], 5, 18, 114
SHP[2], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="franc">
/* TT glyph 907, char 0x20a3 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 12, 114
CALL[], 1, 2, 114
SHP[2], 4
SRP1[], 0
IP[], 8
MDAP[R], 8
SHP[1], 5
MDRP[m&gt;RGr], 11
SHP[2], 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="g">
/* TT glyph 295, char 0x67 (g) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 15, 114
SHP[2], 7
CALL[], 15, 11, 114
SHP[2], 34
CALL[], 24, 7, 114
SHP[2], 44
SRP2[], 0
SLOOP[], 6
IP[], 12, 39, 40, 27, 30, 11
CALL[], 28, 6, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="g.sc">
/* TT glyph 482, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 25
SHP[2], 37
MDAP[R], 37
MIAP[R], 9, 75
SHP[1], 16
IP[], 33
MDAP[R], 33
SHP[1], 34
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="gbreve">
/* VTTTalk Unicode 0x11f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 295, 0, 0
OFFSET[R], 979, 159, 0



SVTCA[Y]
MDAP[R], 24
MDRP[m&gt;RWh], 61

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="gcaron">
/* VTTTalk Unicode 0x1e7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 295, 0, 0
OFFSET[R], 978, 126, 0



SVTCA[Y]
MDAP[R], 24
MDRP[m&gt;RWh], 59

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="gcircumflex">
/* VTTTalk Unicode 0x11d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 295, 0, 0
OFFSET[R], 977, 135, 0



SVTCA[Y]
MDAP[R], 24
MDRP[m&gt;RWh], 59

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="gdotaccent">
/* VTTTalk Unicode 0x121 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 295, 0, 0
OFFSET[R], 972, 219, 0



SVTCA[Y]
MDAP[R], 24
MDRP[m&gt;RWh], 53

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="germandbls">
/* TT glyph 405, char 0xdf */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 23, 10, 114
CALL[], 28, 3, 114
SHP[2], 17
CALL[], 43, 11, 114
SHP[2], 0
SRP2[], 28
IP[], 9
MDAP[R], 9
SHP[1], 8
SHP[1], 35
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="grave">
/* VTTTalk Unicode 0x60 (`) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 973, 0, 0



    </glyphProgram>

    <glyphProgram name="gravecomb">
/* TT glyph 973, char 0x300 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SMD[], 128
MDRP[m&gt;RBl], 1
SHP[1], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="greater">
/* TT glyph 932, char 0x3e (&gt;) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 1
SHP[1], 2
MDAP[R], 5
SHP[1], 4
SRP2[], 1
SLOOP[], 3
IP[], 0, 3, 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="greaterequal">
/* TT glyph 934, char 0x2265 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 10
SHP[1], 4
MDRP[m&gt;RWh], 0
SHP[2], 3
SHP[1], 7
MDAP[R], 7
SHP[1], 6
SRP2[], 10
SLOOP[], 3
IP[], 9, 5, 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="guillemotleft">
/* TT glyph 879, char 0xab */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 5
SHP[1], 4
SHP[1], 1
MDAP[R], 1
SHP[1], 2
SRP2[], 5
SLOOP[], 6
IP[], 6, 13, 10, 3, 7, 0
SHP[1], 8
SRP1[], 8
SHP[1], 9
SHP[2], 12
SRP1[], 12
SHP[1], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="guillemotright">
/* TT glyph 880, char 0xbb */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 8
SHP[1], 9
SHP[1], 1
SRP1[], 1
SHP[1], 2
SRP1[], 8
SHP[1], 12
MDAP[R], 12
SHP[1], 11
SRP2[], 8
SLOOP[], 6
IP[], 0, 7, 3, 10, 13, 6
SHP[1], 5
SRP1[], 5
SHP[1], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="guilsinglleft">
/* TT glyph 881, char 0x2039 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 5
SHP[1], 4
SHP[1], 1
MDAP[R], 1
SHP[1], 2
SRP2[], 5
SLOOP[], 3
IP[], 6, 3, 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="guilsinglright">
/* TT glyph 882, char 0x203a */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 1
SHP[1], 2
SHP[1], 5
MDAP[R], 5
SHP[1], 4
SRP2[], 1
SLOOP[], 3
IP[], 0, 3, 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="h">
/* TT glyph 302, char 0x68 (h) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 0, 114
CALL[], 5, 7, 114
SHP[2], 21
CALL[], 27, 10, 114
SHP[2], 14
SRP1[], 5
IP[], 25
IP[], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="h.sc">
/* TT glyph 483, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
SHP[2], 5
MDAP[R], 6
SHP[1], 11
IP[], 9
MDAP[R], 9
SHP[1], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="hbar">
/* TT glyph 303, char 0x127 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 0, 114
CALL[], 9, 7, 114
SHP[2], 25
MDRP[m&gt;RGr], 3
SHP[2], 0
CALL[], 31, 10, 114
SHP[2], 18
SRP1[], 9
IP[], 29
IP[], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="hcircumflex">
/* TT glyph 305, char 0x125 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 7, 0, 114
MDRP[M&gt;RWh], 6
SHP[2], 0
SMD[], 128
MDRP[m&gt;RBl], 1
IP[], 5
SHP[1], 4
SRP1[], 4
SHP[1], 3
CALL[], 12, 7, 114
SHP[2], 28
CALL[], 34, 10, 114
SHP[2], 21
SRP1[], 12
IP[], 32
IP[], 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="hookabovecomb">
/* TT glyph 983, char 0x309 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 10
SHP[1], 11
SMD[], 128
MDRP[m&gt;RGr], 4
SHP[2], 17
SHP[2], 1
SRP1[], 1
SHP[1], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="hookcy">
/* TT glyph 1021, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 10
SMD[], 128
MDRP[m&gt;RGr], 0
SHP[2], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="hookcy.case">
/* TT glyph 1023, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 11
SMD[], 128
MDRP[m&gt;RGr], 0
SHP[2], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="hungarumlaut">
/* VTTTalk Unicode 0x2dd */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 975, 0, 0


    </glyphProgram>

    <glyphProgram name="hyphen">
/* TT glyph 876, char 0x2d (-) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="i">
/* TT glyph 307, char 0x69 (i) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 6, 114
MDRP[m&gt;RWh], 7
SHP[2], 4
CALL[], 3, 10, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="i.loclTRK">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 972, 23, 0




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="i.sc">
/* TT glyph 484, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
MDAP[R], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="iacute">
/* VTTTalk Unicode 0xed */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 974, 17, 0




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="ibreve">
/* VTTTalk Unicode 0x12d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 979, -37, 0



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 12

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="icircumflex">
/* VTTTalk Unicode 0xee */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 977, -60, 29



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 10

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="idieresis">
/* VTTTalk Unicode 0xef */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 971, -33, 0




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4
MDRP[m&gt;RWh], 8

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="igrave">
/* VTTTalk Unicode 0xec */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 973, -56, 0




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 7

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="ij">
/* VTTTalk Unicode 0x133 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 307, 0, 0
OFFSET[R], 323, 182, 0

    </glyphProgram>

    <glyphProgram name="imacron">
/* VTTTalk Unicode 0x12b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 982, -100, 0




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="infinity">
/* TT glyph 940, char 0x221e */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 40
SHP[2], 8
SRP1[], 8
SHP[1], 56
SHP[2], 24
MDAP[R], 24
SHP[1], 32
SLOOP[], 4
IP[], 20, 60, 36, 4
SHP[1], 16
SRP1[], 16
SHP[1], 48
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="integral">
/* TT glyph 942, char 0x222b */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 8
SHP[1], 15
MDAP[R], 32
SHP[1], 39
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="iogonek">
/* VTTTalk Unicode 0x12f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 307, 0, 0
OFFSET[R], 992, -31, 0


    </glyphProgram>

    <glyphProgram name="itilde">
/* VTTTalk Unicode 0x129 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 981, -97, 0




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="j">
/* TT glyph 323, char 0x6a (j) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 7
CALL[], 12, 6, 114
MDRP[m&gt;RWh], 21
SHP[2], 18
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="j.sc">
/* TT glyph 485, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 6
MIAP[R], 11, 74
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="j.ss04">
/* TT glyph 462, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 6, 114
MDRP[m&gt;RWh], 7
SHP[2], 4
CALL[], 3, 14, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="jcircumflex">
/* VTTTalk Unicode 0x135 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 324, 0, 0
OFFSET[R], 977, -54, 29




SVTCA[Y]
MDAP[R], 12
MDRP[m&gt;RWh], 24

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="k">
/* TT glyph 326, char 0x6b (k) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 15, 7, 114
SHP[2], 6
CALL[], 24, 0, 114
CALL[], 27, 10, 114
SHP[2], 23
SRP1[], 15
SLOOP[], 4
IP[], 21, 0, 10, 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="k.sc">
/* TT glyph 486, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 3, 74
SHP[1], 1
MDAP[R], 6
SHP[1], 11
SRP1[], 11
SRP2[], 3
SLOOP[], 4
IP[], 9, 2, 8, 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="kgreenlandic">
/* TT glyph 328, char 0x138 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 6, 114
SHP[2], 4
CALL[], 11, 10, 114
SHP[2], 7
SRP1[], 0
SLOOP[], 4
IP[], 9, 2, 8, 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="l">
/* TT glyph 329, char 0x6c (l) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 14
CALL[], 7, 0, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="l.sc">
/* TT glyph 487, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
MDAP[R], 5
SHP[1], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="l.ss05">
/* TT glyph 463, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 0, 114
MIAP[R], 7, 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="lacute">
/* VTTTalk Unicode 0x13a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 329, 0, 0
OFFSET[R], 974, 66, 211

SVTCA[Y]
MDAP[R], 7
MDRP[m&gt;RWh], 21

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="lcaron">
/* VTTTalk Unicode 0x13e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 329, 0, 0
OFFSET[R], 976, 90, 0

SVTCA[Y]
CALL[], 22, 7, 0, 0, 0, 86
SHC[2], 1




    </glyphProgram>

    <glyphProgram name="ldot">
/* VTTTalk Unicode 0x140 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 329, 0, 0
OFFSET[R], 849, 139, 0

SVTCA[Y]
CALL[], 21, 0, 2, 0, 255, 86
SHC[2], 1




    </glyphProgram>

    <glyphProgram name="less">
/* TT glyph 933, char 0x3c (&lt;) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 1
SHP[1], 2
MDAP[R], 5
SHP[1], 4
SRP2[], 1
SLOOP[], 3
IP[], 6, 3, 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="lessequal">
/* TT glyph 935, char 0x2264 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 9
SHP[1], 8
MDRP[m&gt;RWh], 2
SHP[2], 3
SHP[1], 5
MDAP[R], 5
SHP[1], 6
SRP2[], 9
SLOOP[], 3
IP[], 10, 7, 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="lira">
/* TT glyph 911, char 0x20a4 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 4, 9, 114
SHP[2], 53
SHP[2], 11
MDAP[R], 11
SHP[1], 12
SRP1[], 12
SHP[1], 46
SRP1[], 46
SHP[1], 8
SRP1[], 8
SHP[1], 49
CALL[], 26, 3, 114
SHP[2], 33
SRP2[], 4
IP[], 60
MDAP[R], 60
SHP[1], 63
MDRP[m&gt;RWh], 3
SHP[2], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="logicalnot">
/* TT glyph 939, char 0xac */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 5
SHP[1], 4
SRP1[], 4
SHP[1], 2
MDAP[R], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="lozenge">
/* TT glyph 952, char 0x25ca */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 3, 18
SHP[1], 9
CALL[], 5, 3, 114
SHP[2], 7
SRP2[], 3
SLOOP[], 4
IP[], 6, 1, 4, 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="lslash">
/* TT glyph 336, char 0x142 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 11, 114
SHP[2], 18
SHP[2], 3
SRP1[], 3
SHP[1], 0
CALL[], 11, 0, 114
SHP[2], 1
SRP1[], 1
SHP[1], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="m">
/* TT glyph 337, char 0x6d (m) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 6, 114
CALL[], 5, 7, 114
SHP[2], 41
SHP[2], 13
SRP1[], 13
SHP[1], 28
CALL[], 46, 10, 114
SHP[2], 22
SHP[2], 34
SRP1[], 5
SLOOP[], 5
IP[], 32, 44, 9, 2, 38
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="m.sc">
/* TT glyph 488, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
SHP[2], 4
MDAP[R], 5
SHP[1], 12
SRP1[], 12
SLOOP[], 5
IP[], 8, 9, 2, 7, 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="macron">
/* VTTTalk Unicode 0xaf */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 982, 0, 0



    </glyphProgram>

    <glyphProgram name="minus">
/* TT glyph 927, char 0x2212 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="minute">
/* TT glyph 969, char 0x2032 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SMD[], 128
MDRP[m&gt;RBl], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="multiply">
/* TT glyph 928, char 0xd7 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 3, 18
SHP[1], 4
SHP[1], 1
SRP1[], 1
SHP[1], 0
SRP1[], 3
SHP[1], 7
MDAP[R], 7
SHP[1], 6
SRP2[], 3
SLOOP[], 4
IP[], 2, 11, 5, 8
SHP[1], 9
SRP1[], 9
SHP[1], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="n">
/* TT glyph 339, char 0x6e (n) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 6, 114
CALL[], 6, 7, 114
SHP[2], 22
CALL[], 28, 10, 114
SHP[2], 15
SRP1[], 6
IP[], 26
IP[], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="n.sc">
/* TT glyph 489, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
SHP[2], 4
MDAP[R], 5
SHP[1], 9
IP[], 2
IP[], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="nacute">
/* VTTTalk Unicode 0x144 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 339, 0, 0
OFFSET[R], 974, 207, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 29

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="napostrophe">
/* VTTTalk Unicode 0x149 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 1045, -353, 0
USEMYMETRICS[]
OFFSET[R], 339, 0, 0


    </glyphProgram>

    <glyphProgram name="ncaron">
/* VTTTalk Unicode 0x148 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 339, 0, 0
OFFSET[R], 978, 120, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 35

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="nine">
/* TT glyph 776, char 0x39 (9) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 8, 5, 114
SHP[2], 41
SRP1[], 0
IP[], 17
MDAP[R], 17
SHP[1], 32
SRP1[], 0
SHP[1], 25
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="nine.dnom">
/* TT glyph 816, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 7
MIRP[m&lt;RGr], 21, 77
SHP[2], 35
IP[], 14
MDAP[R], 14
SHP[1], 28
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="nine.lf">
/* TT glyph 786, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 19, 9, 114
SHP[2], 12
CALL[], 27, 3, 114
SHP[2], 32
SRP1[], 19
IP[], 4
MDAP[R], 4
SHP[1], 41
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="nine.numr">
/* TT glyph 826, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 78
SHP[2], 7
MIRP[m&lt;RGr], 21, 77
SHP[2], 35
IP[], 14
MDAP[R], 14
SHP[1], 28
SRP1[], 28
SHP[1], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="nine.subs">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 799, 0, 0


    </glyphProgram>

    <glyphProgram name="notequal">
/* TT glyph 931, char 0x2260 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 4
SHP[2], 7
SRP1[], 7
SHP[1], 0
MDAP[R], 0
SRP1[], 11
SHP[1], 8
SRP1[], 8
SHP[1], 1
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="ntilde">
/* VTTTalk Unicode 0xf1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 339, 0, 0
OFFSET[R], 981, 91, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 29

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="numbersign">
/* TT glyph 856, char 0x23 (#) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 11, 8
SHP[1], 7
MIAP[R], 20, 2
SHP[1], 24
SRP2[], 11
IP[], 12
IP[], 16
MDAP[R], 12
MDAP[R], 16
SRP1[], 12
SHP[1], 5
SHP[1], 9
SHP[1], 15
SRP1[], 15
SHP[1], 31
SRP1[], 31
SHP[1], 2
SRP1[], 16
SHP[1], 19
SRP1[], 19
SHP[1], 22
SRP1[], 22
SHP[1], 26
SRP1[], 16
SHP[1], 30
SRP1[], 30
SHP[1], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="o">
/* TT glyph 348, char 0x6f (o) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 9, 7, 114
SHP[2], 27
SRP1[], 0
SHP[1], 18
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="o.sc">
/* TT glyph 490, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 18
MIAP[R], 9, 75
SHP[1], 27
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="oacute">
/* VTTTalk Unicode 0xf3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 974, 205, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="obreve">
/* VTTTalk Unicode 0x14f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 979, 151, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 44

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ocircumflex">
/* VTTTalk Unicode 0xf4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 977, 127, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 42

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="odieresis">
/* VTTTalk Unicode 0xf6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 971, 155, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36
MDRP[m&gt;RWh], 40

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="oe">
/* TT glyph 382, char 0x153 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 47
SHP[2], 39
SRP1[], 39
SHP[1], 31
CALL[], 9, 7, 114
SHP[2], 56
SRP1[], 0
IP[], 24
MDAP[R], 24
IP[], 13
SRP2[], 0
IP[], 43
SHP[1], 75
SRP1[], 9
SHP[1], 16
SRP1[], 16
SHP[1], 71
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="ogonek">
/* VTTTalk Unicode 0x2db */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 992, 0, 0


    </glyphProgram>

    <glyphProgram name="ograve">
/* VTTTalk Unicode 0xf2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 973, 114, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 39

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="ohorn">
/* VTTTalk Unicode 0x1a1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 987, 266, -38

SVTCA[Y]
CALL[], 36, 27, 0, 0, 0, 86
SHC[2], 2




    </glyphProgram>

    <glyphProgram name="ohungarumlaut">
/* VTTTalk Unicode 0x151 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 975, 142, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36
MDRP[m&gt;RWh], 40

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="omacron">
/* VTTTalk Unicode 0x14d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 982, 88, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="one">
/* TT glyph 768, char 0x31 (1) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 13, 4, 114
SHP[2], 2
SRP1[], 2
SHP[1], 8
SRP1[], 8
SHP[1], 7
CALL[], 18, 12, 114
SHP[2], 0
SRP1[], 0
SHP[1], 15
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="one.dnom">
/* TT glyph 808, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 17, 10
SHP[1], 1
SRP1[], 1
SHP[1], 14
MIRP[m&lt;RGr], 12, 77
SHP[2], 2
SRP1[], 2
SHP[1], 7
SRP1[], 7
SHP[1], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="one.lf">
/* TT glyph 778, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 13, 2, 114
SHP[2], 2
SRP1[], 2
SHP[1], 8
SRP1[], 8
SHP[1], 7
MDAP[R], 18
SHP[1], 0
SRP1[], 0
SHP[1], 15
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="one.numr">
/* TT glyph 818, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 2, 78
SHP[1], 4
SRP1[], 4
SHP[1], 17
MIRP[m&lt;RGr], 15, 77
SHP[2], 5
SHP[2], 10
SRP1[], 10
SHP[1], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="one.subs">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 791, 0, 0


    </glyphProgram>

    <glyphProgram name="oneeighth">
/* VTTTalk Unicode 0x215b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 818, 0, 0
OFFSET[R], 837, 240, 0
OFFSET[R], 815, 360, 0



    </glyphProgram>

    <glyphProgram name="onehalf">
/* TT glyph 838, char 0xbd */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 10
SHP[2], 33
MIRP[m&lt;RGr], 21, 77
SHP[2], 12
SLOOP[], 4
IP[], 29, 4, 9, 24
SHP[1], 59
MDAP[R], 59
SHP[1], 54
MIAP[R], 38, 78
SHP[1], 40
SRP1[], 40
SHP[1], 53
MIRP[m&lt;RGr], 51, 77
SHP[2], 41
SHP[2], 46
SRP1[], 46
SHP[1], 45
SHP[2], 56
MDAP[R], 56
SHP[1], 57
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="onequarter">
/* VTTTalk Unicode 0xbc */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 818, 0, 0
OFFSET[R], 837, 240, 0
OFFSET[R], 811, 360, 0

    </glyphProgram>

    <glyphProgram name="ordfeminine">
/* TT glyph 502, char 0xaa */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 23, 2
SHP[1], 17
SMD[], 320
MDRP[m&gt;RGr], 0
IP[], 7
MDAP[R], 7
SHP[1], 56
SHP[1], 10
SRP1[], 10
SHP[1], 53
SHP[2], 36
MDAP[R], 36
SHP[1], 35
SHP[2], 48
SRP1[], 48
SHP[1], 45
SRP1[], 45
SHP[1], 52
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="ordmasculine">
/* TT glyph 503, char 0xba */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 9, 2
SHP[1], 25
SMD[], 320
MDRP[m&gt;RGr], 0
SHP[2], 18
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="oslash">
/* TT glyph 376, char 0xf8 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 18
CALL[], 9, 7, 114
SHP[2], 27
SHP[2], 45
MDAP[R], 45
SLOOP[], 4
SHP[1], 44, 47, 41, 42
SRP1[], 0
SLOOP[], 5
SHP[1], 40, 43, 36, 37, 38
MDAP[R], 38
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="oslashacute">
/* VTTTalk Unicode 0x1ff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 974, 298, 0
USEMYMETRICS[]
OFFSET[R], 376, 0, 0



SVTCA[Y]
MDAP[R], 13
MDRP[m&gt;RWh], 0

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="otilde">
/* VTTTalk Unicode 0xf5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 981, 89, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="p">
/* TT glyph 383, char 0x70 (p) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 6, 114
CALL[], 5, 7, 114
SHP[2], 29
CALL[], 14, 11, 114
SHP[2], 20
SRP1[], 5
SLOOP[], 4
IP[], 17, 35, 34, 2
CALL[], 19, 14, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="p.sc">
/* TT glyph 491, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
SHP[2], 22
MDAP[R], 12
IP[], 11
MDAP[R], 11
SHP[1], 23
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="paragraph">
/* TT glyph 955, char 0xb6 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
SHP[2], 22
SRP1[], 22
SHP[1], 27
SRP1[], 27
SHP[1], 7
MDAP[R], 13
SHP[1], 9
IP[], 14
MDAP[R], 14
SHP[1], 11
SRP1[], 11
SHP[1], 10
SRP1[], 14
SHP[1], 21
SRP1[], 21
SHP[1], 28
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="parenleft">
/* TT glyph 870, char 0x28 (() */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 4
SHP[1], 5
MDAP[R], 15
SHP[1], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="parenright">
/* TT glyph 871, char 0x29 ()) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 5
SHP[1], 6
MDAP[R], 15
SHP[1], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="partialdiff">
/* TT glyph 949, char 0x2202 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 34
CALL[], 27, 3, 114
SHP[2], 20
SRP2[], 0
IP[], 9
MDAP[R], 9
SHP[1], 43
SRP1[], 43
SHP[1], 39
SRP1[], 39
SHP[1], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="percent">
/* TT glyph 950, char 0x25 (%) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 7, 3, 114
SHP[2], 21
SHP[2], 0
MDAP[R], 0
SHP[1], 14
SHP[2], 58
MDAP[R], 58
SHP[1], 59
CALL[], 28, 9, 114
SHP[2], 42
SHP[2], 35
MDAP[R], 35
SHP[1], 49
SHP[2], 61
MDAP[R], 61
SHP[1], 56
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="period">
/* TT glyph 857, char 0x2e (.) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="periodcentered">
/* TT glyph 849, char 0xb7 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="periodcentered.loclCAT">
/* TT glyph 865, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="perthousand">
/* TT glyph 951, char 0x2030 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 7, 3, 114
SHP[2], 21
SHP[2], 0
MDAP[R], 0
SHP[1], 14
SHP[2], 86
MDAP[R], 86
SHP[1], 87
MIAP[R], 28, 9
SHP[1], 42
SHP[1], 35
MDAP[R], 35
SHP[1], 49
SHP[1], 63
SRP1[], 63
SHP[1], 77
SRP1[], 28
SHP[1], 56
SRP1[], 56
SHP[1], 70
SRP1[], 28
SHP[1], 89
MDAP[R], 89
SHP[1], 84
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="peseta">
/* TT glyph 915, char 0x20a7 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 8
CALL[], 1, 2, 114
SHP[2], 25
SRP2[], 0
IP[], 12
MDAP[R], 12
SHP[1], 14
CALL[], 30, 11, 114
SHP[2], 48
MIAP[R], 38, 6
MDRP[m&gt;RBl], 39
SHP[1], 41
SHP[1], 35
SRP1[], 35
SHP[1], 44
CALL[], 53, 11, 114
SHP[2], 60
CALL[], 76, 7, 114
SHP[2], 83
SRP2[], 53
SLOOP[], 6
IP[], 64, 94, 68, 90, 72, 87
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="pi">
/* TT glyph 766, char 0x3c0 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 17
CALL[], 7, 10, 114
CALL[], 10, 6, 114
SHP[2], 9
SRP1[], 9
SHP[1], 5
SHP[1], 13
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="plus">
/* TT glyph 926, char 0x2b (+) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 8
SHP[1], 9
SHP[1], 11
SHP[1], 5
SRP1[], 5
SHP[1], 2
SHP[1], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="plusminus">
/* TT glyph 936, char 0xb1 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 10, 18
SHP[1], 6
SHP[1], 8
SRP1[], 8
SHP[1], 1
MDAP[R], 1
SHP[1], 0
SRP1[], 10
SHP[1], 11
SRP1[], 11
SHP[1], 13
SHP[1], 15
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="product">
/* TT glyph 945, char 0x220f */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SHP[1], 11
CALL[], 6, 2, 114
SHP[2], 4
SRP1[], 4
SHP[1], 1
SHP[1], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="q">
/* TT glyph 385, char 0x71 (q) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 3, 11, 114
SHP[2], 20
CALL[], 12, 7, 114
SHP[2], 29
SRP2[], 3
SLOOP[], 4
IP[], 0, 24, 25, 15
CALL[], 16, 6, 114
CALL[], 19, 14, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="q.sc">
/* TT glyph 492, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 38
MDAP[R], 38
SHP[2], 18
SRP1[], 18
SHP[1], 36
MIAP[R], 9, 75
SHP[1], 27
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="q.ss06">
/* TT glyph 464, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 34
CALL[], 9, 7, 114
SHP[2], 43
SRP2[], 0
SLOOP[], 4
IP[], 31, 38, 39, 12
MIAP[R], 13, 6
CALL[], 21, 14, 114
SHP[2], 20
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="question">
/* TT glyph 858, char 0x3f (?) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 21, 3, 114
SHP[2], 12
MIAP[R], 35, 8
SHP[1], 36
SRP1[], 36
SHP[1], 0
MDAP[R], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="questiondown">
/* TT glyph 859, char 0xbf */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 21, 14
SHP[1], 12
MIAP[R], 38, 6
SHP[1], 37
SRP1[], 37
SHP[1], 34
MDAP[R], 34
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="quotedbl">
/* TT glyph 860, char 0x22 (") */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
SHP[2], 5
SMD[], 128
MDRP[m&gt;RBl], 0
SHP[2], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="quotedblbase">
/* TT glyph 883, char 0x201e */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SHP[1], 10
SMD[], 128
MDRP[m&gt;RGr], 6
SHP[2], 7
SLOOP[], 4
IP[], 8, 1, 5, 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="quotedblleft">
/* TT glyph 884, char 0x201c */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 6
SHP[1], 13
SMD[], 128
MDRP[m&gt;RBl], 4
SHP[2], 11
SLOOP[], 4
IP[], 8, 1, 5, 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="quotedblright">
/* TT glyph 885, char 0x201d */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 10
SHP[1], 3
SMD[], 128
MDRP[m&gt;RGr], 13
SHP[2], 0
SLOOP[], 6
IP[], 5, 9, 12, 8, 2, 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="quoteleft">
/* TT glyph 886, char 0x2018 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 6
SHP[1], 4
MDAP[R], 4
SRP2[], 6
IP[], 1
IP[], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="quoteright">
/* TT glyph 887, char 0x2019 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SHP[1], 6
MDAP[R], 6
SRP2[], 3
IP[], 5
IP[], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="quotesinglbase">
/* TT glyph 888, char 0x201a */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SHP[1], 6
MDAP[R], 6
SRP2[], 3
IP[], 5
IP[], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="quotesingle">
/* TT glyph 861, char 0x27 (') */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
SMD[], 128
MDRP[m&gt;RBl], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="r">
/* TT glyph 386, char 0x72 (r) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 6, 114
SHP[2], 8
SRP1[], 8
SHP[1], 9
CALL[], 14, 10, 114
SRP1[], 0
IP[], 12
IP[], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="r.sc">
/* TT glyph 493, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
SHP[2], 25
MDAP[R], 10
SHP[1], 15
IP[], 13
MDAP[R], 13
SHP[1], 9
SHP[1], 26
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="racute">
/* VTTTalk Unicode 0x155 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 386, 0, 0
OFFSET[R], 974, 72, 0


SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 15

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="radical">
/* TT glyph 947, char 0x221a */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 3
SHP[2], 9
MDAP[R], 9
SHP[1], 8
SRP1[], 8
SHP[1], 1
MDAP[R], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="rcaron">
/* VTTTalk Unicode 0x159 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 386, 0, 0
OFFSET[R], 978, -15, 0



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 21

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="registered">
/* TT glyph 958, char 0xae */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 20
SMD[], 128
MDRP[m&gt;RGr], 54
SHP[2], 50
MDAP[R], 50
CALL[], 10, 3, 114
SHP[2], 29
MDRP[m&gt;RGr], 39
SHP[2], 62
SRP1[], 54
IP[], 63
MDAP[R], 63
SHP[1], 52
SRP1[], 52
SHP[1], 48
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ring">
/* VTTTalk Unicode 0x2da */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 980, 0, 0


    </glyphProgram>

    <glyphProgram name="s">
/* TT glyph 394, char 0x73 (s) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 7
CALL[], 22, 7, 114
SHP[2], 29
SRP2[], 0
SLOOP[], 4
IP[], 11, 14, 36, 18
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="s.sc">
/* TT glyph 494, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 8
MIAP[R], 23, 75
SHP[1], 31
SLOOP[], 6
IP[], 11, 42, 15, 38, 18, 35
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="s_t">
/* TT glyph 475, char 0xfb06 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 8
CALL[], 26, 7, 114
SHP[2], 90
SRP2[], 0
SLOOP[], 6
IP[], 13, 103, 17, 98, 21, 94
SHP[1], 30
SRP1[], 30
SHP[1], 87
SRP1[], 87
SHP[1], 86
SRP1[], 26
SHP[1], 38
MDAP[R], 38
SHP[1], 79
CALL[], 63, 11, 114
SHP[2], 54
CALL[], 73, 6, 114
SHP[2], 44
SHP[2], 70
SRP1[], 70
SHP[1], 47
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="sacute">
/* VTTTalk Unicode 0x15b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 394, 0, 0
OFFSET[R], 974, 157, 0



SVTCA[Y]
MDAP[R], 22
MDRP[m&gt;RWh], 44

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="scaron">
/* VTTTalk Unicode 0x161 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 394, 0, 0
OFFSET[R], 978, 70, 0



SVTCA[Y]
MDAP[R], 22
MDRP[m&gt;RWh], 50

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="scedilla">
/* VTTTalk Unicode 0x15f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 394, 0, 0
OFFSET[R], 991, 72, 0

    </glyphProgram>

    <glyphProgram name="scircumflex">
/* VTTTalk Unicode 0x15d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 394, 0, 0
OFFSET[R], 977, 79, 0




SVTCA[Y]
MDAP[R], 22
MDRP[m&gt;RWh], 50

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="second">
/* VTTTalk Unicode 0x2033 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 969, 0, 0
OFFSET[R], 969, 210, 0


    </glyphProgram>

    <glyphProgram name="section">
/* TT glyph 956, char 0xa7 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 7
SHP[1], 15
CALL[], 39, 3, 114
SHP[2], 49
SRP2[], 7
SLOOP[], 11
IP[], 20, 0, 24, 71, 74, 65, 78, 81, 57, 31, 54
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="semicolon">
/* TT glyph 862, char 0x3b (;) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 1, 6, 114
SHP[2], 0
MDAP[R], 7
SMD[], 128
MDRP[m&gt;RWh], 4
IP[], 9
IP[], 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="seven">
/* TT glyph 774, char 0x37 (7) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 4
CALL[], 2, 4, 114
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="seven.dnom">
/* TT glyph 814, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 4, 10
MIRP[m&lt;RGr], 2, 77
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="seven.lf">
/* TT glyph 784, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 2, 2, 114
SHP[2], 1
MDAP[R], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="seven.numr">
/* TT glyph 824, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 5, 78
MIRP[m&lt;RGr], 2, 77
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="seven.subs">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 797, 0, 0


    </glyphProgram>

    <glyphProgram name="seveneighths">
/* VTTTalk Unicode 0x215e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 824, 0, 0
OFFSET[R], 837, 258, 0
OFFSET[R], 815, 378, 0



    </glyphProgram>

    <glyphProgram name="six">
/* TT glyph 773, char 0x36 (6) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 13, 114
SHP[2], 32
MDAP[R], 24
SHP[1], 17
IP[], 9
MDAP[R], 9
SHP[1], 41
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="six.dnom">
/* TT glyph 813, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 23, 11
SHP[1], 27
MIRP[m&lt;RGr], 16, 77
SHP[2], 9
IP[], 3
MDAP[R], 3
SHP[1], 34
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="six.lf">
/* TT glyph 783, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 31
CALL[], 23, 3, 114
SHP[2], 16
SRP1[], 0
IP[], 9
MDAP[R], 9
SHP[1], 40
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="six.numr">
/* TT glyph 823, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 23, 78
SHP[1], 27
MIRP[m&lt;RGr], 16, 77
SHP[2], 9
IP[], 3
MDAP[R], 3
SRP2[], 23
IP[], 30
IP[], 6
SHP[1], 34
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="six.subs">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 796, 0, 0


    </glyphProgram>

    <glyphProgram name="slash">
/* TT glyph 863, char 0x2f (/) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 2, 18, 114
CALL[], 0, 2, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="space">
/* TT glyph 894, char 0x20 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */


    </glyphProgram>

    <glyphProgram name="sterling">
/* TT glyph 919, char 0xa3 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 18, 3, 114
SHP[2], 25
CALL[], 52, 9, 114
SHP[2], 45
SRP1[], 18
IP[], 0
MDAP[R], 0
SHP[1], 3
SHP[2], 59
MDAP[R], 59
SHP[1], 4
SHP[1], 38
SRP1[], 38
SHP[1], 41
SHP[1], 56
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="summation">
/* TT glyph 946, char 0x2211 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
SHP[2], 12
SRP1[], 12
SHP[1], 2
SHP[1], 11
MIAP[R], 5, 8
IP[], 10
IP[], 3
SHP[1], 8
SRP1[], 8
SHP[1], 4
SHP[1], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="t">
/* TT glyph 406, char 0x74 (t) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 6, 6, 114
MDRP[m&gt;RWh], 8
SHP[1], 10
SHP[1], 5
SRP1[], 5
SHP[1], 13
CALL[], 29, 11, 114
SHP[2], 20
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="t.sc">
/* TT glyph 495, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 2, 74
SHP[1], 1
SRP1[], 1
SHP[1], 5
MDAP[R], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="t.ss07">
/* TT glyph 465, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 3, 6, 114
SHP[2], 4
MDAP[R], 4
SHP[2], 6
SHP[2], 0
SRP1[], 0
SHP[1], 9
MIAP[R], 11, 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="tailcy">
/* TT glyph 1022, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 4
SMD[], 128
MDRP[m&gt;RGr], 6
SHP[1], 3
SRP1[], 3
SHP[1], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="tailcy.case">
/* TT glyph 1024, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 4
SHP[1], 3
SMD[], 128
MDRP[m&gt;RGr], 6
SRP1[], 3
SHP[1], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="tbar">
/* TT glyph 407, char 0x167 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 11, 6, 114
MDRP[m&gt;RBl], 12
SHP[1], 14
MDRP[m&gt;RGr], 0
SHP[2], 3
SHP[1], 8
SRP1[], 8
SHP[1], 17
CALL[], 33, 11, 114
SHP[2], 24
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="tcaron">
/* VTTTalk Unicode 0x165 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 406, 0, 0
OFFSET[R], 976, 126, 0

SVTCA[Y]
MDAP[R], 7
MDRP[m&gt;RWh], 35

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="thorn">
/* TT glyph 384, char 0xfe */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 14, 114
MDAP[R], 1
CALL[], 6, 7, 114
SHP[2], 29
CALL[], 15, 11, 114
SHP[2], 20
SRP1[], 6
SLOOP[], 4
IP[], 18, 35, 34, 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="three">
/* TT glyph 770, char 0x33 (3) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 7
CALL[], 32, 5, 114
SHP[2], 24
SRP1[], 0
IP[], 16
MDAP[R], 16
SHP[1], 15
SRP1[], 15
SHP[1], 39
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="three.dnom">
/* TT glyph 810, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 8
MIRP[m&lt;RGr], 32, 77
SHP[2], 24
IP[], 15
MDAP[R], 15
SHP[1], 18
SHP[1], 38
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="three.lf">
/* TT glyph 780, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 9
CALL[], 35, 3, 114
SHP[2], 26
SRP1[], 0
IP[], 17
MDAP[R], 17
SHP[1], 18
SHP[1], 43
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="three.numr">
/* TT glyph 820, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 78
SHP[2], 8
MIRP[m&lt;RGr], 32, 77
SHP[2], 24
IP[], 15
MDAP[R], 15
SHP[1], 18
SHP[1], 38
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="three.subs">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 793, 0, 0


    </glyphProgram>

    <glyphProgram name="threeeighths">
/* VTTTalk Unicode 0x215c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 820, 0, 0
OFFSET[R], 837, 363, 0
OFFSET[R], 815, 483, 0



    </glyphProgram>

    <glyphProgram name="threequarters">
/* VTTTalk Unicode 0xbe */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 820, 0, 0
OFFSET[R], 837, 363, 0
OFFSET[R], 811, 483, 0



    </glyphProgram>

    <glyphProgram name="tilde">
/* VTTTalk Unicode 0x2dc */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 981, 0, 0


    </glyphProgram>

    <glyphProgram name="tildecomb">
/* TT glyph 981, char 0x303 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 8
SHP[2], 19
SMD[], 128
MDRP[m&gt;RBl], 14
SHP[2], 4
SHP[2], 23
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="trademark">
/* TT glyph 959, char 0x2122 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 6, 2, 114
SHP[2], 3
MDAP[R], 3
IP[], 17
MDAP[R], 17
SHP[1], 10
SRP1[], 3
SHP[1], 20
MDAP[R], 20
SHP[1], 14
MDAP[R], 14
SHP[2], 5
SRP1[], 5
SHP[1], 1
SHP[2], 8
MDAP[R], 8
SHP[1], 11
SHP[1], 18
SRP1[], 18
SHP[1], 15
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="two">
/* TT glyph 769, char 0x32 (2) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 12, 114
CALL[], 25, 5, 114
SHP[2], 14
SRP1[], 0
SHP[1], 39
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="two.dnom">
/* TT glyph 809, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 10
SHP[2], 33
MIRP[m&lt;RGr], 21, 77
SHP[2], 12
SLOOP[], 4
IP[], 29, 4, 9, 24
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="two.lf">
/* TT glyph 779, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 39
CALL[], 24, 3, 114
SHP[2], 14
SRP2[], 0
SLOOP[], 3
IP[], 34, 5, 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="two.numr">
/* TT glyph 819, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 78
SHP[2], 33
MIRP[m&lt;RGr], 21, 77
SHP[2], 12
SLOOP[], 4
IP[], 24, 9, 4, 29
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="two.subs">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 792, 0, 0


    </glyphProgram>

    <glyphProgram name="u">
/* TT glyph 414, char 0x75 (u) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 12
CALL[], 6, 6, 114
SHP[2], 18
SRP2[], 0
IP[], 35
IP[], 16
CALL[], 25, 10, 114
SHP[2], 24
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="u.sc">
/* TT glyph 496, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 17
MIAP[R], 8, 74
SHP[1], 24
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="u.ss08">
/* TT glyph 466, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 16
SHP[2], 24
MDAP[R], 24
MDAP[R], 8
SHP[1], 22
IP[], 20
IP[], 25
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uacute">
/* VTTTalk Unicode 0xfa */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 974, 210, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 38

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="ubreve">
/* VTTTalk Unicode 0x16d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 979, 156, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 46

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="ucircumflex">
/* VTTTalk Unicode 0xfb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 977, 132, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 44

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="udieresis">
/* VTTTalk Unicode 0xfc */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 971, 160, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 38
MDRP[m&gt;RWh], 42

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="ugrave">
/* VTTTalk Unicode 0xf9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 973, 119, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 41

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uhorn">
/* VTTTalk Unicode 0x1b0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 987, 388, -38

SVTCA[Y]
CALL[], 39, 17, 0, 0, 0, 86
SHC[2], 1






    </glyphProgram>

    <glyphProgram name="uhungarumlaut">
/* VTTTalk Unicode 0x171 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 975, 147, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 38
MDRP[m&gt;RWh], 42

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="umacron">
/* VTTTalk Unicode 0x16b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 982, 93, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 38

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="underscore">
/* TT glyph 864, char 0x5f (_) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 2
SHP[1], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni00A0">
/* TT glyph 895, char 0xa0 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */


    </glyphProgram>

    <glyphProgram name="uni00AD">
/* TT glyph 878, char 0xad */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni00B2">
/* TT glyph 829, char 0xb2 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 79
SHP[2], 33
MIRP[m&lt;RGr], 21, 77
SHP[2], 12
SLOOP[], 4
IP[], 29, 4, 9, 24
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni00B3">
/* TT glyph 830, char 0xb3 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 79
SHP[2], 7
MIRP[m&lt;RGr], 31, 77
SHP[2], 23
IP[], 14
MDAP[R], 14
SHP[1], 17
SHP[1], 37
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni00B5">
/* TT glyph 948, char 0xb5 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 6, 114
SHP[2], 12
MIAP[R], 20, 10
SHP[1], 19
CALL[], 33, 11, 114
SHP[2], 38
MDAP[R], 38
SHP[2], 7
SRP1[], 7
SHP[1], 29
SRP1[], 29
SHP[1], 11
SRP1[], 7
SHP[1], 36
SRP1[], 36
SHP[1], 5
SRP1[], 5
SHP[1], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni00B9">
/* TT glyph 828, char 0xb9 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 2, 79
SHP[1], 4
SRP1[], 4
SHP[1], 17
MIRP[m&lt;RGr], 15, 77
SHP[2], 5
SHP[2], 10
SRP1[], 10
SHP[1], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0122">
/* VTTTalk Unicode 0x122 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 66, 0, 0
OFFSET[R], 990, 293, 0


SVTCA[Y]
CALL[], 42, 0, 1, 1, -60, 86
SHC[2], 2







    </glyphProgram>

    <glyphProgram name="uni0123">
/* VTTTalk Unicode 0x123 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 295, 0, 0
OFFSET[R], 986, 222, 0



SVTCA[Y]
MDAP[R], 24
MDRP[m&gt;RWh], 57

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni0136">
/* VTTTalk Unicode 0x136 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 95, 0, 0
OFFSET[R], 990, 245, 0


SVTCA[Y]
CALL[], 15, 11, 1, 1, -50, 86
SHC[2], 1






    </glyphProgram>

    <glyphProgram name="uni0137">
/* VTTTalk Unicode 0x137 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 326, 0, 0
OFFSET[R], 990, 194, 0


SVTCA[Y]
CALL[], 31, 27, 1, 1, -50, 86
SHC[2], 2







    </glyphProgram>

    <glyphProgram name="uni013B">
/* VTTTalk Unicode 0x13b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 97, 0, 0
OFFSET[R], 990, 247, 0




SVTCA[Y]
CALL[], 9, 5, 1, 1, -50, 86
SHC[2], 1






    </glyphProgram>

    <glyphProgram name="uni013C">
/* VTTTalk Unicode 0x13c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 329, 0, 0
OFFSET[R], 990, 79, 0

SVTCA[Y]
CALL[], 24, 0, 1, 1, -45, 86
SHC[2], 1




    </glyphProgram>

    <glyphProgram name="uni0145">
/* VTTTalk Unicode 0x145 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 107, 0, 0
OFFSET[R], 990, 309, 0



SVTCA[Y]
CALL[], 13, 9, 1, 1, -60, 86
SHC[2], 1







    </glyphProgram>

    <glyphProgram name="uni0146">
/* VTTTalk Unicode 0x146 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 339, 0, 0
OFFSET[R], 990, 209, 0

SVTCA[Y]
CALL[], 32, 28, 1, 1, -50, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni0156">
/* VTTTalk Unicode 0x156 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 154, 0, 0
OFFSET[R], 990, 239, 0


SVTCA[Y]
CALL[], 32, 0, 1, 1, -60, 86
SHC[2], 2




    </glyphProgram>

    <glyphProgram name="uni0157">
/* VTTTalk Unicode 0x157 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 386, 0, 0
OFFSET[R], 990, 23, 0


SVTCA[Y]
CALL[], 18, 14, 1, 1, -50, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni0162">
/* VTTTalk Unicode 0x162 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 175, 0, 0
OFFSET[R], 991, 119, 0


    </glyphProgram>

    <glyphProgram name="uni0163">
/* VTTTalk Unicode 0x163 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 406, 0, 0
OFFSET[R], 991, 18, 0

    </glyphProgram>

    <glyphProgram name="uni018F">
/* TT glyph 174, char 0x18f */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 36
CALL[], 25, 3, 114
SHP[2], 16
SRP1[], 0
IP[], 42
MDAP[R], 42
IP[], 12
IP[], 30
SHP[1], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni01C4">
/* TT glyph 1061, char 0x1c4 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 3, 2, 114
SHP[2], 2
SRP1[], 2
SHP[1], 5
MDRP[M&gt;RWh], 40
SMD[], 128
MDRP[m&gt;RBl], 35
SHP[2], 34
IP[], 36
SHP[2], 37
SRP1[], 37
SHP[1], 38
MIAP[R], 9, 8
SHP[1], 6
SRP1[], 6
SHP[1], 0
CALL[], 10, 2, 114
SHP[2], 32
MIAP[R], 21, 8
SHP[1], 33
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni01C5">
/* TT glyph 1047, char 0x1c5 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 2, 114
SHP[2], 22
CALL[], 11, 8, 114
SHP[2], 23
SHP[2], 33
SRP1[], 33
SHP[1], 30
SRP1[], 30
SHP[1], 24
CALL[], 27, 6, 114
SHP[2], 26
SRP1[], 26
SHP[1], 29
MDRP[M&gt;RWh], 40
SMD[], 128
MDRP[m&gt;RBl], 35
SHP[2], 34
IP[], 36
SHP[2], 37
SRP1[], 37
SHP[1], 38
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni01C6">
/* TT glyph 1048, char 0x1c6 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 34
CALL[], 9, 7, 114
SHP[2], 44
SRP2[], 0
SLOOP[], 4
IP[], 31, 39, 40, 12
MIAP[R], 13, 0
MIAP[R], 21, 10
SHP[1], 20
CALL[], 56, 6, 114
SHP[2], 55
SRP1[], 55
SHP[1], 58
MDRP[M&gt;RWh], 69
SMD[], 128
MDRP[m&gt;RBl], 64
SHP[2], 63
IP[], 65
SHP[2], 66
SRP1[], 66
SHP[1], 67
MIAP[R], 62, 10
SHP[1], 59
SRP1[], 59
SHP[1], 53
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni01C7">
/* VTTTalk Unicode 0x1c7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 97, 0, 0
OFFSET[R], 93, 552, 0



    </glyphProgram>

    <glyphProgram name="uni01C8">
/* VTTTalk Unicode 0x1c8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 97, 0, 0
OFFSET[R], 323, 552, 0


    </glyphProgram>

    <glyphProgram name="uni01C9">
/* VTTTalk Unicode 0x1c9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 329, 0, 0
OFFSET[R], 323, 224, 0



    </glyphProgram>

    <glyphProgram name="uni01CA">
/* VTTTalk Unicode 0x1ca */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 107, 0, 0
OFFSET[R], 93, 743, 0


    </glyphProgram>

    <glyphProgram name="uni01CB">
/* VTTTalk Unicode 0x1cb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 107, 0, 0
OFFSET[R], 323, 743, 0



    </glyphProgram>

    <glyphProgram name="uni01CC">
/* VTTTalk Unicode 0x1cc */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 339, 0, 0
OFFSET[R], 323, 540, 0



    </glyphProgram>

    <glyphProgram name="uni01EA">
/* VTTTalk Unicode 0x1ea */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 992, 261, 0


    </glyphProgram>

    <glyphProgram name="uni01EB">
/* VTTTalk Unicode 0x1eb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 992, 184, 0


    </glyphProgram>

    <glyphProgram name="uni01F1">
/* VTTTalk Unicode 0x1f1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 36, 0, 0
OFFSET[R], 222, 672, 0


    </glyphProgram>

    <glyphProgram name="uni01F2">
/* VTTTalk Unicode 0x1f2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 36, 0, 0
OFFSET[R], 454, 684, 0


    </glyphProgram>

    <glyphProgram name="uni01F3">
/* VTTTalk Unicode 0x1f3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 264, 0, 0
OFFSET[R], 454, 579, 0



    </glyphProgram>

    <glyphProgram name="uni01F4">
/* VTTTalk Unicode 0x1f4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 66, 0, 0
OFFSET[R], 1006, 307, 188

SVTCA[Y]
MDAP[R], 10
MDRP[m&gt;RWh], 39

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni01F5">
/* VTTTalk Unicode 0x1f5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 295, 0, 0
OFFSET[R], 1006, 266, 0


SVTCA[Y]
MDAP[R], 24
MDRP[m&gt;RWh], 53

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni0200">
/* VTTTalk Unicode 0x200 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 984, 162, 191




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 18
MDRP[m&gt;RWh], 14

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni0201">
/* VTTTalk Unicode 0x201 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 984, 92, 0


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 60
MDRP[m&gt;RWh], 56

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni0202">
/* VTTTalk Unicode 0x202 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 985, 243, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 11

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni0203">
/* VTTTalk Unicode 0x203 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 985, 173, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 53

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni0204">
/* VTTTalk Unicode 0x204 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 984, 137, 191




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 19
MDRP[m&gt;RWh], 15

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni0205">
/* VTTTalk Unicode 0x205 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 984, 66, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 55
MDRP[m&gt;RWh], 51

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="uni0206">
/* VTTTalk Unicode 0x206 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 985, 218, 191




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 12

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni0207">
/* VTTTalk Unicode 0x207 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 985, 147, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 48

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni0208">
/* VTTTalk Unicode 0x208 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 984, -60, 188




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 11
MDRP[m&gt;RWh], 7

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni0209">
/* VTTTalk Unicode 0x209 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 984, -112, 0




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 11
MDRP[m&gt;RWh], 7

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni020A">
/* VTTTalk Unicode 0x20a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 985, 21, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni020B">
/* VTTTalk Unicode 0x20b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 985, -41, 0




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni020C">
/* VTTTalk Unicode 0x20c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 984, 207, 188



SVTCA[Y]
MDAP[R], 10
MDRP[m&gt;RWh], 47
MDRP[m&gt;RWh], 43

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni020D">
/* VTTTalk Unicode 0x20d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 984, 73, 0


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 43
MDRP[m&gt;RWh], 39

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni020E">
/* VTTTalk Unicode 0x20e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 985, 288, 188




SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 40

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni020F">
/* VTTTalk Unicode 0x20f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 985, 154, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni0210">
/* VTTTalk Unicode 0x210 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 154, 0, 0
OFFSET[R], 984, 145, 191



SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 36
MDRP[m&gt;RWh], 32

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni0211">
/* VTTTalk Unicode 0x211 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 386, 0, 0
OFFSET[R], 984, -60, 0



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 22
MDRP[m&gt;RWh], 18

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni0212">
/* VTTTalk Unicode 0x212 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 154, 0, 0
OFFSET[R], 985, 226, 191



SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 29

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni0213">
/* VTTTalk Unicode 0x213 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 386, 0, 0
OFFSET[R], 985, 21, 0



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 15

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni0214">
/* VTTTalk Unicode 0x214 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 984, 192, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 37
MDRP[m&gt;RWh], 33

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni0215">
/* VTTTalk Unicode 0x215 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 984, 78, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 45
MDRP[m&gt;RWh], 41

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni0216">
/* VTTTalk Unicode 0x216 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 985, 273, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 30

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni0217">
/* VTTTalk Unicode 0x217 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 985, 159, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 38

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0218">
/* VTTTalk Unicode 0x218 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 990, 231, 0

SVTCA[Y]
CALL[], 56, 0, 1, 1, -50, 86
SHC[2], 1





    </glyphProgram>

    <glyphProgram name="uni0219">
/* VTTTalk Unicode 0x219 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 394, 0, 0
OFFSET[R], 990, 164, 0

SVTCA[Y]
CALL[], 47, 0, 1, 1, -40, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni021A">
/* VTTTalk Unicode 0x21a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 175, 0, 0
OFFSET[R], 990, 211, 0

SVTCA[Y]
CALL[], 11, 7, 1, 1, -50, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni021B">
/* VTTTalk Unicode 0x21b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 406, 0, 0
OFFSET[R], 990, 110, 0

SVTCA[Y]
CALL[], 35, 29, 1, 1, -45, 86
SHC[2], 1




    </glyphProgram>

    <glyphProgram name="uni022A">
/* VTTTalk Unicode 0x22a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 971, 289, 188
OFFSET[R], 982, 267, 399



SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 40
MDRP[m&gt;RWh], 44

MDAP[R], 44

SMD[], 128


MDRP[m&gt;RWh], 48

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni022B">
/* VTTTalk Unicode 0x22b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 971, 155, 0
OFFSET[R], 982, 133, 211


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36
MDRP[m&gt;RWh], 40

MDAP[R], 40

SMD[], 128


MDRP[m&gt;RWh], 44

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni022C">
/* VTTTalk Unicode 0x22c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 981, 223, 188
OFFSET[R], 982, 267, 399



SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 40
MDAP[R], 40

SMD[], 128


MDRP[m&gt;RWh], 69

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni022D">
/* VTTTalk Unicode 0x22d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 981, 89, 0
OFFSET[R], 982, 133, 211



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36

MDAP[R], 36

SMD[], 192


MDRP[m&gt;RWh], 65

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni0230">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 972, 345, 188
OFFSET[R], 982, 267, 399



SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 40
MDAP[R], 40

SMD[], 64


MDRP[m&gt;RWh], 44

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="uni0231">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 972, 211, 0
OFFSET[R], 982, 133, 211



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36

MDAP[R], 36

SMD[], 128


MDRP[m&gt;RWh], 40

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni0232">
/* VTTTalk Unicode 0x232 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 212, 0, 0
OFFSET[R], 982, 141, 188

SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 9

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni0233">
/* VTTTalk Unicode 0x233 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 444, 0, 0
OFFSET[R], 982, 54, 0


SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 27

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni0237">
/* TT glyph 324, char 0x237 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 7
CALL[], 12, 6, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0259">
/* TT glyph 293, char 0x259 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 33
CALL[], 24, 7, 114
SHP[2], 15
SRP1[], 0
IP[], 38
MDAP[R], 38
SHP[1], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni02B9">
/* VTTTalk Unicode 0x2b9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 969, 0, 0



    </glyphProgram>

    <glyphProgram name="uni02BA">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 970, 0, 0


    </glyphProgram>

    <glyphProgram name="uni02BB">
/* VTTTalk Unicode 0x2bb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 986, 0, 0


    </glyphProgram>

    <glyphProgram name="uni02BC">
/* TT glyph 996, char 0x2bc */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 2
SMD[], 128
MDRP[m&gt;RBl], 0
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni02BE">
/* TT glyph 1003, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 8
SHP[1], 7
SMD[], 128
MDRP[m&gt;RGr], 0
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni02BF">
/* TT glyph 1002, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 6
SHP[1], 7
SMD[], 128
MDRP[m&gt;RWh], 0
SHP[2], 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni02C8">
/* TT glyph 1005, char 0x2c8 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 1
MDAP[R], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni02C9">
/* TT glyph 999, char 0x2c9 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni02CB">
/* TT glyph 1000, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
SMD[], 128
MDRP[m&gt;RBl], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni02CC">
/* TT glyph 1004, char 0x2cc */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 1
MDAP[R], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0302">
/* TT glyph 977, char 0x302 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 4
SHP[1], 3
SMD[], 128
MDRP[m&gt;RBl], 2
IP[], 5
SHP[1], 6
SRP1[], 6
SHP[1], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni03020300">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 977, 47, -21
OFFSET[R], 973, -28, 10


    </glyphProgram>

    <glyphProgram name="uni03020301">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 977, -4, -21
OFFSET[R], 974, 176, 33


    </glyphProgram>

    <glyphProgram name="uni03020303">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 977, 0, 0
OFFSET[R], 981, -5, 126


    </glyphProgram>

    <glyphProgram name="uni03020309">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 977, -4, -21
OFFSET[R], 983, 108, 111



    </glyphProgram>

    <glyphProgram name="uni0304">
/* TT glyph 982, char 0x304 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0306">
/* TT glyph 979, char 0x306 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 8
SHP[1], 0
SMD[], 128
MDRP[m&gt;RGr], 3
SHP[2], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni03060300">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 979, 0, 0
OFFSET[R], 973, -2, 121


    </glyphProgram>

    <glyphProgram name="uni03060301">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 979, 0, 0
OFFSET[R], 974, 89, 121


    </glyphProgram>

    <glyphProgram name="uni03060303">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 979, 0, 0
OFFSET[R], 981, -23, 127



    </glyphProgram>

    <glyphProgram name="uni03060309">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 979, -12, -56
OFFSET[R], 983, 39, 139

    </glyphProgram>

    <glyphProgram name="uni0307">
/* TT glyph 972, char 0x307 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0308">
/* TT glyph 971, char 0x308 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 7
SHP[1], 3
MDRP[m&gt;RBl], 6
SHP[2], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni030A">
/* TT glyph 980, char 0x30a */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 9
SHP[1], 18
SMD[], 128
MDRP[m&gt;RGr], 3
SHP[2], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni030B">
/* TT glyph 975, char 0x30b */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
SMD[], 128
MDRP[m&gt;RBl], 2
SHP[2], 6
SHP[1], 4
SRP1[], 4
SHP[1], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni030C">
/* TT glyph 978, char 0x30c */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 6
SMD[], 128
MDRP[m&gt;RBl], 1
SHP[2], 0
IP[], 2
SHP[2], 3
SRP1[], 3
SHP[1], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni030C.alt">
/* TT glyph 976, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SHP[1], 0
SMD[], 128
MDRP[m&gt;RBl], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni030F">
/* TT glyph 984, char 0x30f */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SHP[1], 2
SMD[], 128
MDRP[m&gt;RBl], 0
SHP[2], 5
SHP[1], 7
MDAP[R], 7
SHP[1], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0311">
/* TT glyph 985, char 0x311 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 19
SHP[1], 11
MDAP[R], 11
SMD[], 128
SRP0[], 19
MDRP[m&gt;RGr], 4
SHP[2], 16
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0312">
/* TT glyph 986, char 0x312 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SMD[], 128
MDRP[m&gt;RGr], 0
IP[], 5
IP[], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni031B">
/* TT glyph 987, char 0x31b */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
SMD[], 192
MDRP[m&gt;RGr], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0324">
/* TT glyph 989, char 0x324 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 1
SHP[1], 5
SHP[1], 0
SHP[2], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0326">
/* TT glyph 990, char 0x326 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SMD[], 128
MDRP[m&gt;RWh], 0
IP[], 5
IP[], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0326.1">
/* TT glyph 1041, char 0xf6c3 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 4
SMD[], 128
MDRP[m&gt;RGr], 0
IP[], 2
IP[], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0327">
/* TT glyph 991, char 0x1dd7 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 14
SHP[1], 13
SMD[], 128
MDRP[m&gt;RGr], 0
SHP[2], 7
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0328">
/* TT glyph 992, char 0x328 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 4
SHP[1], 5
SMD[], 128
MDRP[m&gt;RGr], 12
SHP[2], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni032E">
/* TT glyph 993, char 0x32e */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 3
SHP[1], 10
SMD[], 128
MDRP[m&gt;RGr], 0
SHP[2], 7
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0331">
/* TT glyph 994, char 0x331 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 1
SHP[1], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0335">
/* TT glyph 995, char 0x335 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0394">
/* TT glyph 1058, char 0x394 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 6
SRP1[], 6
SHP[1], 1
SHP[1], 4
CALL[], 2, 2, 114
SHP[2], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni03A9">
/* TT glyph 1059, char 0x3a9 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 1
SRP1[], 1
SHP[1], 44
SHP[2], 23
SRP1[], 23
SHP[1], 20
SRP1[], 20
SHP[1], 24
CALL[], 11, 3, 114
SHP[2], 34
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni03BC">
/* TT glyph 1060, char 0x3bc */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 14, 114
CALL[], 1, 6, 114
SHP[2], 14
MIAP[R], 21, 10
SHP[1], 20
CALL[], 34, 11, 114
SHP[2], 8
SRP1[], 1
SLOOP[], 5
IP[], 37, 6, 30, 12, 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0400">
/* VTTTalk Unicode 0x400 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 57, 0, 0



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 15

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni0401">
/* VTTTalk Unicode 0x401 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 513, 0, 0
OFFSET[R], 971, 219, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 12
MDRP[m&gt;RWh], 16

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni0402">
/* TT glyph 555, char 0x402 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 3, 2, 114
SHP[2], 2
SRP1[], 2
SHP[1], 6
CALL[], 7, 8, 114
CALL[], 8, 9, 114
SHP[2], 15
SRP2[], 3
IP[], 29
MDAP[R], 29
SRP2[], 8
IP[], 26
IP[], 25
SHP[1], 22
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0403">
/* VTTTalk Unicode 0x403 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 509, 0, 0
OFFSET[R], 974, 262, 191



SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 6

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni0404">
/* TT glyph 547, char 0x404 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 9, 114
SHP[2], 32
CALL[], 14, 3, 114
SHP[2], 22
SRP1[], 4
IP[], 0
MDAP[R], 0
SHP[1], 1
SHP[1], 9
SHP[1], 27
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0405">
/* VTTTalk Unicode 0x405 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0406">
/* VTTTalk Unicode 0x406 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0407">
/* VTTTalk Unicode 0x407 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 971, 22, 188


SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4
MDRP[m&gt;RWh], 8

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni0408">
/* VTTTalk Unicode 0x408 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 93, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0409">
/* TT glyph 544, char 0x409 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 7, 2, 114
SHP[2], 21
CALL[], 19, 8, 114
SHP[2], 27
SHP[2], 0
MDAP[R], 0
SHP[1], 1
SRP1[], 7
IP[], 9
MDAP[R], 9
SHP[1], 37
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni040A">
/* TT glyph 545, char 0x40a */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 17
SRP1[], 17
SHP[1], 21
CALL[], 1, 2, 114
SHP[2], 6
SRP1[], 0
IP[], 3
MDAP[R], 3
SHP[1], 7
SHP[1], 19
SRP1[], 19
SHP[1], 31
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni040B">
/* TT glyph 552, char 0x40b */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 3, 2, 114
SHP[2], 2
SRP1[], 2
SHP[1], 6
CALL[], 7, 8, 114
SHP[2], 25
SRP2[], 3
IP[], 20
MDAP[R], 20
SHP[1], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni040C">
/* VTTTalk Unicode 0x40c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 522, 0, 0
OFFSET[R], 974, 242, 191


SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 13

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni040D">
/* VTTTalk Unicode 0x40d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 518, 0, 0
OFFSET[R], 973, 234, 191


SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 13

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni040E">
/* VTTTalk Unicode 0x40e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 532, 0, 0
OFFSET[R], 1020, 118, 0



SVTCA[Y]
MDAP[R], 7
MDRP[m&gt;RWh], 17

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni040F">
/* TT glyph 540, char 0x40f */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 2, 8, 114
SHP[2], 5
SHP[2], 10
CALL[], 3, 2, 114
SHP[2], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0410">
/* VTTTalk Unicode 0x410 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0411">
/* TT glyph 507, char 0x411 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 15
CALL[], 1, 2, 114
SHP[2], 4
SRP1[], 0
IP[], 5
MDAP[R], 5
SHP[1], 25
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0412">
/* VTTTalk Unicode 0x412 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 28, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0413">
/* TT glyph 509, char 0x413 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
SHP[2], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0414">
/* TT glyph 512, char 0x414 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 7, 2, 114
SHP[2], 19
MIAP[R], 14, 8
MDRP[m&gt;RBl], 15
SHP[2], 12
SHP[1], 16
SRP1[], 16
SHP[1], 1
SHP[1], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0414.loclBGR">
/* TT glyph 620, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
SHP[2], 5
MIAP[R], 13, 18
SHP[1], 8
SHP[1], 6
SRP1[], 6
SHP[1], 4
MDRP[m&gt;RBl], 14
SHP[2], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0415">
/* VTTTalk Unicode 0x415 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0416">
/* TT glyph 516, char 0x416 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 14
SHP[2], 18
CALL[], 2, 2, 114
SHP[2], 7
SHP[2], 11
SRP1[], 0
IP[], 16
MDAP[R], 16
SHP[1], 20
SHP[1], 8
SRP1[], 8
SHP[1], 4
SRP1[], 4
SHP[1], 1
SHP[1], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0417">
/* TT glyph 517, char 0x417 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 7
CALL[], 32, 3, 114
SHP[2], 25
SRP1[], 0
IP[], 16
MDAP[R], 16
SHP[1], 15
SRP1[], 15
SHP[1], 39
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0418">
/* TT glyph 518, char 0x418 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 7
CALL[], 1, 2, 114
SHP[2], 5
SRP2[], 0
IP[], 3
IP[], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0419">
/* VTTTalk Unicode 0x419 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 518, 0, 0
OFFSET[R], 1020, 158, 0


SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 10

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni041A">
/* TT glyph 522, char 0x41a */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 9
CALL[], 1, 2, 114
SHP[2], 6
SRP1[], 0
IP[], 11
MDAP[R], 11
SHP[1], 3
SRP1[], 3
SHP[1], 7
SVTCA[X]
MDAP[R], 0
MDAP[R], 6
SRP2[], 0
SLOOP[], 4
IP[], 12, 11, 3, 2
/* Align [12...2] */
SRP0[], 12
SPVTL[R], 12, 2
ALIGNRP[], 11
ALIGNRP[], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni041B">
/* TT glyph 524, char 0x41b */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 7, 2, 114
SHP[2], 12
CALL[], 9, 8, 114
SHP[2], 0
MDAP[R], 0
SHP[1], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni041B.loclBGR">
/* TT glyph 621, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 4
CALL[], 1, 2, 114
SHP[2], 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni041C">
/* VTTTalk Unicode 0x41c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 105, 0, 0



    </glyphProgram>

    <glyphProgram name="uni041D">
/* VTTTalk Unicode 0x41d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 73, 0, 0


    </glyphProgram>

    <glyphProgram name="uni041E">
/* TT glyph 527, char 0x41e */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 20
CALL[], 10, 3, 114
SHP[2], 30
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni041F">
/* TT glyph 528, char 0x41f */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 4
CALL[], 1, 2, 114
SHP[2], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0420">
/* VTTTalk Unicode 0x420 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 151, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0421">
/* TT glyph 530, char 0x421 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 28
CALL[], 10, 3, 114
SHP[2], 18
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0422">
/* VTTTalk Unicode 0x422 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 175, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0423">
/* TT glyph 532, char 0x423 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 1
CALL[], 7, 2, 114
SHP[2], 11
SRP2[], 0
IP[], 6
IP[], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0424">
/* TT glyph 534, char 0x424 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 10
SHP[1], 25
MDAP[R], 25
SRP1[], 10
SHP[1], 42
SHP[1], 11
SRP1[], 11
SHP[1], 41
MIAP[R], 20, 8
MDRP[m&gt;RBl], 0
SHP[2], 32
SHP[2], 19
SRP1[], 19
SHP[1], 33
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0424.loclBGR">
/* TT glyph 622, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 10, 3, 114
MDRP[m&gt;RBl], 11
SHP[1], 13
SHP[1], 25
SRP1[], 25
SHP[1], 43
CALL[], 22, 9, 114
SHP[2], 1
MDRP[m&gt;RBl], 23
SHP[1], 24
SRP1[], 24
SHP[1], 34
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0425">
/* VTTTalk Unicode 0x425 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 211, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0426">
/* TT glyph 537, char 0x426 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 2, 8, 114
MDRP[m&gt;RWh], 0
SHP[1], 5
SRP1[], 5
SHP[1], 9
CALL[], 3, 2, 114
SHP[2], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0427">
/* TT glyph 536, char 0x427 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 3, 8, 114
CALL[], 12, 2, 114
SHP[2], 1
SRP1[], 3
IP[], 7
MDAP[R], 7
SHP[1], 17
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0428">
/* TT glyph 538, char 0x428 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 3
SRP1[], 3
SHP[1], 7
CALL[], 1, 2, 114
SHP[2], 6
SHP[2], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0429">
/* TT glyph 539, char 0x429 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 2, 8, 114
SHP[2], 5
SRP1[], 5
SHP[1], 9
SHP[1], 13
CALL[], 3, 2, 114
SHP[2], 8
SHP[2], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni042A">
/* TT glyph 542, char 0x42a */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 15
CALL[], 3, 2, 114
SHP[2], 2
SRP1[], 0
IP[], 5
MDAP[R], 5
SHP[1], 25
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni042B">
/* TT glyph 543, char 0x42b */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 13
SHP[2], 26
CALL[], 1, 2, 114
SHP[2], 24
SRP1[], 0
IP[], 3
MDAP[R], 3
SHP[1], 23
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni042C">
/* TT glyph 541, char 0x42c */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 13
CALL[], 1, 2, 114
SRP1[], 0
IP[], 3
MDAP[R], 3
SHP[1], 23
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni042D">
/* TT glyph 548, char 0x42d */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 9
CALL[], 25, 3, 114
SHP[2], 18
SRP1[], 0
IP[], 35
MDAP[R], 35
SHP[1], 36
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni042E">
/* TT glyph 553, char 0x42e */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 8, 9, 114
SHP[2], 28
CALL[], 18, 3, 114
SHP[2], 38
SRP1[], 8
IP[], 6
MDAP[R], 6
SHP[1], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni042F">
/* TT glyph 554, char 0x42f */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 11
CALL[], 8, 2, 114
SHP[2], 21
SRP1[], 0
IP[], 13
MDAP[R], 13
SHP[1], 1
SHP[1], 18
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0430">
/* VTTTalk Unicode 0x430 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0431">
/* TT glyph 628, char 0x431 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 31
MDAP[R], 11
SHP[1], 12
IP[], 23
MDAP[R], 23
SLOOP[], 3
IP[], 20, 3, 41
SHP[1], 37
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0431.loclSRB">
/* TT glyph 756, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 19
MIAP[R], 44, 2
SHP[1], 47
MDAP[R], 53
SHP[1], 28
SRP1[], 28
SHP[1], 9
SHP[1], 37
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0432">
/* TT glyph 629, char 0x432 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 35
CALL[], 7, 7, 114
SHP[2], 28
SRP1[], 0
IP[], 21
MDAP[R], 21
SHP[1], 14
SRP1[], 14
SHP[1], 43
SRP1[], 43
SHP[1], 44
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0432.loclBGR">
/* TT glyph 743, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 28
CALL[], 9, 3, 114
SHP[2], 43
SRP1[], 0
IP[], 36
MDAP[R], 36
SHP[1], 35
SRP1[], 35
SHP[1], 17
SRP1[], 17
SHP[1], 18
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0433">
/* TT glyph 630, char 0x433 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 34
CALL[], 21, 7, 114
SHP[2], 14
SRP2[], 0
SLOOP[], 6
IP[], 31, 4, 27, 7, 24, 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0433.loclSRB">
/* TT glyph 757, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 5, 6, 114
MDRP[m&gt;RWh], 13
SHP[2], 14
MDAP[R], 11
SHP[1], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0434">
/* TT glyph 633, char 0x434 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 33
CALL[], 20, 0, 114
SHP[2], 19
SRP1[], 0
IP[], 9
MDAP[R], 9
IP[], 23
IP[], 16
SRP2[], 0
SLOOP[], 4
IP[], 26, 13, 38, 29
SHP[1], 42
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0434.loclBGR">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 295, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0434.loclSRB">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 295, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0435">
/* TT glyph 634, char 0x435 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 40
CALL[], 9, 7, 114
SHP[2], 31
SRP1[], 0
IP[], 16
MDAP[R], 16
SHP[1], 23
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0436">
/* TT glyph 637, char 0x436 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 21
SHP[2], 25
CALL[], 4, 6, 114
SHP[2], 9
SHP[2], 16
SRP1[], 0
IP[], 27
MDAP[R], 27
SHP[1], 23
SHP[1], 7
SRP1[], 7
SHP[1], 3
SHP[1], 10
SHP[1], 19
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0436.loclBGR">
/* TT glyph 745, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 22
SHP[2], 26
CALL[], 6, 7, 114
SHP[2], 16
SRP1[], 16
SHP[1], 17
CALL[], 10, 0, 114
SRP1[], 0
IP[], 28
MDAP[R], 28
SHP[1], 24
SHP[1], 5
SRP1[], 5
SHP[1], 20
SRP1[], 28
SHP[1], 9
SRP1[], 9
SHP[1], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0437">
/* TT glyph 638, char 0x437 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 7
CALL[], 30, 7, 114
SHP[2], 23
SRP1[], 0
IP[], 14
MDAP[R], 14
SHP[1], 15
SRP1[], 15
SHP[1], 37
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0437.loclBGR">
/* TT glyph 746, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 7
CALL[], 32, 7, 114
SHP[2], 25
SRP1[], 0
IP[], 17
MDAP[R], 17
SHP[1], 16
SRP1[], 16
SHP[1], 39
SRP1[], 39
SHP[1], 40
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0438">
/* VTTTalk Unicode 0x438 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0439">
/* VTTTalk Unicode 0x439 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 639, 0, 0
OFFSET[R], 1019, 83, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 38

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni043A">
/* TT glyph 643, char 0x43a */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 13
CALL[], 1, 6, 114
SHP[2], 8
SRP1[], 0
IP[], 15
MDAP[R], 15
SHP[1], 3
SRP1[], 3
SHP[1], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni043A.loclBGR">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 326, 0, 0


    </glyphProgram>

    <glyphProgram name="uni043B">
/* TT glyph 645, char 0x43b */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 6
CALL[], 3, 6, 114
SRP2[], 0
IP[], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni043C">
/* TT glyph 646, char 0x43c */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 7
CALL[], 1, 6, 114
SHP[2], 5
SRP2[], 0
SLOOP[], 5
IP[], 10, 9, 3, 8, 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni043D">
/* TT glyph 647, char 0x43d */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 8
CALL[], 1, 6, 114
SHP[2], 6
SRP1[], 0
IP[], 10
MDAP[R], 10
SHP[1], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni043E">
/* TT glyph 648, char 0x43e */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 18
CALL[], 9, 7, 114
SHP[2], 27
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni043F">
/* TT glyph 649, char 0x43f */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 4
CALL[], 1, 6, 114
SHP[2], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni043F.loclBGR">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 339, 0, 0


    </glyphProgram>

    <glyphProgram name="uni043F.loclSRB">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 639, 0, 0
OFFSET[R], 982, 76, 0


SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 38

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni0440">
/* VTTTalk Unicode 0x440 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 383, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0441">
/* VTTTalk Unicode 0x441 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 257, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0442">
/* VTTTalk Unicode 0x442 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 337, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0442.loclBGR">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 337, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0443">
/* VTTTalk Unicode 0x443 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 444, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0444">
/* TT glyph 655, char 0x444 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 2, 10, 114
MDRP[m&gt;RWh], 0
SHP[1], 24
SHP[1], 26
SRP1[], 26
SHP[1], 37
CALL[], 10, 6, 114
MDRP[m&gt;RWh], 12
SHP[1], 14
SHP[1], 29
SRP1[], 29
SHP[1], 47
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0445">
/* VTTTalk Unicode 0x445 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 443, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0446">
/* TT glyph 658, char 0x446 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 1, 10
SHP[1], 34
CALL[], 8, 11, 114
MDRP[m&gt;RWh], 0
SHP[1], 23
CALL[], 15, 6, 114
SHP[2], 29
SRP2[], 8
SLOOP[], 3
IP[], 30, 5, 27
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0447">
/* TT glyph 657, char 0x447 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 8, 6, 114
SHP[2], 18
SRP1[], 0
IP[], 4
MDAP[R], 4
IP[], 16
IP[], 1
SHP[1], 13
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0448">
/* TT glyph 659, char 0x448 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 1, 10, 114
CALL[], 13, 11, 114
SHP[2], 28
SHP[2], 5
SRP1[], 5
SHP[1], 41
CALL[], 21, 6, 114
SHP[2], 34
SHP[2], 46
SRP2[], 13
SLOOP[], 6
IP[], 38, 2, 9, 44, 32, 35
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0449">
/* TT glyph 660, char 0x449 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 1, 18
MDRP[m&gt;RBl], 0
SHP[1], 54
CALL[], 16, 11, 114
SHP[2], 31
SHP[2], 8
SRP1[], 8
SHP[1], 44
CALL[], 24, 6, 114
SHP[2], 37
SHP[2], 49
SRP2[], 16
SLOOP[], 6
IP[], 50, 41, 5, 12, 47, 35
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni044A">
/* TT glyph 663, char 0x44a */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 24
CALL[], 10, 6, 114
SHP[2], 9
SRP1[], 0
IP[], 14
MDAP[R], 14
SHP[1], 33
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni044B">
/* TT glyph 664, char 0x44b */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 14
CALL[], 7, 6, 114
SHP[2], 33
SRP1[], 0
IP[], 22
MDAP[R], 22
SHP[1], 21
CALL[], 35, 10, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni044C">
/* TT glyph 662, char 0x44c */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 15
CALL[], 7, 6, 114
SRP1[], 0
IP[], 23
MDAP[R], 23
SHP[1], 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni044D">
/* TT glyph 669, char 0x44d */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 8
CALL[], 24, 7, 114
SHP[2], 17
SRP1[], 0
IP[], 34
MDAP[R], 34
SHP[1], 35
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni044E">
/* TT glyph 674, char 0x44e */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
CALL[], 8, 11, 114
SHP[2], 26
CALL[], 17, 7, 114
SHP[2], 35
SRP1[], 8
IP[], 6
MDAP[R], 6
SHP[1], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni044E.loclBGR">
/* TT glyph 750, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 10
CALL[], 1, 0, 114
CALL[], 8, 11, 114
SHP[2], 26
CALL[], 17, 7, 114
SHP[2], 35
SRP2[], 8
IP[], 6
MDAP[R], 6
SHP[1], 3
SHP[1], 12
SRP1[], 12
SHP[1], 40
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni044F">
/* TT glyph 675, char 0x44f */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 14
CALL[], 8, 6, 114
SHP[2], 12
SRP1[], 0
IP[], 16
MDAP[R], 16
SHP[1], 1
SHP[1], 18
SHP[2], 24
SRP1[], 24
SHP[1], 20
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0450">
/* VTTTalk Unicode 0x450 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 634, 0, 0
OFFSET[R], 973, 116, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 54

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0451">
/* VTTTalk Unicode 0x451 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 634, 0, 0
OFFSET[R], 971, 157, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 51
MDRP[m&gt;RWh], 55

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0452">
/* TT glyph 676, char 0x452 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 5, 0, 114
MDAP[R], 12
SHP[1], 22
IP[], 38
MDAP[R], 38
SHP[1], 31
MDRP[m&gt;RGr], 1
SHP[2], 10
SHP[2], 4
SRP1[], 4
SHP[1], 7
SRP1[], 38
SHP[1], 35
SRP1[], 35
SHP[1], 34
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0453">
/* VTTTalk Unicode 0x453 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 630, 0, 0
OFFSET[R], 974, 147, 0

SVTCA[Y]
MDAP[R], 21
MDRP[m&gt;RWh], 41

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni0453.loclMKD">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 757, 0, 0
OFFSET[R], 974, 34, 146



SVTCA[Y]
MDAP[R], 5
MDRP[m&gt;RWh], 13

MDAP[R], 13

SMD[], 128


MDRP[m&gt;RWh], 17

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni0454">
/* TT glyph 668, char 0x454 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 25
CALL[], 10, 7, 114
SHP[2], 17
SRP1[], 0
IP[], 33
MDAP[R], 33
SHP[1], 34
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0455">
/* VTTTalk Unicode 0x455 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 394, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0456">
/* VTTTalk Unicode 0x456 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 307, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0457">
/* VTTTalk Unicode 0x457 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 971, -33, 0



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4
MDRP[m&gt;RWh], 8

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni0458">
/* VTTTalk Unicode 0x458 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 323, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0459">
/* TT glyph 665, char 0x459 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 20
CALL[], 11, 10, 114
CALL[], 14, 6, 114
SHP[2], 5
SRP1[], 0
IP[], 33
MDAP[R], 33
SHP[1], 26
SHP[1], 30
SRP1[], 30
SHP[1], 29
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni045A">
/* TT glyph 666, char 0x45a */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 19
CALL[], 8, 10, 114
CALL[], 9, 6, 114
SHP[2], 14
SRP1[], 0
IP[], 11
IP[], 27
MDAP[R], 11
MDAP[R], 27
SRP1[], 11
SHP[1], 6
SRP1[], 27
SHP[1], 26
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni045B">
/* TT glyph 673, char 0x45b */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 27
CALL[], 5, 0, 114
SRP1[], 0
IP[], 23
MDAP[R], 23
SHP[1], 16
MDRP[m&gt;RWh], 10
SHP[2], 1
SHP[2], 7
SRP1[], 7
SHP[1], 4
SRP1[], 23
SHP[1], 20
SRP1[], 20
SHP[1], 19
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni045C">
/* VTTTalk Unicode 0x45c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 643, 0, 0
OFFSET[R], 974, 145, 0


SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 17

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni045D">
/* VTTTalk Unicode 0x45d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 639, 0, 0
OFFSET[R], 973, 102, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 41

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni045E">
/* VTTTalk Unicode 0x45e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 653, 0, 0
OFFSET[R], 1019, 64, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 27

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni045F">
/* VTTTalk Unicode 0x45f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 420, 0, 0


SVTCA[Y]
CALL[], 39, 0, 1, 1, -50, 86
SHC[2], 1





    </glyphProgram>

    <glyphProgram name="uni0462">
/* TT glyph 556, char 0x462 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 9, 8, 114
SHP[2], 27
CALL[], 14, 2, 114
SRP1[], 9
IP[], 16
IP[], 20
MDAP[R], 16
MDAP[R], 20
SRP1[], 16
SHP[1], 12
SHP[1], 19
SRP1[], 19
SHP[1], 11
SRP1[], 20
SHP[1], 26
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0463">
/* TT glyph 677, char 0x463 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 34
CALL[], 13, 10, 114
CALL[], 14, 6, 114
CALL[], 19, 7, 114
SHP[2], 8
SRP2[], 13
IP[], 11
IP[], 16
SRP2[], 0
IP[], 26
MDAP[R], 26
SHP[1], 40
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni046A">
/* TT glyph 557, char 0x46a */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 10
SHP[2], 14
CALL[], 2, 2, 114
SHP[2], 7
SRP1[], 7
SHP[1], 20
SRP1[], 0
IP[], 16
SRP1[], 16
SHP[1], 1
SHP[1], 4
SHP[1], 8
SHP[1], 12
SHP[2], 19
SRP1[], 19
SHP[1], 18
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni046B">
/* TT glyph 678, char 0x46b */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 6
SHP[2], 10
CALL[], 2, 6, 114
SHP[2], 17
SRP1[], 0
IP[], 12
MDAP[R], 12
SHP[1], 1
SHP[1], 4
SHP[1], 8
SHP[1], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0472">
/* VTTTalk Unicode 0x472 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 602, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0473">
/* VTTTalk Unicode 0x473 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 723, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0474">
/* TT glyph 559, char 0x474 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
SRP2[], 0
IP[], 3
SHP[1], 8
SRP1[], 8
SHP[1], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0475">
/* TT glyph 680, char 0x475 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
SRP2[], 0
IP[], 3
SHP[1], 12
MDAP[R], 12
SHP[1], 13
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni048A">
/* VTTTalk Unicode 0x48a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 519, 0, 0
OFFSET[R], 1024, 523, 0



SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 10

IUP[Y]
IUP[X]

SVTCA[Y]
CALL[], 28, 7, 0, 0, 0, 86
SHC[2], 2




    </glyphProgram>

    <glyphProgram name="uni048B">
/* VTTTalk Unicode 0x48b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 639, 0, 0
OFFSET[R], 1019, 83, 0
OFFSET[R], 1022, 395, 0


SVTCA[Y]

CALL[], 57, 0, 0, 0, 0, 86
SHC[2], 2


SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 38


IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni048C">
/* TT glyph 618, char 0x48c */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 8, 114
SHP[2], 17
CALL[], 5, 2, 114
SRP1[], 4
IP[], 7
MDAP[R], 7
SHP[1], 27
MDRP[m&gt;RGr], 0
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni048D">
/* TT glyph 739, char 0x48d */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 4, 10
SHP[1], 16
CALL[], 5, 0, 114
SRP1[], 4
IP[], 7
MDAP[R], 7
SHP[1], 26
MDRP[m&gt;RGr], 0
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni048E">
/* TT glyph 619, char 0x48e */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
SHP[2], 28
CALL[], 17, 8, 114
SRP2[], 4
IP[], 15
MDAP[R], 15
SHP[1], 3
MDAP[R], 3
SHP[1], 2
SRP1[], 15
SHP[1], 29
SRP1[], 29
SHP[1], 1
MDAP[R], 1
SHP[1], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni048E.1">
/* TT glyph 1062, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
SHP[2], 28
MIAP[R], 17, 8
IP[], 15
MDAP[R], 15
SHP[1], 3
SRP1[], 3
SHP[1], 2
SRP1[], 15
SHP[1], 29
SRP1[], 29
SHP[1], 1
SRP1[], 1
SHP[1], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni048F">
/* TT glyph 740, char 0x48f */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 4, 6, 114
CALL[], 9, 7, 114
SHP[2], 33
CALL[], 18, 11, 114
SHP[2], 3
SRP1[], 3
SHP[1], 2
SRP1[], 9
SLOOP[], 4
IP[], 21, 39, 38, 6
SHP[2], 24
SRP1[], 24
SHP[1], 1
SRP1[], 1
SHP[1], 0
CALL[], 23, 14, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0490">
/* TT glyph 511, char 0x490 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
MDRP[m&gt;RWh], 3
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0491">
/* TT glyph 632, char 0x491 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 7
CALL[], 11, 6, 114
MDRP[m&gt;RWh], 13
SHP[1], 16
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0492">
/* TT glyph 560, char 0x492 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 8, 114
CALL[], 5, 2, 114
SHP[2], 8
SRP1[], 4
IP[], 0
MDAP[R], 0
SHP[1], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0492.loclBSH">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0493">
/* TT glyph 681, char 0x493 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
SHP[2], 4
SRP1[], 0
IP[], 6
MDAP[R], 6
SHP[1], 7
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0493.loclBSH">
/* TT glyph 751, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 1, 6, 114
SHP[2], 4
SRP1[], 0
IP[], 6
MDAP[R], 6
SHP[1], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0494">
/* TT glyph 561, char 0x494 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 7
CALL[], 28, 8, 114
CALL[], 29, 2, 114
SHP[2], 32
SRP1[], 0
IP[], 21
MDAP[R], 21
SHP[1], 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0495">
/* TT glyph 682, char 0x495 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
SHP[2], 4
MDAP[R], 6
SHP[1], 13
SRP2[], 4
IP[], 28
MDAP[R], 28
SHP[1], 21
SHP[1], 25
SRP1[], 25
SHP[1], 24
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0496">
/* TT glyph 562, char 0x496 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 6, 8
SHP[1], 24
SRP1[], 24
SHP[1], 19
SRP0[], 19
MDRP[m&gt;RWh], 0
SHP[1], 3
MIAP[R], 8, 2
SHP[1], 12
SRP1[], 12
SHP[1], 16
SRP1[], 6
SRP2[], 8
IP[], 26
SRP1[], 26
SHP[1], 7
SHP[1], 18
SHP[1], 22
SHP[1], 10
SRP1[], 10
SHP[1], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0497">
/* TT glyph 683, char 0x497 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 6, 10, 114
SHP[2], 31
SHP[2], 2
SRP1[], 2
SHP[1], 3
SHP[1], 26
SRP0[], 2
MDRP[m&gt;RWh], 0
CALL[], 10, 6, 114
SHP[2], 15
SHP[2], 22
SRP1[], 0
IP[], 13
MDAP[R], 13
SHP[1], 16
SHP[1], 33
SRP1[], 33
SHP[1], 9
SHP[1], 25
SHP[1], 29
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0498">
/* TT glyph 563, char 0x498 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 9, 114
SHP[2], 1
SHP[2], 11
MDRP[m&gt;RWh], 0
CALL[], 36, 3, 114
SHP[2], 29
SRP1[], 0
IP[], 20
MDAP[R], 20
SHP[1], 19
SRP1[], 19
SHP[1], 43
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0498.loclBSH">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 563, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0499">
/* TT glyph 684, char 0x499 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 11, 114
SHP[2], 11
MDRP[m&gt;RGr], 0
SHP[1], 2
SRP1[], 2
SHP[1], 1
CALL[], 34, 7, 114
SHP[2], 27
SRP1[], 4
IP[], 19
MDAP[R], 19
SHP[1], 18
SHP[1], 41
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0499.loclBSH">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 684, 0, 0


    </glyphProgram>

    <glyphProgram name="uni049A">
/* TT glyph 564, char 0x49a */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 6, 8, 114
SHP[2], 15
MDRP[m&gt;RWh], 0
SHP[1], 2
SRP1[], 2
SHP[1], 3
CALL[], 7, 2, 114
SHP[2], 12
SRP1[], 0
IP[], 9
MDAP[R], 9
SHP[1], 13
SHP[1], 17
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni049B">
/* TT glyph 685, char 0x49b */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 6, 10, 114
SHP[2], 2
SRP1[], 2
SHP[1], 3
SHP[1], 18
SRP0[], 2
MDRP[m&gt;RWh], 0
CALL[], 7, 6, 114
SHP[2], 14
SRP1[], 0
IP[], 9
MDAP[R], 9
SHP[1], 21
SRP1[], 21
SHP[1], 17
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni049C">
/* TT glyph 565, char 0x49c */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 9
CALL[], 1, 2, 114
SHP[2], 6
SRP1[], 0
IP[], 11
MDAP[R], 11
SHP[1], 7
SHP[1], 13
MDAP[R], 13
SRP1[], 11
SHP[1], 3
SRP1[], 3
SHP[1], 14
RUTG[]
MDAP[R], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni049D">
/* TT glyph 686, char 0x49d */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 13
CALL[], 1, 6, 114
SHP[2], 8
SRP1[], 0
IP[], 15
MDAP[R], 15
SHP[1], 11
MDRP[m&gt;RWh], 17
SHP[1], 3
SRP0[], 3
MDRP[m&gt;RWh], 18
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni049E">
/* VTTTalk Unicode 0x49e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 995, 35, 329
OFFSET[R], 522, 7, 0


    </glyphProgram>

    <glyphProgram name="uni049F">
/* TT glyph 687, char 0x49f */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 13
CALL[], 1, 0, 114
SRP1[], 0
IP[], 18
IP[], 15
MDAP[R], 18
MDAP[R], 15
SRP1[], 18
SHP[1], 17
SRP1[], 15
SHP[1], 3
SHP[1], 11
CALL[], 8, 6, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04A0">
/* TT glyph 567, char 0x4a0 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
SHP[2], 0
SHP[2], 6
SHP[2], 10
CALL[], 4, 8, 114
SHP[2], 13
SRP2[], 1
IP[], 15
MDAP[R], 15
SHP[1], 7
SHP[1], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04A1">
/* TT glyph 688, char 0x4a1 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 1, 6, 114
SHP[2], 0
SHP[2], 6
SHP[2], 12
CALL[], 4, 10, 114
SHP[2], 17
SRP2[], 1
IP[], 19
MDAP[R], 19
SHP[1], 7
SHP[1], 15
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04A2">
/* VTTTalk Unicode 0x4a2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 526, 0, 0
OFFSET[R], 1027, 575, 0

SVTCA[Y]

CALL[], 14, 7, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04A3">
/* VTTTalk Unicode 0x4a3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 647, 0, 0
OFFSET[R], 1025, 460, 0

SVTCA[Y]

CALL[], 14, 8, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni04A4">
/* TT glyph 760, char 0x4a4 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
SHP[2], 9
SHP[2], 1
SRP1[], 1
SHP[1], 0
CALL[], 15, 8, 114
SHP[2], 11
SRP2[], 4
IP[], 13
MDAP[R], 13
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04A5">
/* TT glyph 761, char 0x4a5 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 4, 10, 114
SHP[2], 12
CALL[], 5, 6, 114
SHP[2], 10
SHP[2], 1
SRP1[], 1
SHP[1], 0
SRP1[], 4
IP[], 14
MDAP[R], 14
SHP[1], 7
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04A6">
/* TT glyph 569, char 0x4a6 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 4
CALL[], 1, 2, 114
SHP[2], 6
MDAP[R], 8
SHP[1], 14
IP[], 27
MDAP[R], 27
SHP[1], 20
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04A7">
/* TT glyph 691, char 0x4a7 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 7
CALL[], 24, 10, 114
SHP[2], 20
CALL[], 25, 6, 114
SHP[2], 22
SRP1[], 0
IP[], 30
MDAP[R], 30
SHP[1], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04A8">
/* TT glyph 571, char 0x4a8 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 3, 9, 114
SHP[2], 52
CALL[], 9, 9, 114
SHP[2], 29
SHP[2], 6
SRP1[], 6
SHP[1], 32
SHP[1], 49
SHP[1], 64
CALL[], 19, 3, 114
SHP[2], 20
CALL[], 40, 3, 114
SHP[2], 56
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04A9">
/* TT glyph 692, char 0x4a9 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 3, 11, 114
SHP[2], 47
CALL[], 9, 11, 114
SHP[2], 27
SRP1[], 27
SHP[1], 30
SRP1[], 30
SHP[1], 6
SHP[1], 44
SHP[1], 59
CALL[], 37, 7, 114
SHP[2], 51
SHP[2], 18
SRP1[], 18
SHP[1], 19
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04AA">
/* TT glyph 572, char 0x4aa */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 11, 3, 114
SHP[2], 19
CALL[], 38, 9, 114
SHP[2], 1
SHP[2], 29
MDRP[m&gt;RBl], 39
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04AA.loclBSH">
/* TT glyph 625, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 11, 3, 114
SHP[2], 19
CALL[], 38, 9, 114
SHP[2], 1
SHP[2], 29
MDRP[m&gt;RBl], 39
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04AA.loclCHU">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 32, 0, 0



    </glyphProgram>

    <glyphProgram name="uni04AB">
/* TT glyph 693, char 0x4ab */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 10, 7, 114
SHP[2], 17
CALL[], 35, 11, 114
SHP[2], 1
SHP[2], 26
MDRP[m&gt;RBl], 36
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04AB.loclBSH">
/* TT glyph 753, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 10, 7, 114
SHP[2], 17
CALL[], 35, 11, 114
SHP[2], 1
SHP[2], 26
MDRP[m&gt;RBl], 36
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04AB.loclCHU">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 260, 0, 0


    </glyphProgram>

    <glyphProgram name="uni04AC">
/* VTTTalk Unicode 0x4ac */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 531, 0, 0
OFFSET[R], 1027, 264, 0

SVTCA[Y]

CALL[], 10, 7, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04AD">
/* VTTTalk Unicode 0x4ad */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 652, 0, 0
OFFSET[R], 1025, 762, 0

SVTCA[Y]

CALL[], 49, 22, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni04B2">
/* TT glyph 576, char 0x4b2 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 7, 2, 114
SHP[2], 11
CALL[], 17, 8, 114
SHP[2], 2
SRP1[], 2
SHP[1], 3
SHP[1], 14
SRP0[], 14
MDRP[m&gt;RWh], 0
SRP1[], 17
SRP2[], 7
SLOOP[], 4
IP[], 15, 12, 6, 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04B3">
/* TT glyph 697, char 0x4b3 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 7, 6, 114
SHP[2], 13
MIAP[R], 16, 18
MDRP[m&gt;RWh], 0
CALL[], 21, 10, 114
SHP[2], 2
SRP1[], 2
SHP[1], 3
SHP[1], 15
SRP1[], 7
SLOOP[], 4
IP[], 18, 6, 14, 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04B4">
/* TT glyph 762, char 0x4b4 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 8, 8
MDRP[m&gt;RWh], 6
SHP[1], 11
SRP1[], 11
SHP[1], 15
CALL[], 9, 2, 114
SHP[2], 4
SHP[2], 10
SHP[2], 13
MDAP[R], 13
SHP[2], 3
SRP1[], 3
SHP[1], 2
SRP1[], 2
SHP[1], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04B5">
/* TT glyph 763, char 0x4b5 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 8, 10
MDRP[m&gt;RWh], 6
SHP[1], 11
SRP1[], 11
SHP[1], 15
CALL[], 9, 6, 114
SHP[2], 10
SHP[2], 13
MDAP[R], 13
SHP[2], 0
SRP1[], 0
SHP[1], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04B6">
/* VTTTalk Unicode 0x4b6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 536, 0, 0
OFFSET[R], 1027, 521, 0

SVTCA[Y]

CALL[], 24, 3, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni04B7">
/* VTTTalk Unicode 0x4b7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 657, 0, 0
OFFSET[R], 1025, 388, 0

SVTCA[Y]

CALL[], 22, 0, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni04B8">
/* VTTTalk Unicode 0x4b8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 536, 0, 0
OFFSET[R], 1028, 201, -8


    </glyphProgram>

    <glyphProgram name="uni04B9">
/* TT glyph 699, char 0x4b9 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 8, 6, 114
SHP[2], 18
SRP2[], 0
IP[], 4
MDAP[R], 4
SHP[1], 20
MDAP[R], 20
SRP1[], 4
SHP[1], 13
SRP1[], 13
SHP[1], 21
MDAP[R], 21
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04BA">
/* TT glyph 579, char 0x4ba */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 1, 8, 114
SHP[2], 12
CALL[], 2, 2, 114
SRP1[], 1
IP[], 7
MDAP[R], 7
SRP2[], 1
IP[], 4
IP[], 20
SHP[1], 16
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04BB">
/* VTTTalk Unicode 0x4bb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 302, 0, 0



    </glyphProgram>

    <glyphProgram name="uni04BC">
/* TT glyph 581, char 0x4bc */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 30
CALL[], 10, 3, 114
SHP[2], 20
SRP1[], 0
IP[], 54
MDAP[R], 54
SHP[1], 53
SHP[1], 55
SRP1[], 53
SHP[1], 56
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04BD">
/* TT glyph 702, char 0x4bd */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 16, 11, 114
SHP[2], 56
CALL[], 25, 7, 114
SHP[2], 47
SRP1[], 16
IP[], 32
MDAP[R], 32
SHP[1], 39
SHP[1], 9
SRP1[], 9
SHP[1], 8
SRP1[], 8
SHP[1], 7
SRP1[], 9
SHP[1], 10
SRP1[], 10
SHP[1], 35
SRP1[], 8
SHP[1], 36
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04BE">
/* TT glyph 582, char 0x4be */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 9, 114
SHP[2], 2
MDRP[m&gt;RWh], 3
SHP[1], 34
CALL[], 14, 3, 114
SHP[2], 24
SRP2[], 4
IP[], 58
SRP1[], 58
SHP[1], 59
SHP[1], 57
SRP1[], 57
SHP[1], 56
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04BF">
/* TT glyph 703, char 0x4bf */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 20, 11, 114
MDRP[m&gt;RWh], 3
SHP[1], 60
SRP1[], 60
SHP[1], 1
CALL[], 29, 7, 114
SHP[2], 51
SRP2[], 20
IP[], 36
MDAP[R], 36
SHP[1], 39
SHP[1], 43
SRP1[], 43
SHP[1], 40
SRP1[], 36
SHP[1], 13
SRP1[], 43
SHP[1], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04C0">
/* VTTTalk Unicode 0x4c0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0


    </glyphProgram>

    <glyphProgram name="uni04C1">
/* VTTTalk Unicode 0x4c1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 516, 0, 0
OFFSET[R], 1020, 252, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 22

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni04C2">
/* VTTTalk Unicode 0x4c2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 637, 0, 0
OFFSET[R], 1019, 182, 0

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 32

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni04C3">
/* TT glyph 585, char 0x4c3 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 6
CALL[], 17, 8, 114
CALL[], 18, 2, 114
SHP[2], 26
SRP1[], 0
IP[], 20
MDAP[R], 20
SHP[1], 15
SHP[1], 27
SRP1[], 27
SHP[1], 24
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04C4">
/* TT glyph 706, char 0x4c4 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 8
SHP[1], 14
CALL[], 25, 10, 114
CALL[], 26, 6, 114
SHP[2], 34
SRP1[], 8
IP[], 28
MDAP[R], 28
SHP[1], 23
SRP1[], 23
SHP[1], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04C5">
/* VTTTalk Unicode 0x4c5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 524, 0, 0
OFFSET[R], 1024, 536, 0

SVTCA[Y]

CALL[], 21, 10, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni04C6">
/* VTTTalk Unicode 0x4c6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 645, 0, 0
OFFSET[R], 1022, 391, 0



SVTCA[Y]

CALL[], 16, 6, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni04C7">
/* VTTTalk Unicode 0x4c7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 526, 0, 0
OFFSET[R], 1023, 340, 0

    </glyphProgram>

    <glyphProgram name="uni04C8">
/* VTTTalk Unicode 0x4c8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 647, 0, 0
OFFSET[R], 1021, 247, 0

    </glyphProgram>

    <glyphProgram name="uni04C9">
/* VTTTalk Unicode 0x4c9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 526, 0, 0
OFFSET[R], 1024, 505, 0

SVTCA[Y]

CALL[], 15, 7, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04CA">
/* VTTTalk Unicode 0x4ca */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 647, 0, 0
OFFSET[R], 1022, 390, 0




SVTCA[Y]

CALL[], 15, 8, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni04CB">
/* TT glyph 589, char 0x4cb */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 9, 8, 114
MDRP[m&gt;RGr], 0
SHP[1], 4
SRP1[], 4
SHP[1], 1
CALL[], 18, 2, 114
SHP[2], 7
SRP2[], 9
IP[], 13
MDAP[R], 13
SHP[1], 23
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04CC">
/* TT glyph 710, char 0x4cc */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 6, 10, 114
MDRP[m&gt;RGr], 0
SHP[1], 4
SRP1[], 4
SHP[1], 1
CALL[], 14, 6, 114
SHP[2], 24
SRP1[], 6
IP[], 10
MDAP[R], 10
SHP[1], 19
SRP1[], 19
SHP[1], 7
SRP1[], 7
SHP[1], 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04CD">
/* VTTTalk Unicode 0x4cd */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 525, 0, 0
OFFSET[R], 1024, 650, 0


SVTCA[Y]

CALL[], 16, 6, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni04CE">
/* VTTTalk Unicode 0x4ce */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 646, 0, 0
OFFSET[R], 1022, 489, 0





SVTCA[Y]

CALL[], 16, 7, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="uni04CF">
/* VTTTalk Unicode 0x4cf */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0



    </glyphProgram>

    <glyphProgram name="uni04D0">
/* VTTTalk Unicode 0x4d0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 506, 0, 0
OFFSET[R], 1020, 126, 0

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 11

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni04D1">
/* VTTTalk Unicode 0x4d1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 627, 0, 0
OFFSET[R], 1019, 114, 0


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 53

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="uni04D2">
/* VTTTalk Unicode 0x4d2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 506, 0, 0
OFFSET[R], 971, 243, 191

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 11
MDRP[m&gt;RWh], 15

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni04D3">
/* VTTTalk Unicode 0x4d3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 627, 0, 0
OFFSET[R], 971, 174, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 53
MDRP[m&gt;RWh], 57

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="uni04D4">
/* VTTTalk Unicode 0x4d4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 26, 0, 0


    </glyphProgram>

    <glyphProgram name="uni04D5">
/* VTTTalk Unicode 0x4d5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 254, 0, 0



    </glyphProgram>

    <glyphProgram name="uni04D6">
/* VTTTalk Unicode 0x4d6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 513, 0, 0
OFFSET[R], 1020, 102, 0

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 12

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni04D7">
/* VTTTalk Unicode 0x4d7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 634, 0, 0
OFFSET[R], 1019, 97, 0


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 51

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni04D8">
/* VTTTalk Unicode 0x4d8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 174, 0, 0



    </glyphProgram>

    <glyphProgram name="uni04D9">
/* VTTTalk Unicode 0x4d9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 293, 28, 0



    </glyphProgram>

    <glyphProgram name="uni04DA">
/* VTTTalk Unicode 0x4da */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 594, 0, 0
OFFSET[R], 971, 258, 191

SVTCA[Y]
MDAP[R], 25
MDRP[m&gt;RWh], 50
MDRP[m&gt;RWh], 54

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04DB">
/* VTTTalk Unicode 0x4db */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 715, 0, 0
OFFSET[R], 971, 138, 0


SVTCA[Y]
MDAP[R], 24
MDRP[m&gt;RWh], 44
MDRP[m&gt;RWh], 48

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni04DC">
/* VTTTalk Unicode 0x4dc */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 516, 0, 0
OFFSET[R], 971, 369, 191

SVTCA[Y]
MDAP[R], 2
MDRP[m&gt;RWh], 22
MDRP[m&gt;RWh], 26

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04DD">
/* VTTTalk Unicode 0x4dd */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 637, 0, 0
OFFSET[R], 971, 242, 0

SVTCA[Y]
MDAP[R], 4
MDRP[m&gt;RWh], 32
MDRP[m&gt;RWh], 36

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04DE">
/* VTTTalk Unicode 0x4de */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 517, 0, 0
OFFSET[R], 971, 156, 191

SVTCA[Y]
MDAP[R], 32
MDRP[m&gt;RWh], 46
MDRP[m&gt;RWh], 50

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni04DF">
/* VTTTalk Unicode 0x4df */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 638, 0, 0
OFFSET[R], 971, 99, 0

SVTCA[Y]
MDAP[R], 30
MDRP[m&gt;RWh], 44
MDRP[m&gt;RWh], 48

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04E0">
/* TT glyph 598, char 0x4e0 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 9, 9, 114
SHP[2], 16
CALL[], 29, 2, 114
SHP[2], 28
SHP[2], 31
SRP1[], 9
IP[], 25
MDAP[R], 25
SHP[1], 24
SHP[1], 32
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04E1">
/* TT glyph 719, char 0x4e1 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 15, 114
SHP[2], 7
CALL[], 19, 6, 114
SHP[2], 18
SRP1[], 18
SHP[1], 21
SRP1[], 0
IP[], 22
MDAP[R], 22
SHP[1], 15
SHP[1], 16
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04E2">
/* VTTTalk Unicode 0x4e2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 518, 0, 0
OFFSET[R], 982, 208, 191

SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 10

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04E3">
/* VTTTalk Unicode 0x4e3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 639, 0, 0
OFFSET[R], 982, 76, 0


SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 38

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04E4">
/* VTTTalk Unicode 0x4e4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 518, 0, 0
OFFSET[R], 971, 275, 191

SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 10
MDRP[m&gt;RWh], 14

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04E5">
/* VTTTalk Unicode 0x4e5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 639, 0, 0
OFFSET[R], 971, 143, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 38
MDRP[m&gt;RWh], 42

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni04E6">
/* VTTTalk Unicode 0x4e6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 527, 0, 0
OFFSET[R], 971, 292, 191

SVTCA[Y]
MDAP[R], 10
MDRP[m&gt;RWh], 40
MDRP[m&gt;RWh], 44

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni04E7">
/* VTTTalk Unicode 0x4e7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 648, 0, 0
OFFSET[R], 971, 175, 0


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36
MDRP[m&gt;RWh], 40

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni04E8">
/* TT glyph 602, char 0x4e8 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 4, 9, 114
SHP[2], 24
CALL[], 14, 3, 114
SHP[2], 34
SRP1[], 4
IP[], 0
MDAP[R], 0
SHP[1], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04E9">
/* TT glyph 723, char 0x4e9 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 4, 11, 114
SHP[2], 22
CALL[], 13, 7, 114
SHP[2], 31
SRP1[], 4
IP[], 0
MDAP[R], 0
SHP[1], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04EA">
/* VTTTalk Unicode 0x4ea */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 602, 0, 0
OFFSET[R], 971, 292, 191

SVTCA[Y]
MDAP[R], 14
MDRP[m&gt;RWh], 44
MDRP[m&gt;RWh], 48

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni04EB">
/* VTTTalk Unicode 0x4eb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 723, 0, 0
OFFSET[R], 971, 163, 0


SVTCA[Y]
MDAP[R], 13
MDRP[m&gt;RWh], 40
MDRP[m&gt;RWh], 44

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04EC">
/* VTTTalk Unicode 0x4ec */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 548, 0, 0
OFFSET[R], 971, 203, 191

SVTCA[Y]
MDAP[R], 25
MDRP[m&gt;RWh], 39
MDRP[m&gt;RWh], 43

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04ED">
/* VTTTalk Unicode 0x4ed */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 669, 0, 0
OFFSET[R], 971, 100, 0


SVTCA[Y]
MDAP[R], 24
MDRP[m&gt;RWh], 38
MDRP[m&gt;RWh], 42

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni04EE">
/* VTTTalk Unicode 0x4ee */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 532, 0, 0
OFFSET[R], 982, 168, 191

SVTCA[Y]
MDAP[R], 7
MDRP[m&gt;RWh], 17

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04EF">
/* VTTTalk Unicode 0x4ef */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 653, 0, 0
OFFSET[R], 982, 57, 0



SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 27

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni04F0">
/* VTTTalk Unicode 0x4f0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 532, 0, 0
OFFSET[R], 971, 235, 191

SVTCA[Y]
MDAP[R], 7
MDRP[m&gt;RWh], 17
MDRP[m&gt;RWh], 21

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04F1">
/* VTTTalk Unicode 0x4f1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 653, 0, 0
OFFSET[R], 971, 124, 0


SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 27
MDRP[m&gt;RWh], 31

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni04F2">
/* VTTTalk Unicode 0x4f2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 532, 0, 0
OFFSET[R], 975, 222, 191

SVTCA[Y]
MDAP[R], 7
MDRP[m&gt;RWh], 17
MDRP[m&gt;RWh], 21

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04F3">
/* VTTTalk Unicode 0x4f3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 653, 0, 0
OFFSET[R], 975, 111, 0



SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 27
MDRP[m&gt;RWh], 31

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni04F4">
/* VTTTalk Unicode 0x4f4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 536, 0, 0
OFFSET[R], 971, 239, 191

SVTCA[Y]
MDAP[R], 12
MDRP[m&gt;RWh], 22
MDRP[m&gt;RWh], 26

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni04F5">
/* VTTTalk Unicode 0x4f5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 657, 0, 0
OFFSET[R], 971, 129, 0



SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 20
MDRP[m&gt;RWh], 24

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni04F6">
/* VTTTalk Unicode 0x4f6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 509, 0, 0
OFFSET[R], 1027, 89, 0

SVTCA[Y]

CALL[], 8, 0, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04F7">
/* TT glyph 730, char 0x4f7 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 4, 11, 114
MDRP[m&gt;RWh], 0
SHP[1], 38
SRP1[], 38
SHP[1], 1
SRP1[], 1
SHP[1], 2
CALL[], 25, 7, 114
SHP[2], 18
SRP2[], 4
SLOOP[], 6
IP[], 35, 8, 31, 11, 28, 15
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04F8">
/* VTTTalk Unicode 0x4f8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 543, 0, 0
OFFSET[R], 971, 278, 191

SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 28
MDRP[m&gt;RWh], 32

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04F9">
/* VTTTalk Unicode 0x4f9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 664, 0, 0
OFFSET[R], 971, 185, 0



SVTCA[Y]
MDAP[R], 7
MDRP[m&gt;RWh], 36
MDRP[m&gt;RWh], 40

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni04FA">
/* TT glyph 611, char 0x4fa */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 11, 8
SHP[1], 12
SHP[1], 22
MIAP[R], 17, 8
SHP[1], 0
MDAP[R], 0
SHP[2], 7
MIAP[R], 18, 2
SHP[1], 21
SRP2[], 11
IP[], 23
MDAP[R], 23
SHP[1], 24
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04FB">
/* TT glyph 732, char 0x4fb */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 6
MIAP[R], 10, 10
SHP[1], 11
SHP[1], 16
CALL[], 17, 6, 114
SHP[2], 20
SRP1[], 0
IP[], 23
MDAP[R], 23
SHP[1], 22
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04FC">
/* TT glyph 612, char 0x4fc */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 5
MIAP[R], 15, 18
CALL[], 17, 2, 114
SHP[2], 21
SRP2[], 15
SLOOP[], 4
IP[], 13, 16, 22, 19
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04FD">
/* TT glyph 733, char 0x4fd */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 6
MIAP[R], 16, 18
CALL[], 19, 6, 114
SHP[2], 25
SRP2[], 16
SLOOP[], 4
IP[], 14, 26, 18, 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04FE">
/* TT glyph 613, char 0x4fe */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 5, 2, 114
SHP[2], 9
MDAP[R], 11
SHP[1], 15
IP[], 0
MDAP[R], 0
SLOOP[], 3
IP[], 7, 10, 4
SRP2[], 11
IP[], 13
SHP[1], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04FF">
/* TT glyph 734, char 0x4ff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 5, 6, 114
SHP[2], 11
MDAP[R], 13
SHP[1], 19
IP[], 0
MDAP[R], 0
SLOOP[], 4
IP[], 8, 12, 4, 16
SHP[1], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0510">
/* TT glyph 614, char 0x510 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 40
CALL[], 14, 3, 114
SHP[2], 22
SRP1[], 0
IP[], 30
MDAP[R], 30
SHP[1], 7
SHP[1], 33
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0511">
/* TT glyph 735, char 0x511 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 41
CALL[], 15, 7, 114
SHP[2], 24
SRP1[], 0
IP[], 31
MDAP[R], 31
SHP[1], 7
SHP[1], 34
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0512">
/* VTTTalk Unicode 0x512 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 524, 0, 0
OFFSET[R], 1023, 371, 0

    </glyphProgram>

    <glyphProgram name="uni0513">
/* TT glyph 736, char 0x513 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 6
MIAP[R], 18, 18
CALL[], 21, 6, 114
SHP[2], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni051A">
/* VTTTalk Unicode 0x51a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 153, 0, 0



    </glyphProgram>

    <glyphProgram name="uni051B">
/* VTTTalk Unicode 0x51b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 464, 0, 0



    </glyphProgram>

    <glyphProgram name="uni051C">
/* VTTTalk Unicode 0x51c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 206, 0, 0



    </glyphProgram>

    <glyphProgram name="uni051D">
/* VTTTalk Unicode 0x51d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 438, 0, 0



    </glyphProgram>

    <glyphProgram name="uni0524">
/* VTTTalk Unicode 0x524 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 528, -5, 0
OFFSET[R], 1027, 590, 0

SVTCA[Y]

CALL[], 10, 4, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni0525">
/* VTTTalk Unicode 0x525 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 649, 0, 0
OFFSET[R], 1025, 456, 0

SVTCA[Y]

CALL[], 10, 4, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni0526">
/* VTTTalk Unicode 0x526 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 579, -23, 0
OFFSET[R], 1027, 524, 0

SVTCA[Y]

CALL[], 23, 12, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni0527">
/* VTTTalk Unicode 0x527 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 700, -6, 0
OFFSET[R], 1025, 430, 0


SVTCA[Y]

CALL[], 30, 14, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="uni0528">
/* VTTTalk Unicode 0x528 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 526, -3, 0
OFFSET[R], 1023, -150, 0


    </glyphProgram>

    <glyphProgram name="uni0529">
/* VTTTalk Unicode 0x529 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 647, -13, 0
OFFSET[R], 1021, -146, 0

    </glyphProgram>

    <glyphProgram name="uni052E">
/* VTTTalk Unicode 0x52e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 524, -27, 0
OFFSET[R], 1027, 579, 0

SVTCA[Y]
CALL[], 20, 10, 0, 0, 0, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni052F">
/* VTTTalk Unicode 0x52f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 645, -40, 0
OFFSET[R], 1025, 421, 0




SVTCA[Y]

CALL[], 15, 6, 0, 0, 0, 86
SHC[2], 1

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1E08">
/* VTTTalk Unicode 0x1e08 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 29, 0, 0
OFFSET[R], 991, 177, 0
OFFSET[R], 974, 307, 191

SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 58
IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1E09">
/* VTTTalk Unicode 0x1e09 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 257, 0, 0
OFFSET[R], 991, 122, 0
OFFSET[R], 974, 209, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 55

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni1E0C">
/* VTTTalk Unicode 0x1e0c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 36, 0, 0
OFFSET[R], 988, 242, 0

SVTCA[Y]
CALL[], 25, 11, 1, 1, -60, 86
SHC[2], 2




    </glyphProgram>

    <glyphProgram name="uni1E0D">
/* VTTTalk Unicode 0x1e0d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 264, 0, 0
OFFSET[R], 988, 230, 0



SVTCA[Y]
CALL[], 54, 0, 1, 1, -50, 86
SHC[2], 2








    </glyphProgram>

    <glyphProgram name="uni1E0E">
/* VTTTalk Unicode 0x1e0e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 36, 0, 0
OFFSET[R], 994, 124, 0

SVTCA[Y]
CALL[], 25, 11, 1, 1, -75, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1E0F">
/* VTTTalk Unicode 0x1e0f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 264, 0, 0
OFFSET[R], 994, 112, 0



SVTCA[Y]
CALL[], 54, 0, 1, 1, -50, 86
SHC[2], 2






    </glyphProgram>

    <glyphProgram name="uni1E14">
/* VTTTalk Unicode 0x1e14 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 982, 152, 191
OFFSET[R], 973, 218, 378



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 12
MDAP[R], 12

SMD[], 128


MDRP[m&gt;RWh], 19

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni1E15">
/* VTTTalk Unicode 0x1e15 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 982, 81, 0
OFFSET[R], 973, 147, 187


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 48
MDAP[R], 48

SMD[], 128


MDRP[m&gt;RWh], 55

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni1E16">
/* VTTTalk Unicode 0x1e16 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 982, 152, 191
OFFSET[R], 974, 309, 378




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 12
MDAP[R], 12

SMD[], 128


MDRP[m&gt;RWh], 16

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1E17">
/* VTTTalk Unicode 0x1e17 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 982, 81, 0
OFFSET[R], 974, 238, 187


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 48
MDAP[R], 48

SMD[], 128


MDRP[m&gt;RWh], 52

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1E1C">
/* VTTTalk Unicode 0x1e1c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 991, 139, 0
OFFSET[R], 979, 215, 191

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 41
IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni1E1D">
/* VTTTalk Unicode 0x1e1d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 991, 137, 0
OFFSET[R], 979, 144, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 77

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni1E20">
/* VTTTalk Unicode 0x1e20 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 66, 0, 0
OFFSET[R], 982, 203, 188



SVTCA[Y]
MDAP[R], 10
MDRP[m&gt;RWh], 39

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1E21">
/* VTTTalk Unicode 0x1e21 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 295, 0, 0
OFFSET[R], 982, 96, 0



SVTCA[Y]
MDAP[R], 24
MDRP[m&gt;RWh], 53

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1E24">
/* VTTTalk Unicode 0x1e24 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 73, 0, 0
OFFSET[R], 988, 291, 0


    </glyphProgram>

    <glyphProgram name="uni1E25">
/* VTTTalk Unicode 0x1e25 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 302, 0, 0
OFFSET[R], 988, 210, 0



SVTCA[Y]
CALL[], 29, 27, 1, 1, -50, 86
SHC[2], 1







    </glyphProgram>

    <glyphProgram name="uni1E2A">
/* VTTTalk Unicode 0x1e2a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 73, 0, 0
OFFSET[R], 993, 240, 0


    </glyphProgram>

    <glyphProgram name="uni1E2B">
/* VTTTalk Unicode 0x1e2b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 302, 0, 0
OFFSET[R], 993, 159, 0


SVTCA[Y]
CALL[], 31, 27, 1, 1, -50, 86
SHC[2], 1






    </glyphProgram>

    <glyphProgram name="uni1E2E">
/* VTTTalk Unicode 0x1e2e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 971, 22, 188
OFFSET[R], 974, 117, 399



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4
MDRP[m&gt;RWh], 8

MDAP[R], 8

SMD[], 128

MDRP[m&gt;RWh], 12

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1E2F">
/* VTTTalk Unicode 0x1e2f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 971, -33, 0
OFFSET[R], 974, 62, 211



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 4
MDRP[m&gt;RWh], 8

MDAP[R], 8

SMD[], 128


MDRP[m&gt;RWh], 12

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni1E36">
/* VTTTalk Unicode 0x1e36 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 97, 0, 0
OFFSET[R], 988, 250, 0



SVTCA[Y]
CALL[], 7, 5, 1, 1, -50, 86
SHC[2], 1






    </glyphProgram>

    <glyphProgram name="uni1E37">
/* VTTTalk Unicode 0x1e37 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 329, 0, 0
OFFSET[R], 988, 82, 0

SVTCA[Y]
CALL[], 22, 0, 1, 1, -45, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni1E3A">
/* VTTTalk Unicode 0x1e3a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 97, 0, 0
OFFSET[R], 994, 132, 0



SVTCA[Y]
CALL[], 7, 5, 1, 1, -65, 86
SHC[2], 1






    </glyphProgram>

    <glyphProgram name="uni1E3B">
/* VTTTalk Unicode 0x1e3b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 329, 0, 0
OFFSET[R], 994, -36, 0

SVTCA[Y]
CALL[], 22, 0, 1, 1, -70, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E42">
/* VTTTalk Unicode 0x1e42 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 105, 0, 0
OFFSET[R], 988, 363, 0



SVTCA[Y]
CALL[], 14, 12, 1, 1, -60, 86
SHC[2], 1







    </glyphProgram>

    <glyphProgram name="uni1E43">
/* VTTTalk Unicode 0x1e43 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 337, 0, 0
OFFSET[R], 988, 373, 0


SVTCA[Y]
CALL[], 48, 46, 1, 1, -55, 86
SHC[2], 1




    </glyphProgram>

    <glyphProgram name="uni1E44">
/* VTTTalk Unicode 0x1e44 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 107, 0, 0
OFFSET[R], 972, 354, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 10

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1E45">
/* VTTTalk Unicode 0x1e45 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 339, 0, 0
OFFSET[R], 972, 213, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 29

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1E46">
/* VTTTalk Unicode 0x1e46 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 107, 0, 0
OFFSET[R], 988, 312, 0




SVTCA[Y]
CALL[], 11, 9, 1, 1, -60, 86
SHC[2], 1





    </glyphProgram>

    <glyphProgram name="uni1E47">
/* VTTTalk Unicode 0x1e47 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 339, 0, 0
OFFSET[R], 988, 212, 0

SVTCA[Y]
CALL[], 30, 28, 1, 1, -50, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni1E48">
/* VTTTalk Unicode 0x1e48 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 107, 0, 0
OFFSET[R], 994, 194, 0




SVTCA[Y]
CALL[], 11, 9, 1, 1, -65, 86
SHC[2], 1





    </glyphProgram>

    <glyphProgram name="uni1E49">
/* VTTTalk Unicode 0x1e49 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 339, 0, 0
OFFSET[R], 994, 94, 0

SVTCA[Y]
CALL[], 30, 28, 1, 1, -75, 86
SHC[2], 1




    </glyphProgram>

    <glyphProgram name="uni1E4C">
/* VTTTalk Unicode 0x1e4c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 981, 223, 188
OFFSET[R], 974, 384, 399


SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 40
MDAP[R], 40

SMD[], 128


MDRP[m&gt;RWh], 69

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1E4D">
/* VTTTalk Unicode 0x1e4d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 981, 89, 0
OFFSET[R], 974, 250, 211




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36

MDAP[R], 36

SMD[], 192


MDRP[m&gt;RWh], 65

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1E4E">
/* VTTTalk Unicode 0x1e4e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 981, 223, 188
OFFSET[R], 971, 334, 399



SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 40
MDAP[R], 40

SMD[], 128


MDRP[m&gt;RWh], 69
MDRP[m&gt;RWh], 73

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni1E4F">
/* VTTTalk Unicode 0x1e4f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 981, 89, 0
OFFSET[R], 971, 200, 211



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36
MDAP[R], 36

SMD[], 192


MDRP[m&gt;RWh], 65
MDRP[m&gt;RWh], 69

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1E50">
/* VTTTalk Unicode 0x1e50 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 982, 222, 188
OFFSET[R], 973, 288, 375


SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 40
MDAP[R], 40

SMD[], 128


MDRP[m&gt;RWh], 47

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni1E51">
/* VTTTalk Unicode 0x1e51 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 982, 88, 0
OFFSET[R], 973, 154, 187


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36

MDAP[R], 36

SMD[], 128


MDRP[m&gt;RWh], 43

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1E52">
/* VTTTalk Unicode 0x1e52 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 982, 222, 188
OFFSET[R], 974, 379, 375


SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 40
MDAP[R], 40

SMD[], 128


MDRP[m&gt;RWh], 44

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni1E53">
/* VTTTalk Unicode 0x1e53 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 982, 88, 0
OFFSET[R], 974, 245, 187


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 36

MDAP[R], 36

SMD[], 128


MDRP[m&gt;RWh], 40

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1E5A">
/* VTTTalk Unicode 0x1e5a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 154, 0, 0
OFFSET[R], 988, 242, 0


SVTCA[Y]
CALL[], 30, 0, 1, 1, -60, 86
SHC[2], 2





    </glyphProgram>

    <glyphProgram name="uni1E5B">
/* VTTTalk Unicode 0x1e5b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 386, 0, 0
OFFSET[R], 988, 26, 0


SVTCA[Y]
CALL[], 16, 14, 1, 1, -50, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni1E5E">
/* VTTTalk Unicode 0x1e5e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 154, 0, 0
OFFSET[R], 994, 124, 0


SVTCA[Y]
CALL[], 30, 0, 1, 1, -60, 86
SHC[2], 2





    </glyphProgram>

    <glyphProgram name="uni1E5F">
/* VTTTalk Unicode 0x1e5f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 386, 0, 0
OFFSET[R], 994, -92, 0



SVTCA[Y]
CALL[], 16, 14, 1, 1, -80, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni1E60">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 972, 277, 210



SVTCA[Y]
MDAP[R], 26
MDRP[m&gt;RWh], 53

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni1E61">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 394, 0, 0
OFFSET[R], 972, 163, 0




SVTCA[Y]
MDAP[R], 22
MDRP[m&gt;RWh], 44

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1E62">
/* VTTTalk Unicode 0x1e62 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 988, 234, 0


SVTCA[Y]
CALL[], 54, 0, 1, 1, -50, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni1E63">
/* VTTTalk Unicode 0x1e63 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 394, 0, 0
OFFSET[R], 988, 167, 0

SVTCA[Y]
CALL[], 45, 0, 1, 1, -40, 86
SHC[2], 1




    </glyphProgram>

    <glyphProgram name="uni1E64">
/* VTTTalk Unicode 0x1e64 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 974, 271, 210
OFFSET[R], 972, 277, 421



SVTCA[Y]
MDAP[R], 26
MDRP[m&gt;RWh], 53
MDAP[R], 53

SMD[], 128


MDRP[m&gt;RWh], 57

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1E65">
/* VTTTalk Unicode 0x1e65 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 394, 0, 0
OFFSET[R], 974, 157, 0
OFFSET[R], 972, 163, 211


SVTCA[Y]
MDAP[R], 22
MDRP[m&gt;RWh], 44
MDAP[R], 44

SMD[], 192


MDRP[m&gt;RWh], 48

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1E66">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 978, 184, 210
OFFSET[R], 972, 322, 421



SVTCA[Y]
MDAP[R], 26
MDRP[m&gt;RWh], 59
MDAP[R], 59

SMD[], 128


MDRP[m&gt;RWh], 60

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1E67">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 394, 0, 0
OFFSET[R], 978, 70, 0
OFFSET[R], 972, 208, 211


SVTCA[Y]
MDAP[R], 22
MDRP[m&gt;RWh], 50
MDAP[R], 50

SMD[], 192


MDRP[m&gt;RWh], 51

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1E68">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 988, 234, 0
OFFSET[R], 972, 277, 210

SVTCA[Y]


MDAP[R], 26
MDRP[m&gt;RWh], 57

IUP[Y]
IUP[X]



CALL[], 54, 0, 1, 1, -45, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni1E69">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 394, 0, 0
OFFSET[R], 988, 167, 0
OFFSET[R], 972, 163, 0

SVTCA[Y]
CALL[], 45, 0, 1, 1, -40, 86
SHC[2], 1



SVTCA[Y]
MDAP[R], 22
MDRP[m&gt;RWh], 48

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="uni1E6C">
/* VTTTalk Unicode 0x1e6c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 175, 0, 0
OFFSET[R], 988, 214, 0


SVTCA[Y]
CALL[], 9, 7, 1, 1, -50, 86
SHC[2], 1




    </glyphProgram>

    <glyphProgram name="uni1E6D">
/* VTTTalk Unicode 0x1e6d */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 406, 0, 0
OFFSET[R], 988, 113, 0

SVTCA[Y]
CALL[], 33, 29, 1, 1, -45, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni1E6E">
/* VTTTalk Unicode 0x1e6e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 175, 0, 0
OFFSET[R], 994, 96, 0

SVTCA[Y]
CALL[], 9, 7, 1, 1, -65, 86
SHC[2], 1




    </glyphProgram>

    <glyphProgram name="uni1E6F">
/* VTTTalk Unicode 0x1e6f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 406, 0, 0
OFFSET[R], 994, -5, 0

SVTCA[Y]
CALL[], 33, 29, 1, 1, -70, 86
SHC[2], 1




    </glyphProgram>

    <glyphProgram name="uni1E78">
/* VTTTalk Unicode 0x1e78 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 981, 208, 188
OFFSET[R], 974, 369, 399




SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 30
MDAP[R], 30

SMD[], 128


MDRP[m&gt;RWh], 59

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1E79">
/* VTTTalk Unicode 0x1e79 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 981, 94, 0
OFFSET[R], 974, 255, 211



SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 38
MDAP[R], 38

SMD[], 192


MDRP[m&gt;RWh], 67

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1E7A">
/* VTTTalk Unicode 0x1e7a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 982, 207, 188
OFFSET[R], 971, 314, 375



SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 30
MDAP[R], 30

SMD[], 128


MDRP[m&gt;RWh], 34
MDRP[m&gt;RWh], 38

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni1E7B">
/* VTTTalk Unicode 0x1e7b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 982, 93, 0
OFFSET[R], 971, 200, 187




SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 38
MDAP[R], 38

SMD[], 128


MDRP[m&gt;RWh], 42
MDRP[m&gt;RWh], 46

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1E8E">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 212, 0, 0
OFFSET[R], 972, 264, 188

SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 9

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni1E8F">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 444, 0, 0
OFFSET[R], 972, 177, 0


SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 27

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni1E92">
/* VTTTalk Unicode 0x1e92 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 222, 0, 0
OFFSET[R], 988, 234, 0

SVTCA[Y]
CALL[], 11, 9, 1, 1, -50, 86
SHC[2], 1




    </glyphProgram>

    <glyphProgram name="uni1E93">
/* VTTTalk Unicode 0x1e93 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 454, 0, 0
OFFSET[R], 988, 169, 0

SVTCA[Y]
CALL[], 11, 9, 1, 1, -60, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E97">
/* VTTTalk Unicode 0x1e97 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 406, 0, 0
OFFSET[R], 971, 24, 191




SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 32
MDRP[m&gt;RWh], 36

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1E9E">
/* TT glyph 173, char 0x1e9e */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 9
SHP[2], 7
SHP[2], 34
MDAP[R], 34
MIAP[R], 39, 3
SHP[1], 28
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni1EA0">
/* VTTTalk Unicode 0x1ea0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 988, 264, 0

    </glyphProgram>

    <glyphProgram name="uni1EA1">
/* VTTTalk Unicode 0x1ea1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 988, 230, 0

SVTCA[Y]
CALL[], 54, 0, 1, 1, -55, 86
SHC[2], 2




    </glyphProgram>

    <glyphProgram name="uni1EA2">
/* VTTTalk Unicode 0x1ea2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 983, 246, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 21

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1EA3">
/* VTTTalk Unicode 0x1ea3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 983, 176, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 63

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1EA4">
/* VTTTalk Unicode 0x1ea4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1033, 214, 191

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 17
MDAP[R], 17

SMD[], 64


MDRP[m&gt;RWh], 18

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1EA5">
/* VTTTalk Unicode 0x1ea5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 1033, 144, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 59
MDAP[R], 59

SMD[], 64


MDRP[m&gt;RWh], 60

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1EA6">
/* VTTTalk Unicode 0x1ea6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1034, 163, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 17
MDAP[R], 17

SMD[], 64


MDRP[m&gt;RWh], 21

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni1EA7">
/* VTTTalk Unicode 0x1ea7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 1034, 93, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 59
MDAP[R], 59

SMD[], 64


MDRP[m&gt;RWh], 63

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1EA8">
/* VTTTalk Unicode 0x1ea8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1035, 214, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 17
MDAP[R], 17

SMD[], 64


MDRP[m&gt;RWh], 28

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni1EA9">
/* VTTTalk Unicode 0x1ea9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 1035, 144, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 59
MDAP[R], 59

SMD[], 64


MDRP[m&gt;RWh], 70

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EAA">
/* VTTTalk Unicode 0x1eaa */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1036, 197, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 17
MDAP[R], 17

SMD[], 128


MDRP[m&gt;RWh], 18

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1EAB">
/* VTTTalk Unicode 0x1eab */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 1036, 127, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 59
MDAP[R], 59

SMD[], 64


MDRP[m&gt;RWh], 60

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EAC">
/* VTTTalk Unicode 0x1eac */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 988, 264, 0
OFFSET[R], 977, 216, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 21
IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1EAD">
/* VTTTalk Unicode 0x1ead */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 988, 230, 0
OFFSET[R], 977, 146, 0


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 61

IUP[Y]
IUP[X]

SVTCA[Y]
CALL[], 54, 0, 1, 1, -55, 86
SHC[2], 2




    </glyphProgram>

    <glyphProgram name="uni1EAE">
/* VTTTalk Unicode 0x1eae */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1029, 229, 191

SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 19


MDAP[R], 19

SMD[], 128

MDRP[m&gt;RWh], 32


IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1EAF">
/* VTTTalk Unicode 0x1eaf */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 1029, 159, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 61


MDAP[R], 61

SMD[], 128

MDRP[m&gt;RWh], 74


IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1EB0">
/* VTTTalk Unicode 0x1eb0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1030, 254, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 19
MDAP[R], 19

SMD[], 128


MDRP[m&gt;RWh], 35

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni1EB1">
/* VTTTalk Unicode 0x1eb1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 1030, 184, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 61


MDAP[R], 61

SMD[], 128

MDRP[m&gt;RWh], 77


IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1EB2">
/* VTTTalk Unicode 0x1eb2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1031, 240, 191


SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 19
MDAP[R], 19

SMD[], 128


MDRP[m&gt;RWh], 42

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1EB3">
/* VTTTalk Unicode 0x1eb3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 1031, 170, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 61


MDAP[R], 61

SMD[], 128

MDRP[m&gt;RWh], 84


IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1EB4">
/* VTTTalk Unicode 0x1eb4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1032, 217, 191


SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 19
MDAP[R], 19

SMD[], 128


MDRP[m&gt;RWh], 32

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EB5">
/* VTTTalk Unicode 0x1eb5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 1032, 147, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 61


MDAP[R], 61

SMD[], 128

MDRP[m&gt;RWh], 74


IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1EB6">
/* VTTTalk Unicode 0x1eb6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 988, 264, 0
OFFSET[R], 979, 240, 191




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 23
IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="uni1EB7">
/* VTTTalk Unicode 0x1eb7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 229, 0, 0
OFFSET[R], 988, 230, 0
OFFSET[R], 979, 170, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 65

IUP[Y]
IUP[X]


SVTCA[Y]
CALL[], 54, 0, 1, 1, -40, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EB8">
/* VTTTalk Unicode 0x1eb8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 988, 234, 0

SVTCA[Y]
CALL[], 13, 11, 1, 1, -60, 86
SHC[2], 1




    </glyphProgram>

    <glyphProgram name="uni1EB9">
/* VTTTalk Unicode 0x1eb9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 988, 232, 0



SVTCA[Y]
CALL[], 49, 0, 1, 1, -50, 86
SHC[2], 1






    </glyphProgram>

    <glyphProgram name="uni1EBA">
/* VTTTalk Unicode 0x1eba */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 983, 221, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 22

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1EBB">
/* VTTTalk Unicode 0x1ebb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 983, 150, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 58

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="uni1EBC">
/* VTTTalk Unicode 0x1ebc */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 981, 153, 191




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 12

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni1EBD">
/* VTTTalk Unicode 0x1ebd */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 981, 82, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 48

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni1EBE">
/* VTTTalk Unicode 0x1ebe */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 1033, 189, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 18
MDAP[R], 18

SMD[], 64

MDRP[m&gt;RWh], 19

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni1EBF">
/* VTTTalk Unicode 0x1ebf */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 1033, 118, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 54
MDAP[R], 54

SMD[], 64


MDRP[m&gt;RWh], 55

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1EC0">
/* VTTTalk Unicode 0x1ec0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 1034, 138, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 18
MDAP[R], 18

SMD[], 64


MDRP[m&gt;RWh], 22

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1EC1">
/* VTTTalk Unicode 0x1ec1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 1034, 67, 0


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 54
MDAP[R], 54

SMD[], 64


MDRP[m&gt;RWh], 58

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni1EC2">
/* VTTTalk Unicode 0x1ec2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 1035, 189, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 18
MDAP[R], 18

SMD[], 64


MDRP[m&gt;RWh], 29

IUP[Y]
IUP[X]








    </glyphProgram>

    <glyphProgram name="uni1EC3">
/* VTTTalk Unicode 0x1ec3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 1035, 118, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 54
MDAP[R], 54

SMD[], 64


MDRP[m&gt;RWh], 65

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EC4">
/* VTTTalk Unicode 0x1ec4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 1036, 172, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 18
MDAP[R], 18

SMD[], 128


MDRP[m&gt;RWh], 19

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni1EC5">
/* VTTTalk Unicode 0x1ec5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 1036, 101, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 54
MDAP[R], 54

SMD[], 128


MDRP[m&gt;RWh], 55

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1EC6">
/* VTTTalk Unicode 0x1ec6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 988, 234, 0
OFFSET[R], 977, 191, 191



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 22
IUP[Y]
IUP[X]


SVTCA[Y]
CALL[], 13, 11, 1, 1, -60, 86
SHC[2], 1







    </glyphProgram>

    <glyphProgram name="uni1EC7">
/* VTTTalk Unicode 0x1ec7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 270, 0, 0
OFFSET[R], 977, 120, 0
OFFSET[R], 988, 232, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 54

IUP[Y]
IUP[X]


SVTCA[Y]
CALL[], 56, 0, 1, 1, -60, 86
SHC[2], 2






    </glyphProgram>

    <glyphProgram name="uni1EC8">
/* VTTTalk Unicode 0x1ec8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 983, 24, 188



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 14

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1EC9">
/* VTTTalk Unicode 0x1ec9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 983, -22, 5




SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 14

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1ECA">
/* VTTTalk Unicode 0x1eca */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 988, 38, 0

SVTCA[Y]
CALL[], 5, 3, 1, 1, -60, 86
SHC[2], 1





    </glyphProgram>

    <glyphProgram name="uni1ECB">
/* VTTTalk Unicode 0x1ecb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 307, 0, 0
OFFSET[R], 988, 23, 0



SVTCA[Y]
CALL[], 9, 3, 1, 1, -55, 86
SHC[2], 2








    </glyphProgram>

    <glyphProgram name="uni1ECC">
/* VTTTalk Unicode 0x1ecc */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 988, 295, 0



SVTCA[Y]
CALL[], 41, 0, 1, 1, -50, 86
SHC[2], 2






    </glyphProgram>

    <glyphProgram name="uni1ECD">
/* VTTTalk Unicode 0x1ecd */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 988, 211, 0

SVTCA[Y]
CALL[], 37, 0, 1, 1, -50, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1ECE">
/* VTTTalk Unicode 0x1ece */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 983, 291, 188




SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 50

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1ECF">
/* VTTTalk Unicode 0x1ecf */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 983, 157, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 46

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1ED0">
/* VTTTalk Unicode 0x1ed0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 1033, 259, 188


SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 46
MDAP[R], 46

SMD[], 64


MDRP[m&gt;RWh], 47

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1ED1">
/* VTTTalk Unicode 0x1ed1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 1033, 125, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 42
MDAP[R], 42

SMD[], 64


MDRP[m&gt;RWh], 43

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1ED2">
/* VTTTalk Unicode 0x1ed2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 1034, 208, 188


SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 46
MDAP[R], 46

SMD[], 64


MDRP[m&gt;RWh], 50

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1ED3">
/* VTTTalk Unicode 0x1ed3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 1034, 74, 0


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 42
MDAP[R], 42

SMD[], 64


MDRP[m&gt;RWh], 46

IUP[Y]
IUP[X]







    </glyphProgram>

    <glyphProgram name="uni1ED4">
/* VTTTalk Unicode 0x1ed4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 1035, 259, 188


SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 46
MDAP[R], 46

SMD[], 64


MDRP[m&gt;RWh], 57

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1ED5">
/* VTTTalk Unicode 0x1ed5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 1035, 125, 0


SVTCA[Y]
MDAP[R], 10
MDRP[m&gt;RWh], 42
MDAP[R], 42

SMD[], 64


MDRP[m&gt;RWh], 53

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1ED6">
/* VTTTalk Unicode 0x1ed6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 1036, 242, 188


SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 46
MDAP[R], 46

SMD[], 128


MDRP[m&gt;RWh], 47

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1ED7">
/* VTTTalk Unicode 0x1ed7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 1036, 108, 0


SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 42
MDAP[R], 42

SMD[], 192


MDRP[m&gt;RWh], 43

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1ED8">
/* VTTTalk Unicode 0x1ed8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 116, 0, 0
OFFSET[R], 988, 295, 0
OFFSET[R], 977, 261, 188

SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 50

IUP[Y]
IUP[X]


SVTCA[Y]
CALL[], 41, 0, 1, 1, -50, 86
SHC[2], 2



    </glyphProgram>

    <glyphProgram name="uni1ED9">
/* VTTTalk Unicode 0x1ed9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 348, 0, 0
OFFSET[R], 988, 211, 0
OFFSET[R], 977, 127, 0

SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 46

IUP[Y]
IUP[X]


SVTCA[Y]
CALL[], 37, 0, 1, 1, -55, 86
SHC[2], 2






    </glyphProgram>

    <glyphProgram name="uni1EDA">
/* VTTTalk Unicode 0x1eda */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 132, 0, 0
OFFSET[R], 974, 339, 188




SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 56

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1EDB">
/* VTTTalk Unicode 0x1edb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 364, 0, 0
OFFSET[R], 974, 205, 0




SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 52

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni1EDC">
/* VTTTalk Unicode 0x1edc */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 132, 0, 0
OFFSET[R], 973, 248, 188




SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 59

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1EDD">
/* VTTTalk Unicode 0x1edd */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 364, 0, 0
OFFSET[R], 973, 114, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 55

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EDE">
/* VTTTalk Unicode 0x1ede */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 132, 0, 0
OFFSET[R], 983, 291, 188




SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 66

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1EDF">
/* VTTTalk Unicode 0x1edf */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 364, 0, 0
OFFSET[R], 983, 157, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 62

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EE0">
/* VTTTalk Unicode 0x1ee0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 132, 0, 0
OFFSET[R], 981, 223, 188





SVTCA[Y]
MDAP[R], 11
MDRP[m&gt;RWh], 56

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1EE1">
/* VTTTalk Unicode 0x1ee1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 364, 0, 0
OFFSET[R], 981, 89, 0



SVTCA[Y]
MDAP[R], 9
MDRP[m&gt;RWh], 52

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="uni1EE2">
/* VTTTalk Unicode 0x1ee2 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 132, 0, 0
OFFSET[R], 988, 295, 0




SVTCA[Y]
CALL[], 57, 0, 1, 1, -50, 86
SHC[2], 3









    </glyphProgram>

    <glyphProgram name="uni1EE3">
/* VTTTalk Unicode 0x1ee3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 364, 0, 0
OFFSET[R], 988, 211, 0

SVTCA[Y]
CALL[], 53, 0, 1, 1, -55, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EE4">
/* VTTTalk Unicode 0x1ee4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 988, 294, 0


SVTCA[Y]
CALL[], 31, 0, 1, 1, -50, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni1EE5">
/* VTTTalk Unicode 0x1ee5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 988, 216, 0


SVTCA[Y]
CALL[], 39, 0, 1, 1, -55, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni1EE6">
/* VTTTalk Unicode 0x1ee6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 182, 0, 0
OFFSET[R], 983, 276, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 40

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EE7">
/* VTTTalk Unicode 0x1ee7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 983, 162, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 48

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EE8">
/* VTTTalk Unicode 0x1ee8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 191, 0, 0
OFFSET[R], 974, 324, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 46

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1EE9">
/* VTTTalk Unicode 0x1ee9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 974, 210, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 54

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EEA">
/* VTTTalk Unicode 0x1eea */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 191, 0, 0
OFFSET[R], 973, 233, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 49

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EEB">
/* VTTTalk Unicode 0x1eeb */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 973, 119, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 57

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EEC">
/* VTTTalk Unicode 0x1eec */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 191, 0, 0
OFFSET[R], 983, 276, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 56

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EED">
/* VTTTalk Unicode 0x1eed */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 983, 162, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 64

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EEE">
/* VTTTalk Unicode 0x1eee */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 191, 0, 0
OFFSET[R], 981, 208, 188

SVTCA[Y]
MDAP[R], 8
MDRP[m&gt;RWh], 46

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EEF">
/* VTTTalk Unicode 0x1eef */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 981, 121, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 63

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="uni1EF0">
/* VTTTalk Unicode 0x1ef0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 191, 0, 0
OFFSET[R], 988, 294, 0

SVTCA[Y]
CALL[], 47, 0, 1, 1, -45, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EF1">
/* VTTTalk Unicode 0x1ef1 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 988, 216, 0

SVTCA[Y]
CALL[], 55, 0, 1, 1, -55, 86
SHC[2], 2




    </glyphProgram>

    <glyphProgram name="uni1EF4">
/* VTTTalk Unicode 0x1ef4 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 212, 0, 0
OFFSET[R], 988, 225, 0

SVTCA[Y]
CALL[], 10, 8, 1, 1, -50, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1EF5">
/* VTTTalk Unicode 0x1ef5 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 444, 0, 0
OFFSET[R], 988, 265, 0

    </glyphProgram>

    <glyphProgram name="uni1EF6">
/* VTTTalk Unicode 0x1ef6 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 212, 0, 0
OFFSET[R], 983, 210, 188

SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 19

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1EF7">
/* VTTTalk Unicode 0x1ef7 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 444, 0, 0
OFFSET[R], 983, 123, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 37

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="uni1EF8">
/* VTTTalk Unicode 0x1ef8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 212, 0, 0
OFFSET[R], 981, 142, 188

SVTCA[Y]
MDAP[R], 1
MDRP[m&gt;RWh], 9

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni1EF9">
/* VTTTalk Unicode 0x1ef9 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 444, 0, 0
OFFSET[R], 981, 55, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 27

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="uni2002">
/* TT glyph 890, char 0x2002 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */


    </glyphProgram>

    <glyphProgram name="uni2003">
/* TT glyph 889, char 0x2003 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */


    </glyphProgram>

    <glyphProgram name="uni2007">
/* TT glyph 891, char 0x2007 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */


    </glyphProgram>

    <glyphProgram name="uni2008">
/* TT glyph 893, char 0x2008 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */


    </glyphProgram>

    <glyphProgram name="uni2009">
/* TT glyph 896, char 0x2009 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */


    </glyphProgram>

    <glyphProgram name="uni200A">
/* TT glyph 892, char 0x200a */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */


    </glyphProgram>

    <glyphProgram name="uni200B">
/* TT glyph 897, char 0x200b */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */


    </glyphProgram>

    <glyphProgram name="uni2010">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 876, 0, 0


    </glyphProgram>

    <glyphProgram name="uni2015">
/* VTTTalk Unicode 0x2015 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 872, 0, 0


    </glyphProgram>

    <glyphProgram name="uni2070">
/* TT glyph 827, char 0x2070 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 79
SHP[2], 22
MIRP[m&lt;RGr], 9, 77
SHP[2], 31
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2074">
/* TT glyph 831, char 0x2074 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 79
MIRP[m&gt;RBl], 4, 77
SHP[2], 13
IP[], 1
MDAP[R], 1
SHP[1], 9
SHP[1], 12
SRP1[], 12
SHP[1], 3
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2075">
/* TT glyph 832, char 0x2075 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 8, 79
SHP[1], 15
MIRP[m&lt;RGr], 32, 77
SHP[2], 35
IP[], 0
MDAP[R], 0
SHP[1], 22
SRP1[], 22
SHP[1], 36
SRP1[], 36
SHP[1], 26
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2076">
/* TT glyph 833, char 0x2076 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 23, 79
SHP[1], 27
MIRP[m&lt;RGr], 16, 77
SHP[2], 9
IP[], 3
MDAP[R], 3
SHP[1], 34
SRP1[], 34
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2077">
/* TT glyph 834, char 0x2077 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 5, 79
MIRP[m&lt;RGr], 2, 77
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2078">
/* TT glyph 835, char 0x2078 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 4, 79
SHP[1], 42
MIRP[m&lt;RGr], 20, 77
SHP[2], 56
IP[], 34
MDAP[R], 34
SHP[1], 49
SHP[1], 12
SRP1[], 12
SHP[1], 27
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2079">
/* TT glyph 836, char 0x2079 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 79
SHP[2], 7
MIRP[m&lt;RGr], 21, 77
SHP[2], 35
IP[], 14
MDAP[R], 14
SHP[1], 28
SRP1[], 28
SHP[1], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2080">
/* TT glyph 790, char 0x2080 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 76
SHP[2], 22
MIRP[m&lt;RGr], 9, 77
SHP[2], 31
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2081">
/* TT glyph 791, char 0x2081 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 2, 76
SHP[1], 4
SRP1[], 4
SHP[1], 17
MIRP[m&lt;RGr], 15, 77
SHP[2], 5
SRP1[], 5
SHP[1], 10
SRP1[], 10
SHP[1], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2082">
/* TT glyph 792, char 0x2082 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 76
SHP[2], 33
MIRP[m&lt;RGr], 21, 77
SHP[2], 12
SLOOP[], 4
IP[], 29, 4, 9, 24
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2083">
/* TT glyph 793, char 0x2083 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 76
SHP[2], 8
MIRP[m&lt;RGr], 32, 77
SHP[2], 24
IP[], 15
MDAP[R], 15
SHP[1], 18
SRP1[], 18
SHP[1], 38
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2084">
/* TT glyph 794, char 0x2084 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 76
MIRP[m&gt;RBl], 4, 77
SHP[2], 13
IP[], 1
MDAP[R], 1
SHP[1], 9
SHP[1], 12
SRP1[], 12
SHP[1], 3
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2085">
/* TT glyph 795, char 0x2085 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 8, 76
SHP[1], 15
MIRP[m&lt;RGr], 32, 77
SHP[2], 35
IP[], 0
MDAP[R], 0
SHP[1], 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2086">
/* TT glyph 796, char 0x2086 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 23, 76
SHP[1], 27
MIRP[m&lt;RGr], 16, 77
SHP[2], 9
IP[], 3
MDAP[R], 3
SHP[1], 34
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2087">
/* TT glyph 797, char 0x2087 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 4, 76
MIRP[m&lt;RGr], 2, 77
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2088">
/* TT glyph 798, char 0x2088 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 4, 76
SHP[1], 40
MIRP[m&lt;RGr], 20, 77
SHP[2], 54
IP[], 33
MDAP[R], 33
SHP[1], 47
SHP[1], 12
SRP1[], 12
SHP[1], 27
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2089">
/* TT glyph 799, char 0x2089 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 76
SHP[2], 7
MIRP[m&lt;RGr], 21, 77
SHP[2], 35
IP[], 14
MDAP[R], 14
SHP[1], 28
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20A6">
/* TT glyph 914, char 0x20a6 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 10, 8
SHP[1], 17
SRP1[], 17
SHP[1], 13
CALL[], 11, 2, 114
SHP[2], 8
SHP[2], 14
SRP2[], 10
IP[], 2
MDAP[R], 2
SHP[1], 1
MDRP[m&gt;RWh], 5
SHP[2], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20A9">
/* TT glyph 922, char 0x20a9 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 29, 8
SHP[1], 26
MDAP[R], 26
CALL[], 30, 2, 114
SRP2[], 29
IP[], 8
MDAP[R], 8
SLOOP[], 6
IP[], 32, 22, 27, 33, 21, 18
SHP[1], 15
MDRP[m&gt;RGr], 3
SHP[2], 4
SHP[2], 0
SRP1[], 0
SHP[1], 7
SRP1[], 8
SHP[1], 11
SRP1[], 11
SHP[1], 12
SRP1[], 30
SHP[1], 16
MDAP[R], 16
SHP[1], 19
MDAP[R], 19
SHP[1], 23
MDAP[R], 23
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20AD">
/* TT glyph 910, char 0x20ad */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
SHP[2], 7
MIAP[R], 15, 8
SHP[1], 11
IP[], 1
MDAP[R], 1
SLOOP[], 4
IP[], 13, 6, 12, 9
SHP[1], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20AE">
/* TT glyph 921, char 0x20ae */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 10, 2, 114
SHP[2], 9
SRP1[], 9
SHP[1], 13
MIAP[R], 15, 8
SLOOP[], 8
IP[], 4, 5, 7, 6, 0, 1, 3, 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20B1">
/* TT glyph 916, char 0x20b1 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 8, 8
CALL[], 9, 2, 114
SHP[2], 33
SRP2[], 8
IP[], 22
IP[], 4
MDAP[R], 4
RDTG[]
MDAP[R], 22
SHP[1], 20
SRP1[], 4
SHP[1], 7
RTG[]
SRP0[], 4
MDRP[m&gt;RWh], 3
SHP[2], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20B2">
/* TT glyph 908, char 0x20b2 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 8, 9, 114
MDRP[m&gt;RWh], 2
SHP[1], 34
SHP[1], 1
SRP1[], 1
SHP[1], 0
CALL[], 18, 3, 114
MDRP[m&gt;RGr], 4
SHP[1], 25
SRP1[], 25
SHP[1], 7
SRP1[], 7
SHP[1], 6
SRP1[], 8
SRP2[], 18
IP[], 43
MDAP[R], 43
SRP2[], 8
IP[], 38
IP[], 37
SHP[1], 42
MIAP[R], 46, 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20B4">
/* TT glyph 909, char 0x20b4 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 33
CALL[], 20, 3, 114
SHP[2], 13
SRP2[], 0
IP[], 41
MDAP[R], 41
IP[], 30
IP[], 3
SRP2[], 20
IP[], 23
IP[], 10
SHP[1], 40
MDRP[m&gt;RWh], 44
SHP[2], 45
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20B5">
/* TT glyph 899, char 0x20b5 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 8, 9, 114
MDRP[m&gt;RBl], 2
SHP[1], 36
SHP[1], 0
SRP1[], 0
SHP[1], 1
CALL[], 19, 3, 114
MDRP[m&gt;RBl], 4
SHP[1], 27
SRP1[], 27
SHP[1], 7
SRP1[], 7
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20B8">
/* TT glyph 920, char 0x20b8 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 8
CALL[], 9, 2, 114
SHP[2], 8
SMD[], 128
MDRP[m&gt;RWh], 3
SHP[2], 2
SRP1[], 2
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20B9">
/* TT glyph 918, char 0x20b9 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
SHP[2], 23
SMD[], 128
MDRP[m&gt;RGr], 27
SHP[2], 26
MIAP[R], 12, 8
SRP2[], 1
IP[], 10
MDAP[R], 10
SHP[1], 14
CALL[], 32, 2, 114
SHP[2], 29
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20BA">
/* TT glyph 912, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 8
SHP[2], 3
CALL[], 1, 2, 114
SRP2[], 0
SLOOP[], 8
IP[], 15, 16, 19, 20, 18, 17, 22, 21
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20BC">
/* TT glyph 913, char 0x20bc */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 20, 9
SHP[1], 7
MDAP[R], 27
SHP[1], 26
SRP2[], 20
IP[], 29
IP[], 0
MDAP[R], 29
MDAP[R], 0
SRP1[], 29
SHP[1], 28
SRP1[], 0
SHP[1], 13
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20BD">
/* TT glyph 917, char 0x20bd */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 16, 8
CALL[], 25, 2, 114
SHP[2], 36
SRP2[], 16
IP[], 21
MDAP[R], 21
SHP[1], 10
MDRP[m&gt;RWh], 20
SHP[2], 11
SHP[2], 17
SRP1[], 17
SHP[1], 14
SRP1[], 21
SHP[1], 24
SRP1[], 24
SHP[1], 37
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2113">
/* TT glyph 964, char 0x2113 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 7
MDAP[R], 31
SHP[1], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2116">
/* TT glyph 966, char 0x2116 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 2, 8
SHP[1], 9
SRP1[], 9
SHP[1], 5
CALL[], 3, 2, 114
SHP[2], 0
SHP[2], 6
SRP1[], 6
SHP[1], 19
MDAP[R], 19
SHP[1], 38
SHP[1], 10
MDAP[R], 10
SHP[1], 31
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2120">
/* TT glyph 1046, char 0x2120 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 50, 3
SHP[1], 17
SHP[1], 11
MDAP[R], 11
SHP[1], 1
SRP1[], 50
SHP[1], 29
MDAP[R], 29
SHP[1], 36
SHP[1], 10
MDAP[R], 10
SHP[1], 4
SRP2[], 11
SLOOP[], 5
IP[], 6, 7, 0, 5, 8
SRP1[], 29
SRP2[], 50
SLOOP[], 6
IP[], 39, 26, 42, 23, 46, 20
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2126">
/* TT glyph 943, char 0x2126 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 10, 3, 114
SHP[2], 33
MIAP[R], 22, 8
SHP[1], 19
SRP1[], 19
SHP[1], 23
MIAP[R], 44, 8
SHP[1], 1
SRP1[], 1
SHP[1], 43
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2153">
/* VTTTalk Unicode 0x2153 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

OFFSET[R], 818, 0, 0
OFFSET[R], 837, 240, 0
OFFSET[R], 810, 360, 0

    </glyphProgram>

    <glyphProgram name="uni2154">
/* TT glyph 840, char 0x2154 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 42, 19, 114
MDAP[R], 21
SHP[1], 12
IP[], 74
MDAP[R], 74
SHP[1], 66
SRP1[], 21
IP[], 0
MDAP[R], 0
SHP[1], 33
SRP1[], 21
IP[], 58
MDAP[R], 58
SHP[1], 59
SHP[2], 50
SRP1[], 21
SHP[1], 38
SHP[2], 41
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2206">
/* TT glyph 944, char 0x2206 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 2, 8, 114
SHP[2], 8
SRP1[], 8
SHP[1], 3
SRP1[], 3
SHP[1], 0
MIAP[R], 4, 2
SHP[1], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2215">
/* TT glyph 925, char 0x2215 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 1, 16, 114
SHP[2], 2
CALL[], 3, 18, 114
SHP[2], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2219">
/* TT glyph 924, char 0x2219 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uogonek">
/* VTTTalk Unicode 0x173 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 992, 351, 0


    </glyphProgram>

    <glyphProgram name="uring">
/* VTTTalk Unicode 0x16f */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 980, 171, 0



SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 47
MDAP[R], 47

SHP[1], 56

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="ustraitcy">
/* TT glyph 695, char 0x4af */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 2, 6, 114
SHP[2], 10
CALL[], 14, 14, 114
SRP1[], 2
SLOOP[], 3
IP[], 1, 13, 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="ustraitstrokecy">
/* TT glyph 696, char 0x4b1 */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
CALL[], 4, 14, 114
CALL[], 6, 6, 114
SHP[2], 14
SRP2[], 4
SLOOP[], 3
IP[], 5, 17, 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="utilde">
/* VTTTalk Unicode 0x169 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 414, 0, 0
OFFSET[R], 981, 81, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 47

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="v">
/* TT glyph 437, char 0x76 (v) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 6, 114
SHP[2], 8
CALL[], 12, 10, 114
SRP1[], 0
IP[], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="v.sc">
/* TT glyph 497, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
SHP[2], 4
MDAP[R], 5
IP[], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="verticalbarcy">
/* TT glyph 1026, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
MDAP[R], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="verticalbarcy.case">
/* TT glyph 1028, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 1
MDAP[R], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="w">
/* TT glyph 438, char 0x77 (w) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 6, 114
SHP[2], 7
SHP[2], 12
SHP[2], 23
CALL[], 32, 10, 114
SHP[2], 27
SRP1[], 0
SLOOP[], 6
IP[], 16, 2, 28, 15, 5, 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="w.sc">
/* TT glyph 498, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 0, 74
SHP[2], 5
MDAP[R], 5
SHP[2], 8
MDAP[R], 8
SHP[2], 12
MDAP[R], 13
SHP[1], 17
SLOOP[], 6
IP[], 2, 10, 15, 3, 9, 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="w.ss09">
/* TT glyph 467, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 0, 6, 114
SHP[2], 4
SHP[2], 7
MDAP[R], 8
SHP[1], 12
SRP1[], 12
SLOOP[], 3
IP[], 2, 5, 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="wacute">
/* VTTTalk Unicode 0x1e83 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 438, 0, 0
OFFSET[R], 974, 290, 0



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 33

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="wcircumflex">
/* VTTTalk Unicode 0x175 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 438, 0, 0
OFFSET[R], 977, 212, 0



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 39

IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="wdieresis">
/* VTTTalk Unicode 0x1e85 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 438, 0, 0
OFFSET[R], 971, 240, 0



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 33
MDRP[m&gt;RWh], 37

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="wgrave">
/* VTTTalk Unicode 0x1e81 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 438, 0, 0
OFFSET[R], 973, 199, 0



SVTCA[Y]
MDAP[R], 0
MDRP[m&gt;RWh], 36

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="x">
/* TT glyph 443, char 0x78 (x) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 1, 6, 114
SHP[2], 7
CALL[], 15, 10, 114
SHP[2], 10
SRP1[], 1
SLOOP[], 4
IP[], 12, 8, 0, 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="x.sc">
/* TT glyph 499, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 1, 74
SHP[1], 5
MIAP[R], 11, 10
SHP[1], 8
SRP2[], 1
SLOOP[], 4
IP[], 9, 6, 0, 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="y">
/* TT glyph 444, char 0x79 (y) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 6, 6, 114
SHP[2], 15
CALL[], 26, 15, 114
SRP2[], 6
IP[], 8
IP[], 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="y.sc">
/* TT glyph 500, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 1, 74
SHP[1], 5
MDAP[R], 7
SRP2[], 1
SLOOP[], 3
IP[], 6, 0, 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="y.ss10">
/* TT glyph 468, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 1, 6, 114
SHP[2], 5
CALL[], 6, 14, 114
SRP1[], 1
IP[], 0
IP[], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="yacute">
/* VTTTalk Unicode 0xfd */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 444, 0, 0
OFFSET[R], 974, 171, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 27

IUP[Y]
IUP[X]



    </glyphProgram>

    <glyphProgram name="ycircumflex">
/* VTTTalk Unicode 0x177 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 444, 0, 0
OFFSET[R], 977, 93, 0


SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 33

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="ydieresis">
/* VTTTalk Unicode 0xff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 444, 0, 0
OFFSET[R], 971, 121, 0


SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 27
MDRP[m&gt;RWh], 31

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="yen">
/* TT glyph 923, char 0xa5 */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 10, 8
CALL[], 20, 2, 114
SHP[2], 23
SRP2[], 10
IP[], 16
MDAP[R], 16
SLOOP[], 3
IP[], 4, 15, 22
SHP[1], 3
MDRP[m&gt;RWh], 14
SHP[2], 5
SHP[2], 11
SRP1[], 11
SHP[1], 8
SRP1[], 16
SHP[1], 19
SRP1[], 19
SHP[1], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ygrave">
/* VTTTalk Unicode 0x1ef3 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 444, 0, 0
OFFSET[R], 973, 80, 0

SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RWh], 30

IUP[Y]
IUP[X]






    </glyphProgram>

    <glyphProgram name="z">
/* TT glyph 454, char 0x7a (z) */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
CALL[], 3, 6, 114
SHP[2], 2
SHP[2], 5
CALL[], 9, 10, 114
SHP[2], 6
SRP1[], 6
SHP[1], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="z.sc">
/* TT glyph 501, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:48 2020 */
SVTCA[Y]
MIAP[R], 3, 74
SHP[1], 2
SRP1[], 2
SHP[1], 5
MDAP[R], 9
SHP[1], 6
SRP1[], 6
SHP[1], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="zacute">
/* VTTTalk Unicode 0x17a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 454, 0, 0
OFFSET[R], 974, 163, 0

SVTCA[Y]
MDAP[R], 3
MDRP[m&gt;RWh], 10

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="zcaron">
/* VTTTalk Unicode 0x17e */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 454, 0, 0
OFFSET[R], 978, 76, 0

SVTCA[Y]
MDAP[R], 3
MDRP[m&gt;RWh], 16

IUP[Y]
IUP[X]





    </glyphProgram>

    <glyphProgram name="zdotaccent">
/* VTTTalk Unicode 0x17c */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 454, 0, 0
OFFSET[R], 972, 169, 0

SVTCA[Y]
MDAP[R], 3
MDRP[m&gt;RWh], 10

IUP[Y]
IUP[X]




    </glyphProgram>

    <glyphProgram name="zero">
/* TT glyph 767, char 0x30 (0) */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 13, 114
CALL[], 9, 5, 114
SHP[2], 26
SRP1[], 0
SHP[1], 18
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="zero.dnom">
/* TT glyph 807, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 18
MIRP[m&lt;RGr], 9, 77
SHP[2], 27
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="zero.lf">
/* TT glyph 777, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 22
CALL[], 11, 3, 114
SHP[2], 33
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="zero.numr">
/* TT glyph 817, char 0xffff */
/* VTT 6.32 compiler Fri May  1 12:55:49 2020 */
SVTCA[Y]
MIAP[R], 0, 78
SHP[2], 22
MIRP[m&lt;RGr], 9, 77
SHP[2], 31
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="zero.subs">
/* VTTTalk Unicode 0xffff */
/* ACT generated Wed Apr  8 10:34:40 2020 */

USEMYMETRICS[]
OFFSET[R], 790, 0, 0


    </glyphProgram>

    <extraProgram name="cvt">
/* Control Program */
/* ACT generated Wed Apr  8 10:34:40 2020 */

CATEGORY Stroke
CATEGORY StrokeInheritance

InstructionsOn @9..2047

DropOutCtrlOff @144

CvtCutIn = 1, 0@144 /* 1 pixel cut-in for over- and undershoots */

ClearTypeCtrl = 1

ASM("WS[], 16, 0") /* &lt;== S[16] = threshold ppem that less than or equal is no RES */

LinearAdvanceWidths = 0

/***** Height CVTs *****/
UpperCase
  Grey
  Y
  SquareHeight
      2:   710 /* cap height */


Delta(1@9;10;14;16;20)


ASM("SVTCA[Y]")
ASM("CALL[], 2, 89")
      8:     0 /* base line */
ASM("SVTCA[Y]")
ASM("CALL[], 8, 89")
  RoundHeight
      3:     5 ~   2 @100 /* cap height overshoot */
      9:    -5 ~   8 @100 /* base line undershoot */

LowerCase
  SquareHeight
      0:   730 /* lc ascender */

Delta(1@10;12;13;14;18)

ASM("SVTCA[Y]")
ASM("CALL[], 0, 89")
      6:   519 /* x height */

Delta(1@10;12;14;16;18;20;22;24)



ASM("SVTCA[Y]")
ASM("CALL[], 6, 89")
     10:     0 /* base line */
ASM("SVTCA[Y]")
ASM("CALL[], 10, 89")
     14:  -213 /* lc descender */

Delta(-1@16)

ASM("SVTCA[Y]")
ASM("CALL[], 14, 89")
  RoundHeight
      1:    10 ~   0 @ 50 /* lc ascender overshoot */
      7:     8 ~   6 @ 75 /* x height overshoot */
     11:   -10 ~  10 @ 75 /* base line undershoot */
     15:   -10 ~  14 @ 50 /* lc descender undershoot */

Figure
  SquareHeight
      4:   571 /* figure height */
ASM("SVTCA[Y]")
ASM("CALL[], 4, 89")
     12:     0 /* base line */
ASM("SVTCA[Y]")
ASM("CALL[], 12, 89")
  RoundHeight
      5:    14 ~   4 @ 75 /* figure height overshoot */
     13:   -10 ~  12 @ 75 /* base line undershoot */

Other
  SquareHeight
     16:   710 /* other height */
ASM("SVTCA[Y]")
ASM("CALL[], 16, 89")
     18:     0 /* base line */
ASM("SVTCA[Y]")
ASM("CALL[], 18, 89")
  RoundHeight
     17:    10 ~  16 @ 75 /* other height overshoot */
     19:   -10 ~  18 @ 75 /* base line undershoot */

/***** Reserved CVTs *****/
AnyGroup
  AnyColor
  AnyDirection
  AnyCategory
     20:     0 /* DO NOT USE!!! */

/***** Italic rise and run CVTs *****/
UpperCase
  Grey
  Y
  ItalicRise
     21:   710

  X
  ItalicRun
     22:   151

LowerCase
  Grey
  Y
  ItalicRise
     23:   519

  X
  ItalicRun
     24:   110

Figure
  Grey
  Y
  ItalicRise
     25:   583

  X
  ItalicRun
     26:   124

Other
  Grey
  Y
  ItalicRise
     27:   710

  X
  ItalicRun
     28:   151

/***** Grand-Parent CVT *****/
AnyGroup
  Black
  X
  StrokeInheritance
     29:    20 /* 86x */

/***** Parent CVTs *****/
UpperCase
  Black
  X
  StrokeInheritance
     30:    20 /* 40x */
LowerCase
  Black
  X
  StrokeInheritance
     33:    20 /* 46x */
ASM("SVTCA[X]")
ASM("CALL[], 29, 33, 64, 30, 255, 90")

UpperCase
  Black
  Y
  StrokeInheritance
     31:    20 /* 21x */
ASM("SVTCA[X]")
ASM("CALL[], 31, 64, 30, 255, 91")
LowerCase
  Black
  Y
  StrokeInheritance
     34:    20 /* 4x */
ASM("SVTCA[X]")
ASM("CALL[], 34, 64, 33, 255, 91")

UpperCase
  Black
  Diag
  StrokeInheritance
     32:    20 /* 21x */
ASM("SVTCA[X]")
ASM("CALL[], 32, 64, 30, 255, 91")
LowerCase
  Black
  Diag
  StrokeInheritance
     35:    20 /* 4x */
ASM("SVTCA[X]")
ASM("CALL[], 35, 64, 33, 255, 91")

/***** StrokeInheritance CVTs *****/
UpperCase
  Black
  X
  StrokeInheritance
     36:    20 =  30 @255 /* 54x */
  Y
  StrokeInheritance
     37:    20 =  31 @255 /* 33x */
  Diag
  StrokeInheritance
     38:    19 =  32 @255 /* 40x */

LowerCase
  Black
  X
  StrokeInheritance
     39:    20 =  33 @255 /* 69x */
  Y
  StrokeInheritance
     40:    20 =  34 @255 /* 36x */
  Diag
  StrokeInheritance
     41:    21 =  35 @255 /* 22x */

Figure
  Black
  X
  StrokeInheritance
     42:    20 /* 22x */
  Y
  StrokeInheritance
     43:    20 /* 23x */
  Diag
  StrokeInheritance
     44:    19 /* 12x */

Other
  Black
  X
  StrokeInheritance
     45:    20 /* 55x */
  Y
  StrokeInheritance
     46:    20 /* 30x */
  Diag
  StrokeInheritance
     47:    19 /* 41x */
     48:    29 /* 3x */

/***** Stroke CVTs *****/
UpperCase
  Black
  X
  Stroke
     49:    20 =  36 @255 /* 54x */
  Y
  Stroke
     50:    20 =  37 @255 /* 33x */
  Diag
  Stroke
     51:    19 =  38 @255 /* 21x */
     52:    22 =  38 @167 /* 19x */

LowerCase
  Black
  X
  Stroke
     53:    16 =  39 @125 /* 2x */
     54:    20 =  39 @255 /* 66x */
     55:    24 =  39 @125 /* 1x */
  Y
  Stroke
     56:    20 =  40 @255 /* 36x */
  Diag
  Stroke
     57:    19 =  41 @250 /* 9x */
     58:    21 =  41 @255 /* 9x */
     59:    23 =  41 @250 /* 4x */

Figure
  Black
  X
  Stroke
     60:    13 =  42 @ 72 /* 1x */
     61:    20 =  42 @255 /* 21x */
  Y
  Stroke
     62:    17 =  43 @167 /* 2x */
     63:    20 =  43 @255 /* 21x */
  Diag
  Stroke
     64:    19 =  44 @255 /* 12x */

Other
  Black
  X
  Stroke
     65:    20 =  45 @255 /* 50x */
     66:    24 =  45 @125 /* 5x */
  Y
  Stroke
     67:    20 =  46 @255 /* 30x */
  Diag
  Stroke
     68:    13 =  47 @ 84 /* 2x */
     69:    19 =  47 @255 /* 22x */
     70:    21 =  47 @250 /* 10x */
     71:    23 =  47 @125 /* 7x */
     72:    29 =  48 @255 /* 2x */
     73:    31 =  48 @250 /* 1x */


74: 560 /*small cap square height*/

75: 5 ~   74 @ 52 /*small cap round height overshoot*/

/*sups inf align*/
76: -85

/*sups inf height*/
77: 445

78: 330
79: 420






    </extraProgram>

    <extraProgram name="fpgm">
/* Font-program */
/* ACT generated Wed Apr  8 10:34:40 2020 */

FDEF[], 9

/* Set fv to X
       pv perpendicular to italic angle

   CALL[], 9 */

#BEGIN
#PUSHOFF
SVTCA[X]
#PUSH, 11, 10
RS[]
SWAP[]
RS[]
NEG[]
SPVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 10

/* Set fv to italic angle
       pv to Y

   CALL[], 10 */

#BEGIN
#PUSHOFF
SVTCA[Y]
#PUSH, 10, 11
RS[]
SWAP[]
RS[]
SFVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 16

/* Set fv to X
       pv perpendicular to adjusted italic angle

   CALL[], 16 */

#BEGIN
#PUSHOFF
SVTCA[X]
#PUSH, 6
RS[]
#PUSH, 7
RS[]
NEG[]
SPVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 31

/* fn 31 equalizes two cvts below a given ppem size

   CALL[], &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt;, 31 */

#BEGIN
#PUSHOFF

/* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt; */

#PUSH, 79 /* #samples/pixel */
CALL[]
DUP[]
#PUSH, 64
LTEQ[]
IF[] /* #samples/pixel &lt;= 1 */

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt;, &lt;#samples/pixel&gt; */

    POP[] /* #samples/pixel not involved */
    MPPEM[]

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt;, &lt;act ppem size&gt; */

    GT[]
    IF[]
        RCVT[]
        WCVTP[]
    ELSE[]
        POP[]
        POP[]
    EIF[]

ELSE[] /* #samples/pixel &gt; 1 */

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt;, &lt;#samples/pixel&gt; */

    SWAP[]
    POP[] /* ppem Size not involved */
    #PUSH, 64

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;#samples/pixel&gt;, &lt;1&gt; */

    #PUSH, 4 /* child cvt */
    CINDEX[]
    RCVT[]
    #PUSH, 4 /* parent cvt */
    CINDEX[]
    RCVT[]
    SUB[]
    ABS[]

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;#samples/pixel&gt;, &lt;1&gt;, &lt;|[child cvt] - [parent cvt]|&gt; */

    ROLL[]
    MUL[]
    GT[]
    IF[] /* 1 &gt; #samples/pixel * delta cvt */
        RCVT[]
        WCVTP[]
    ELSE[]
        POP[]
        POP[]
    EIF[]

EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 40

/* Set fv to adjusted italic angle
       pv to Y

   CALL[], 40 */

#BEGIN
#PUSHOFF
SVTCA[Y]
#PUSH, 7
RS[]
#PUSH, 6
RS[]
SFVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 70

/* fn changes &lt;cvt&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem sizes &lt;low ppem&gt; to &lt;high ppem&gt; (inclusive)

   CALL[], &lt;amount&gt;, &lt;cvt&gt;, &lt;low ppem&gt;, &lt;high ppem&gt;, 70 */

#BEGIN
#PUSHOFF
MPPEM[]
GTEQ[]
SWAP[]
MPPEM[]
LTEQ[]
AND[]
IF[]
    DUP[]
    RCVT[]
    ROLL[]
    ADD[]
    WCVTP[]
ELSE[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 71

/* fn changes &lt;cvt&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem size &lt;ppem&gt;

   CALL[], &lt;amount&gt;, &lt;cvt&gt;, &lt;ppem&gt;, 71 */

#BEGIN
#PUSHOFF
MPPEM[]
EQ[]
IF[]
    DUP[]
    RCVT[]
    ROLL[]
    ADD[]
    WCVTP[]
ELSE[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 72

/* fn moves &lt;point&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem sizes &lt;low ppem&gt; to &lt;high ppem&gt; (inclusive)

   CALL[], &lt;point&gt;, &lt;amount&gt;, &lt;low ppem&gt;, &lt;high ppem&gt;, 72 */

#BEGIN
#PUSHOFF
MPPEM[]
GTEQ[]
SWAP[]
MPPEM[]
LTEQ[]
AND[]
IF[]
    SHPIX[]
ELSE[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 73

/* fn moves &lt;point&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem size &lt;ppem&gt;

   CALL[], &lt;point&gt;, &lt;amount&gt;, &lt;ppem&gt;, 73 */

#BEGIN
#PUSHOFF
MPPEM[]
EQ[]
IF[]
    SHPIX[]
ELSE[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 74

/* if &lt;flag&gt; = anti-aliasing in s[2] (set by fn 84)
   fn changes &lt;cvt&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem sizes &lt;low ppem&gt; to &lt;high ppem&gt; (inclusive)

   CALL[], &lt;amount&gt;, &lt;cvt&gt;, &lt;low ppem&gt;, &lt;high ppem&gt;, &lt;flag&gt;, 74 */

#BEGIN
#PUSHOFF
#PUSH, 2
RS[]
EQ[]
IF[]           /* if &lt;flag&gt; = s[2] then fwd to fn 70 */
    #PUSH, 70
    CALL[]
ELSE[]         /* else cleanup stack and bail out */
    POP[]
    POP[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 75

/* if &lt;flag&gt; = anti-aliasing in s[2] (set by fn 84)
   fn changes &lt;cvt&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem size &lt;ppem&gt;

   CALL[], &lt;amount&gt;, &lt;cvt&gt;, &lt;ppem&gt;, &lt;flag&gt;, 75 */

#BEGIN
#PUSHOFF
#PUSH, 2
RS[]
EQ[]
IF[]           /* if &lt;flag&gt; = s[2] then fwd to fn 71 */
    #PUSH, 71
    CALL[]
ELSE[]         /* else cleanup stack and bail out */
    POP[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 76

/* if &lt;flag&gt; = anti-aliasing in s[2] (set by fn 84)
   fn moves &lt;point&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem sizes &lt;low ppem&gt; to &lt;high ppem&gt; (inclusive)

   CALL[], &lt;point&gt;, &lt;amount&gt;, &lt;low ppem&gt;, &lt;high ppem&gt;, &lt;flag&gt;, 76 */

#BEGIN
#PUSHOFF
#PUSH, 2
RS[]
EQ[]
IF[]           /* if &lt;flag&gt; = s[2] then fwd to fn 72 */
    #PUSH, 72
    CALL[]
ELSE[]         /* else cleanup stack and bail out */
    POP[]
    POP[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 77

/* if &lt;flag&gt; = anti-aliasing in s[2] (set by fn 84)
   fn moves &lt;point&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem size &lt;ppem&gt;

   CALL[], &lt;point&gt;, &lt;amount&gt;, &lt;ppem&gt;, &lt;flag&gt;, 77 */

#BEGIN
#PUSHOFF
#PUSH, 2
RS[]
EQ[]
IF[]           /* if &lt;flag&gt; = s[2] then fwd to fn 73 */
    #PUSH, 73
    CALL[]
ELSE[]         /* else cleanup stack and bail out */
    POP[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 78

/* apply minimum distance and round &lt;dist&gt; depending on s[2], &lt;code&gt;, and pv
   code = 0: position
   code = 1: distance
   code = 2: delta distance (for fractional inheritance)

   CALL[], &lt;dist&gt;, &lt;code&gt;, 78

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;dist&gt;, &lt;code&gt; */

SWAP[]
DUP[]
#PUSH, 0
LT[]
ROLL[]
ROLL[]
ABS[]

/* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt; */

#PUSH, 0, 3 /* code */
CINDEX[]
EQ[]
IF[] /* position */

    /* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt; */

    #PUSH, 64

    /* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt;, &lt;#samples/pixel&gt; */

ELSE[]

    /* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt; */

    #PUSH, 1, 3 /* code */
    CINDEX[]
    EQ[]
    IF[] /* distance */
        #PUSH, 5 /* minimum distance */
        RS[]
        MAX[]
    EIF[]

    #PUSH, 79 /* #samples/pixel */
    CALL[]

    /* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt;, &lt;#samples/pixel&gt; */

EIF[]

SWAP[]
#PUSH, 98 /* round to virtual grid */
CALL[]

/* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;[|dist|]&gt; */

SWAP[]
POP[]

/* STACK: &lt;negDist&gt;, &lt;[|dist|]&gt; */

SWAP[]
IF[]
    NEG[]
EIF[]

/* STACK: &lt;[dist]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 79

/* depending on rendering environment and pv determine #samples/pixel for rounding etc.

   notice that for PVs other than X or Y, this method will default to X, reflecting the
   bias inherent in the asymmetrical nature of ClearType

   CALL[], 79

   returns the #samples/pixel in 26.6 */

#BEGIN
#PUSHOFF

#PUSH, 8, 0
GPV[]
POP[]
EQ[]
ADD[]
RS[]

#PUSHON
#END
ENDF[]

FDEF[], 80

/* depending on rendering environment and pv determine actual stroke optimization method

   CALL[], 80

   returns with method on stack (see fn 112 for definition of method) */

#BEGIN
#PUSHOFF

#PUSH, 12, 0
GPV[]
POP[]
EQ[]
ADD[]
RS[]

#PUSHON
#END
ENDF[]

FDEF[], 81

   /* adjust advance width to compensate for rasterizer's rounding errors 

   CALL[], &lt;rsb&gt;, 81 */

#BEGIN
#PUSHOFF

/* STACK: &lt;rsb&gt; */

SVTCA[X]
DUP[]
GC[O]

/* STACK: &lt;rsb&gt;, &lt;rsb.x&gt; */
#PUSH, 2
RS[]
DUP[]
#PUSH, 4096 /* fract AW value in 26.6 */
DIV[]
#PUSH, 4096 /* 64 in 26.6 */
MUL[]
EVEN[] /* fract AW bit not set */
SWAP[]
#PUSH, 256 /* comp AW value in 26.6 */
DIV[]
#PUSH, 4096 /* 64 in 26.6 */
MUL[]
EVEN[] /* comp AW bit not set */
AND[]
IF[]
    #PUSH, 32
    ADD[]
    FLOOR[]
EIF[]

SCFS[]

#PUSHON
#END
ENDF[]

FDEF[], 83

/* CALL[], &lt;radicand&gt;, 83

   returns with square root of radicand on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;radicand&gt; */

#PUSH, 0, 2
CINDEX[]

/* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt; */

#WBeginLoop83:

    #PUSH, 2 /* low */
    CINDEX[]
    #PUSH, 2 /* high */
    CINDEX[]
    GTEQ[]
    #PUSH, WOffset83a
    SWAP[]
    JROT[], (WOffset83a=#WEndLoop83) /* while low &lt;= high */

    /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt; */

    #PUSH, 2 /* low */
    CINDEX[]
    #PUSH, 2 /* high */
    CINDEX[]
    ADD[]
    #PUSH, 32
    MUL[]

    /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt; */

    DUP[]
    DUP[]
    #PUSH, 6 /* radicand */
    CINDEX[]
    SWAP[]
    DIV[]

    /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt;, &lt;mid&gt;, &lt;radicand/mid&gt; */

    LT[]
    IF[]

        /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt; */

        ROLL[]
        POP[]
        #PUSH, 1
        ADD[]
        SWAP[]

        /* STACK: &lt;radicand&gt;, &lt;mid+1&gt;, &lt;high&gt; */

    ELSE[]

        DUP[]
        DUP[]
        #PUSH, 6 /* radicand */
        CINDEX[]
        SWAP[]
        DIV[]

        GT[]
        IF[]

            /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt; */

            SWAP[]
            POP[]
            #PUSH, 1
            SUB[]

            /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;mid-1&gt; */

        ELSE[]

            /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt; */

            ROLL[]
            POP[]
            SWAP[]
            POP[]
            DUP[]

            /* STACK: &lt;radicand&gt;, &lt;mid&gt;, &lt;mid&gt; */

        EIF[]

    EIF[]


    #PUSH, WOffset83b
    JMPR[], (WOffset83b=#WBeginLoop83)

#WEndLoop83:

/* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt; */

ADD[]
#PUSH, 32
MUL[]
SWAP[]
POP[]

/* STACK: &lt;mid&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 84

/* fn determines current rasterizing environment and stores it in s[2] as follows:
     bit 0 (value   1) = Grey-Scaling
     bit 1 (value   2) = ClearType(tm)
     bit 2 (value   4) = Compatible Width ClearType
     bit 3 (value   8) = Vertical Direction (horizontally striped) ClearType
     bit 4 (value  16) = BGR as opposed to RGB Devices
     bit 5 (value  32) = ClearType on Rapier CE Devices
     bit 6 (value  64) = ClearType with fractional advance widths
     bit 7 (value 128) = ClearType with non-ClearType direction anti-aliasing
     bit 8 (value 256) = ClearType with gray full-pixel

   s[2] is used e.g. in fns 74 through 77

   To test against any combination of these flags, add up the respective values.

   specific to the current rasterizing environment fn stores the following parameters
     s[5] = minimum distance
     s[8] = #samples/pixel in x-direction
     s[9] = #samples/pixel in y-direction
     s[12] = stroke optimization method in x-direction
     s[13] = stroke optimization method in y-direction

   CALL[], 84 */
   /* Version 2.1 20120101 */

#BEGIN
#PUSHOFF
#PUSH,2,0
WS[]            /* s[2] = grey scaling: off (by default) */
#PUSH,35,1      /* 35 = MS Rasterizer version 1.7 */
GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
LTEQ[]          /* 35 &lt;= version ? */
#PUSH,64,1      /* 64 = highest rasterizer version assigned to MS */
GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
GTEQ[]          /* 64 &gt;= version ? */
AND[]           /* 35 &lt;= version &amp;&amp; version &lt;= 64 ? */
IF[]            /* if so, we're running MS rasterizer version 1.7 or higher */
  #PUSH,4096,32 /* 4096 = flag returned by GETINFO if grey scaling bit is on */
  GETINFO[]     /* 32 = tell GETINFO to give us the grey scaling bit */
  EQ[]          /* 4096 == flag ? */
  IF[]          /* if so, we're running under grey scaling */
    #PUSH,2,1,2
    RS[]
    ADD[]
    WS[]        /* s[2] += grey scaling: on (by now) */
  EIF[]
  #PUSH,36,1      /* 36 = MS Rasterizer version 1.6+ (WinCE) or 1.8 (WinXP) */
  GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
  LTEQ[]          /* 36 &lt;= version ? (already tested version &lt;= 64) */
  IF[]            /* if so, we're running MS rasterizer version 1.6+ (WinCE) or 1.8 (WinXP) or higher */
    #PUSH,8192,64 /* 8192 = flag returned by GETINFO if ClearTypeTM bit is on */
    GETINFO[]     /* 64 = tell GETINFO to give us the ClearTypeTM bit */
    EQ[]          /* 8192 == flag ? */
    IF[]          /* if so, we're running under ClearTypeTM */
      #PUSH,2,2,2
      RS[]
      ADD[]
      WS[]        /* s[2] += ClearTypeTM: on (by now) */

      #PUSH,36,1    /* 36 = MS Rasterizer version 1.6+ (WinCE) */
      GETINFO[]
      EQ[]
      IF[] /***** we're running Rasterizer v1.6+ for WinCE with ClearType *****/

        #PUSH,2,32,2
        RS[]
        ADD[]
        WS[]        /* s[2] += Rapier CE: on (by now) */
        SVTCA[Y]
        MPPEM[]
        SVTCA[X]
        MPPEM[]
        GT[]
        IF[]
          #PUSH,2,8,2
          RS[]
          ADD[]
          WS[]
        EIF[]

      ELSE[] /***** we're running Rasterizer v1.8 (or higher) for WinXP with ClearType (or Win2k 2000 with ClearType patch) *****/

        #PUSH,16384,128 /* 16384 = flag returned by GETINFO if ClearTypeTM silly aw bit is on */
        GETINFO[]       /* 128 = tell GETINFO to give us the ClearTypeTM silly aw bit */
        EQ[]            /* 16384 == flag ? */
        IF[]            /* if so, we're running under ClearTypeTM silly aw */
          #PUSH,2,4,2
          RS[]
          ADD[]
          WS[]          /* s[2] += ClearTypeTM silly aw: on (by now) */
        EIF[]

        #PUSH,16384,128 /* 32768 = flag returned by GETINFO if ClearTypeTM in vertical direction bit is on */
        MUL[]           /* Assembler restriction: produce 32768 by multiplying 16384 by 2 (2 in F26.6 is 128) */
        #PUSH,256       /* 256 = tell GETINFO to give us the ClearTypeTM in vertical direction bit */
        GETINFO[]
        EQ[]            /* 32768 == flag ? */
        IF[]            /* if so, we're running ClearTypeTM in vertical direction */
        #PUSH,2,8,2
          RS[]
          ADD[]
          WS[]          /* s[2] += ClearTypeTM in vertical direction: on (by now) */
        EIF[]

        #PUSH,16384,256 /* 65536 = flag returned by GETINFO if ClearTypeTM in BGR order bit is on */
        MUL[]           /* Assembler restriction: produce 65536 by multiplying 16384 by 4 (4 in F26.6 is 256) */
        #PUSH,512       /* 512 = tell GETINFO to give us the ClearTypeTM in BGR order bit */
        GETINFO[]
        EQ[]            /* 65536 == flag ? */
        IF[]            /* if so, we're running under ClearTypeTM in BGR order */
          #PUSH,2,16,2
          RS[]
          ADD[]
          WS[]          /* s[2] += ClearTypeTM in BGR order: on (by now) */
        EIF[]

        #PUSH,38,1      /* 38 = MS Rasterizer version 1.9 */
        GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
        LTEQ[]          /* 38 &lt;= version ? (already tested version &lt;= 64) */
        IF[]            /* if so, we're running MS rasterizer version 1.9 (Windows Longhorn) or higher */

          #PUSH,16384,512  /* 131072 = flag returned by GETINFO if ClearTypeTM fractional advance widths bit is on */
          MUL[]            /* Assembler restriction: produce 131072 by multiplying 16384 by 8 (8 in F26.6 is 512) */
          #PUSH,1024       /* 1024 = tell GETINFO to give us the ClearTypeTM fractional advance widths bit */
          GETINFO[]
          EQ[]             /* 131072 == flag ? */
          IF[]             /* if so, we're running under ClearTypeTM fractional advance widths */
            #PUSH,2,64,2
            RS[]
            ADD[]
            WS[]           /* s[2] += ClearTypeTM fractional advance widths: on (by now) */
          EIF[]

          #PUSH,16384,1024 /* 262144 = flag returned by GETINFO if ClearTypeTM non-ClearType direction anti-aliasing bit is on */
          MUL[]            /* Assembler restriction: produce 262144 by multiplying 16384 by 16 (16 in F26.6 is 1024) */
          #PUSH,2048       /* 2048 = tell GETINFO to give us the ClearTypeTM non-ClearType direction anti-aliasing bit */
          GETINFO[]
          EQ[]             /* 262144 == flag ? */
          IF[]             /* if so, we're running under ClearTypeTM non-ClearType direction anti-aliasing */
            #PUSH,2,128,2
            RS[]
            ADD[]
            WS[]           /* s[2] += ClearTypeTM non-ClearType direction anti-aliasing: on (by now) */
          EIF[]

          #PUSH,40,1      /* 40 = Rasterizer v2.1 Windows 8, SubPixel */
          GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
          LTEQ[]          /* 40 &lt;= version ? (already tested version &lt;= 64) */
          IF[]            /* if so, we're running MS rasterizer version 2.1 (Windows 8) or higher */
            #PUSH,16384,2048 /* 524288 = flag returned by GETINFO if ClearTypeTM non-ClearType direction anti-aliasing bit is on */
            MUL[]            /* Assembler restriction: produce 524288 by multiplying 16384 by 32 (32 in F26.6 is 2048) */
            #PUSH,4096       /* 4096 = tell GETINFO to give us the ClearTypeTM gray full-pixel rendering bit */
            GETINFO[]
            EQ[]             /* 524288 == flag ? */
            IF[]             /* if so, we're running under ClearTypeTM gray full-pixel rendering */
            #PUSH,2,256,2
              RS[]
              ADD[]
              WS[]           /* s[2] += ClearTypeTM gray full-pixel rendering: on (by now) */
            EIF[]
          EIF[]

        EIF[] /* Vista or greater rasterizer */

      EIF[] /* Windows ClearType (Platt) */

    EIF[] /* ClearType Enabled */
  EIF[] /* ClearType enabled rasterizer */
EIF[] /* Microsoft Rasterizer */

/* store rasterizing environment specific parameters */

#PUSH, 0, 2
RS[]
EQ[]
IF[] /* for b&amp;w */
  #PUSH, 5, 64, 8, 64, 9, 64, 12, 2, 13, 2
ELSE[]
  #PUSH, 1, 2
  RS[]
  EQ[]
  IF[] /* for grey-scaling */
    #PUSH, 5, 64, 8, 256, 9, 256, 12, 1, 13, 1
  ELSE[]
    #PUSH, 128, 2
    RS[]
    GT[]
    IF[] /* for ClearType */
      #PUSH, 5, 64, 8, 384, 9, 64
    ELSE[] /* for y-anti-aliased ClearType */
      #PUSH, 256, 2
      RS[]
      GT[]
      IF[] /* Gray ClearType */
        #PUSH, 5, 64, 8, 384, 9, 320
      ELSE[] /* Gray ClearType */
        #PUSH, 384, 2
        RS[]
        GT[]
        IF[] /* Gray ClearType */
          #PUSH, 5, 64, 8, 512, 9, 64
        ELSE[] /* Gray ClearType y-anti-aliased */
          #PUSH, 5, 64, 8, 256, 9, 256
        EIF[]
      EIF[]
    EIF[]

    #PUSH,16384,128 /* b&amp;w aw? */
    GETINFO[]
    NEQ[]
    #PUSH,16384,512 /* fract aw? */
    MUL[]
    #PUSH,1024
    GETINFO[]
    NEQ[]
    AND[]
    IF[] /* natural widths */
      #PUSH, 12, 0, 13, 1
    ELSE[] /* compatible or fractional widths */
      #PUSH, 12, 0, 13, 1
    EIF[]

  EIF[]
EIF[]

WS[]
WS[]
WS[]
WS[]
WS[]

#PUSHON
#END
ENDF[]

FDEF[], 85

/* fn 85 equalizes double specified heights below a given ppem size

   CALL[], &lt;rel cvt&gt;, &lt;ppem size&gt;, &lt;abs cvt&gt;, 85 */
   /* Version 2.0 20141201 */

#BEGIN
#PUSHOFF

/* STACK: &lt;rel cvt&gt;, &lt;ppem size&gt;, &lt;abs cvt&gt; */

RCVT[] /* pick absolute (square) height */
#PUSH, 2, 78 /* 2 appears to work for heights and weights */
CALL[]
SWAP[]

/* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;ppem size&gt; */

#PUSH, 79 /* #samples/pixel */
CALL[]
DUP[]
#PUSH, 64
LTEQ[]
IF[] /* #samples/pixel = 1 (or less...) */

    /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;ppem size&gt;, &lt;#samples/pixel&gt; */

    POP[]
    MPPEM[]
    LTEQ[] /* specified ppem size &lt;= actual ppem size ? */
    IF[]

        /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt; */

        #PUSH, 2
        CINDEX[]
        RCVT[] /* pick relative height (overshoot) */
        #PUSH, 1, 78
        CALL[]
        ADD[] /* add overshoot to square height */

        /* STACK: &lt;rel cvt&gt;, &lt;[rel cvt] + [abs cvt]&gt; */

    EIF[]

ELSE[] /* #samples/pixel &gt; 1 */

    /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;ppem size&gt;, &lt;#samples/pixel&gt; */

    SWAP[]
    MPPEM[]
    LTEQ[] /* specified ppem size &lt;= actual ppem size */
    IF[]

      /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;#samples/pixel&gt; */

      #PUSH, 3 /* rel cvt */
      CINDEX[]
      RCVT[]
      DUP[]
      ABS[]
      ROLL[]
      MUL[]
      #PUSH, 64

      /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;[rel cvt]&gt;, &lt;|[rel cvt]| * #samples/pixel&gt;, &lt;1&gt; */

      GTEQ[] /* #samples/pixel greater than or equal to 1 pixel */
      IF[]

          /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;[rel cvt]&gt; */

          #PUSH, 2, 78
          CALL[]
          ADD[] /* add overshoot to square height */

          /* STACK: &lt;rel cvt&gt;, &lt;[rel cvt] + [abs cvt]&gt; */

      ELSE[]

          /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;[rel cvt]&gt; */

          POP[]

          /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt; */

      EIF[]
    ELSE[]
          /* STACK: &lt;rel cvt&gt;,&lt;abs cvt&gt;,&lt;#samples/pixel&gt;*/
          POP[]
          /* STACK: &lt;rel cvt&gt;,&lt;abs cvt&gt;*/
    EIF[]

EIF[]

/* STACK: &lt;rel cvt&gt;, &lt;[act cvt]&gt; */

WCVTP[] /* make this the round height */
#PUSHON
#END
ENDF[]

FDEF[], 86

/* function to naturally space an accent above or below a base character

   CALL[], &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;distance&gt;, 86

   convert distance (fUnits) to pixels, round, and space child from parent by result
   this essentially implements the functionality of an MDRP[m&gt;RWh] instrunction for
   composites which lack a suitable implementation of "original" coordinates.
   roundMethod 0, 1, 2, and 3 round down to, to, up to, and to half virtual grid
   function assumes cvt #20 is reserved and can be used temporarily in here... 
   storage 16 contains a threshold ppem size. if zero, ignore the threshold, otherwise
   if less than or equal to threshold, use 64 (26.6) #samples/pixel. */

#BEGIN
#PUSHOFF

/* extract the sign from distance */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;distance&gt; */

DUP[]
#PUSH, 0
LT[]
DUP[]
IF[]
    SWAP[]
    NEG[]
ELSE[]
    SWAP[]
EIF[]

/* scale distance using reserved cvt */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;negDist?&gt;, &lt;|distance|&gt; */

#PUSH, 20, 20 /* reserved cvt */
ROLL[]
WCVTF[]
RCVT[]

/* determine if we are using a size threshold */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;negDist?&gt;, &lt;|distance|'&gt; */

#PUSH, 16, 16 /* reserved storage for threshold */
RS[]
MPPEM[]
ROLL[]
RS[]
LTEQ[]
AND[] /* threshold must not be zero and &lt;= ppem */
IF[]
    #PUSH, 64 /* #samples/pixel = 1 */
ELSE[]
/* round per round method and #samples/pixel in current pv */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;negDist?&gt;, &lt;|distance|'&gt; */

#PUSH, 79 /* #samples/pixel */
CALL[]
EIF[]

SWAP[]
#PUSH, 97, 6 /* round to virtual grid, roundMethod */
MINDEX[]
ADD[]
CALL[] /* round to virtual grid */

/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;minDist?&gt;, &lt;negDist?&gt;, &lt;[|distance|']&gt; */

/* apply minimum distance, if applicable */
ROLL[]
IF[]
    #PUSH, 5 /* minimum distance */
    RS[]
    MAX[]
EIF[]

/* fold the sign back into distance */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;negDist?&gt; &lt;[|distance|']&gt; */

SWAP[]
IF[]
    NEG[]
EIF[]

/* move child by [distance'] */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;[distance']&gt; */

SWAP[]
SRP0[]
MSIRP[m]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 87

/* fn places an accent &lt;c0&gt; &lt;c1&gt; on top of a base character &lt;p0&gt; &lt;p1&gt;
   fn uses the same constraint model as fn 111 (interpolate median),
   except that for composites there is no concept of original coordinates,
   hence the respective values are provided by the caller as &lt;partialFactor&gt;

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, &lt;partialFactor&gt;, 87 */

#BEGIN
#PUSHOFF

/* partialFactor: ((c0 + c1)/2 - p0)/(p1 - p0)
   target median: ((c0 + c1)/2 - p0)*(p1' - p0')/(p1 - p0)&gt; + p0' = partialFactor*(p1' - p0')
   source median: (c0' + c1')/2
   primed coordinates are [N]ew, other coordinates are [O]riginal */

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;p0&gt;, &lt;partialFactor&gt;, &lt;p1&gt; */

#PUSH, 3 /* p0 */
CINDEX[]
MD[N]
MUL[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;p0&gt;, &lt;((c0 + c1)/2 - p0)*(p1' - p0')/(p1 - p0)&gt; */

SWAP[] /* p0 */
GC[N]
ADD[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;targetMedian&gt; */

#PUSH, 79 /* #samples/pixel */
CALL[]
SWAP[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;#samples/pixel&gt;, &lt;targetMedian&gt; */

#PUSH, 4 /* c0 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
MD[N]
#PUSH, 3 /* #samples/pixel */
CINDEX[]
MUL[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;#samples/pixel&gt;, &lt;targetMedian&gt;, &lt;numVirtualPixels&gt; */

ODD[]
DUP[]
ADD[]
#PUSH, 98
ADD[]
CALL[] /* round to (half) virtual grid */

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;[targetMedian]&gt; */

#PUSH, 3 /* c0 */
CINDEX[]
DUP[]
SRP0[]
GC[N]
ROLL[] /* c1 */
GC[N]
ADD[]
#PUSH, 32
MUL[]

/* STACK: &lt;c0&gt;, &lt;targetMedian&gt;, &lt;sourceMedian&gt; */

SUB[]

/* STACK: &lt;c0&gt;, &lt;offset&gt; */

MSIRP[m]

#PUSHON
#END
ENDF[]

FDEF[], 88

/* set up storage locations with the x and y components
   of the italic and adjusted italic angles as follows:

     s[ 6] = adjusted italic angle y
     s[ 7] = adjusted italic angle x
     s[10] = italic angle y
     s[11] = italic angle x

   while rendering in b&amp;w, determines the optimal phase
   for positioning italic strokes

     s[ 4] = optimal phase

   CALL[], &lt;riseCvt&gt;, &lt;runCvt&gt;, 88 */

#BEGIN
#PUSHOFF

/* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */

#PUSH, 0 /* Use twilight points to calculate stroke angles */
SZPS[]

#PUSH, 2, 3 /* riseCvt */
CINDEX[]
#PUSH, 1, 4 /* runCvt */
CINDEX[]

/* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt;, &lt;2&gt;, &lt;riseCvt&gt;, &lt;1&gt;, &lt;runCvt&gt; */

SVTCA[X] /* Set twilight point 1 with italic run cvt in x */
MIAP[r]

SVTCA[Y] /* Set twilight point 2 with italic rise cvt in y */
MIAP[r]

#PUSH, 1, 2 /* and let the rasterizer do the math */
SPVTL[r]
GPV[]

#PUSH, 10 /* store the x and y components of the italic angle */
SWAP[]
NEG[]     /* notice that since we're essentially setting the pv to a line  */
WS[]      /* from (runCvt,0) to (0,riseCvt), the calculcated pv will be    */
#PUSH, 11 /* proportional to (runCvt,0) - (0,riseCvt) = (runCvt,-riseCvt). */
SWAP[]    /* Hence we have to mirror the result at the base line, which is */
WS[]      /* done by flipping (negating) the sign of the y component here. */

/* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */

#PUSH, 2, 3 /* riseCvt */
CINDEX[]
#PUSH, 1, 4 /* runCvt */
CINDEX[]

SVTCA[X] /* same for the adjusted italic angle */
MIAP[R]  /* except to round the twilight point in x... */

SVTCA[Y]
MIAP[R]  /* ...and in y */

#PUSH, 1, 2
SPVTL[r]
GPV[]

#PUSH, 6
SWAP[]
NEG[]    /* same neg as above */
WS[]
#PUSH, 7
SWAP[]
WS[]

#PUSH, 1 /* restore graphics state */
SZPS[]

/* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */

#PUSH, 0, 2
RS[]
EQ[]
IF[] /* running b&amp;w? */

    /* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */
    /* determine adjusted run' = run*[rise]/rise */

    RCVT[]
    SWAP[]
    RCVT[]
    DUP[]
    RTG[]
    ROUND[Bl]
    ROLL[]
    MUL[]
    SWAP[]
    DIV[]

    /* STACK: &lt;run'&gt; */
    /* determine phase = (run' - [run'])/2 = half the rounding error */

    DUP[]
    DUP[]
    #PUSH, 64
    LT[]
    IF[]
        CEILING[] /* optimize for "minimum italic angle" */
    ELSE[]
        FLOOR[] /* optimize for minimal number of jaggies */
    EIF[]
    SUB[]
    #PUSH, 32
    MUL[]

    /* STACK: &lt;phase&gt; */
    /* for its use on bottom italic edge, determine complement to full pixel */

    #PUSH, 64
    SWAP[]
    SUB[]

    /* and store in s[4] */

    #PUSH, 4
    SWAP[]
    WS[]

    /* STACK: */

ELSE[]

    /* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */

    #PUSH, 4, 0
    WS[]
    POP[]
    POP[]

    /* STACK: */

EIF[]

RTG[]
SVTCA[X]

#PUSHON
#END
ENDF[]

FDEF[], 89

/* function rounds &lt;cvt&gt; depending on rendering environment and pv

   CALL[], &lt;cvt&gt;, 89 */

#BEGIN
#PUSHOFF

DUP[]
RCVT[]
#PUSH, 0, 78 /* roundDist */
CALL[]
WCVTP[]

#PUSHON
#END
ENDF[]

FDEF[], 90

/* below &lt;ppem&gt;: make both children the same as the (averaged) parent cvt
   at and above: calculate child cvt &lt;ch0&gt; as &lt;fraction&gt; of child cvt &lt;ch1&gt;

   CALL[], &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;ch1&gt;, &lt;ppem&gt;, 90 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;ch1&gt;, &lt;ppem&gt; */

MPPEM[]
LTEQ[]
#PUSH, 64, 79 /* #samples/pixel */
CALL[]
LT[]
OR[]
IF[] /* at or above ppem limit or rounding to less than a pixel */ 

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;ch1&gt; */

    DUP[]
    RCVT[]
    #PUSH, 1, 78 /* roundDist */
    CALL[]
    DUP[]
    ROLL[]
    ROLL[]

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;[ch1]&gt;, &lt;ch1&gt;, &lt;[ch1]&gt; */

    WCVTP[]

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;[ch1]&gt; */

    DUP[]
    #PUSH, 64, 4
    MINDEX[]
    SUB[]
    MUL[]
    SUB[]
    #PUSH, 1, 78 /* roundDist */
    CALL[]

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;[ch1] - [ch1]*(1-fraction)&gt; */

    WCVTP[]
    POP[] /* parent not involved */

    /* STACK: */

ELSE[]

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;ch1&gt; */

    SWAP[]
    POP[] /* fraction not involved */

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;ch1&gt; */

    ROLL[]
    RCVT[]
    #PUSH, 1, 78 /* roundDist */
    CALL[]

    /* STACK: &lt;ch0&gt;, &lt;ch1&gt;, &lt;[p]&gt; */

    DUP[]
    ROLL[]
    SWAP[]

    /* STACK: &lt;ch0&gt;, &lt;[p]&gt;, &lt;ch1&gt;, &lt;[p]&gt; */

    WCVTP[]
    WCVTP[]

    /* STACK: */

EIF[]

#PUSHON
#END
ENDF[]

FDEF[], 91

/* below &lt;ppem&gt;: make child cvt &lt;ch&gt; the same as parent cvt &lt;p&gt;
   at and above: calculate child cvt &lt;ch&gt; as &lt;fraction&gt; of parent cvt &lt;p&gt;

   CALL[], &lt;ch&gt;, &lt;fraction&gt;, &lt;p&gt;, &lt;ppem&gt;, 91 */

#BEGIN
#PUSHOFF

/* STACK: &lt;ch&gt;, &lt;fraction&gt;, &lt;p&gt;, &lt;ppem&gt; */

MPPEM[]
LTEQ[]
#PUSH, 64, 79 /* #samples/pixel */
CALL[]
LT[]
OR[]
IF[] /* at or above ppem limit or rounding to less than a pixel */ 

    /* STACK: &lt;ch&gt;, &lt;fraction&gt;, &lt;p&gt; */

    RCVT[]
    DUP[]
    ROLL[]

    /* STACK: &lt;ch&gt;, &lt;[p]&gt;, &lt;[p]&gt;, &lt;fraction&gt; */

    #PUSH, 64
    SUB[]
    MUL[]
    ADD[]

    /* STACK: &lt;ch&gt;, &lt;[p] + [p]*(fraction - 1)&gt; */

ELSE[]

    /* STACK: &lt;ch&gt;, &lt;fraction&gt;, &lt;p&gt; */

    SWAP[]
    POP[] /* fraction not involved */

    RCVT[]

    /* STACK: &lt;ch&gt;, [p] */

EIF[]

#PUSH, 1, 78 /* roundDist */
CALL[]
WCVTP[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 92

/* function to calculate a child cvt &lt;ch&gt;
   as a &lt;blend&gt; of two parent cvts &lt;p0&gt;, &lt;p1&gt;

   CALL[], &lt;ch&gt;, &lt;blend&gt;, &lt;p0&gt;, &lt;p1&gt;, 92 */

#BEGIN
#PUSHOFF

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;p0&gt;, &lt;p1&gt; */

SWAP[]
RCVT[]
DUP[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;p1&gt;, &lt;[p0]&gt;, &lt;[p0]&gt; */

ROLL[]
RCVT[]

SWAP[]
SUB[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt; */

DUP[]
ABS[]
#PUSH, 64
LTEQ[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;contrast &lt;= 1 pixel(s)?&gt; */

#PUSH, 4
CINDEX[]
DUP[]
#PUSH, 0
GTEQ[]
SWAP[]
#PUSH, 64
LTEQ[]
AND[]

AND[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;contrast &lt;= 1 pixel(s) &amp;&amp; blend &gt;= 0 &amp;&amp; blend &lt;= 64?&gt; */

#PUSH, 64, 79 /* #samples/pixel */
CALL[]
EQ[]

AND[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;contrast &lt;= 1 pixel(s) &amp;&amp; blend &gt;= 0 &amp;&amp; blend &lt;= 64 &amp;&amp; rounding to full pixel?&gt; */

IF[]

    /* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt; */

    ROLL[]
    GPV[]
    ABS[]
    SWAP[]
    ABS[]
    SWAP[]

    /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt;, &lt;|pv.x|&gt;, &lt;|pv.y|&gt; */

    GTEQ[] /* pv closer to x? */
    IF[]

        /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt; */
        /* bias towards p1: blend' := 1 - (1 - blend)² */

        #PUSH, 64, 64
        ROLL[]
        SUB[]
        DUP[]
        MUL[]
        SUB[]

        /* &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;1 - (1 - blend)²&gt; */

    ELSE[]

        /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt; */
        /* bias towards p0: blend' := blend² */

        DUP[]
        MUL[]

    /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend²&gt; */

    EIF[]

ELSE[]

    /* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt; */
    /* use unbiased blend */

    ROLL[]

    /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt; */

EIF[]

/* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt; */

MUL[]
#PUSH, 2, 78 /* roundDist */
CALL[]
ADD[]

/* STACK: &lt;ch&gt;, &lt;[ch]&gt; */

WCVTP[]

#PUSHON
#END
ENDF[]

FDEF[], 93

/* fn sets vectors to X (used in calculated calls)

   CALL[], 93 */

#BEGIN
#PUSHOFF
SVTCA[X]
#PUSHON
#END
ENDF[]

FDEF[], 94

/* fn sets vectors to Y (used in calculated calls)

   CALL[], 94 */

#BEGIN
#PUSHOFF
SVTCA[Y]
#PUSHON
#END
ENDF[]

FDEF[], 95

/* Set fv to X, pv perpendicular to italic angle (used in calculated calls)

   CALL[], 95 */

#BEGIN
#PUSHOFF
SFVTCA[X]
#PUSH, 11, 10
RS[]
SWAP[]
RS[]
NEG[]
SPVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 96

/* Set fv to italic angle, pv to Y (used in calculated calls)

   CALL[], 96 */

#BEGIN
#PUSHOFF
#PUSH, 10, 11
RS[]
SWAP[]
RS[]
SFVFS[]
SPVTCA[Y]
#PUSHON
#END
ENDF[]

FDEF[], 97

/* round down to virtual grid

   CALL[], &lt;#samples/pixel&gt;, &lt;argument&gt;, 97

   returns with rounded argument on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;#samples/pixel&gt;, &lt;argument&gt; */
/* upscale argument by #samples/pixel */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
MUL[]

/* do the rounding in upscaled domain */

FLOOR[] /* round down to super grid */

/* Downscaling uses a DIV[] operation, which is implemented as floor(numerator/denominator).
   For round(numerator/denominator) instead, add ½ denominator to numerator before dividing.
   But since the division in 26.6 has to multiply the numerator by 2^6 (64) before dividing,
   we have to divide said ½ denominator by 64 before adding, hence the 8192 (= 128 in 26.6). */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
#PUSH, 8192
DIV[]
ADD[]

/* downscale rounded and adjusted argument */

SWAP[] /* #samples/pixel */
DIV[]

/* STACK: &lt;[argument]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 98

/* round to virtual grid

   CALL[], &lt;#samples/pixel&gt;, &lt;argument&gt;, 98

   returns with rounded argument on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;#samples/pixel&gt;, &lt;argument&gt; */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
MUL[]

/* do the rounding in upscaled domain */

#PUSH, 32 /* round to super grid */
ADD[]
FLOOR[]

/* see above for adjustments below */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
#PUSH, 8192
DIV[]
ADD[]

/* downscale rounded and adjusted argument */

SWAP[] /* #samples/pixel */
DIV[]

/* STACK: &lt;[argument]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 99

/* round up to virtual grid

   CALL[], &lt;#samples/pixel&gt;, &lt;argument&gt;, 99

   returns with rounded argument on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;#samples/pixel&gt;, &lt;argument&gt; */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
MUL[]

/* do the rounding in upscaled domain */

CEILING[] /* round up to super grid */

/* see above for adjustments below */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
#PUSH, 8192
DIV[]
ADD[]

/* downscale rounded and adjusted argument */

SWAP[] /* #samples/pixel */
DIV[]

/* STACK: &lt;[argument]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 100

/* round to half virtual grid

   CALL[], &lt;#samples/pixel&gt;, &lt;argument&gt;, 100

   returns with rounded argument on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;#samples/pixel&gt;, &lt;argument&gt; */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
MUL[]

/* do the rounding in upscaled domain */

FLOOR[]
#PUSH, 32 /* round to half super grid */
ADD[]

/* see above for adjustments below */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
#PUSH, 8192
DIV[]
ADD[]

/* downscale rounded and adjusted argument */

SWAP[] /* #samples/pixel */
DIV[]

/* STACK: &lt;[argument]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 101

/* determine actual distance to be used for emulating MDRP[&lt;]
   instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, 101

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

SWAP[]
MD[O]

/* round without minDist */

#PUSH, 2, 78 /* roundDist */
CALL[]

/* STACK: &lt;[w]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 102

/* determine actual distance to be used for emulating MDRP[&gt;]
   instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, 102

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

SWAP[]
MD[O]

/* round with minDist */

#PUSH, 1, 78 /* roundDist */
CALL[]

/* STACK: &lt;[w]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 103

/* determine actual distance to be used for emulating MIRP[&lt;]
   instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 103

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */

SWAP[] /* c */
ROLL[] /* p */
MD[O]
SWAP[] /* cvt */

/* STACK: &lt;wNat&gt;, &lt;cvt&gt; */
/* do cvt cut-in test */

RCVT[]
ABS[]
#PUSH, 2
CINDEX[]
ABS[]
#PUSH, 2
CINDEX[]
SUB[]
ABS[]
#PUSH, 3 /* cvt cut-in */
RS[]

/* STACK: &lt;wNat&gt;, &lt;|wCvt|&gt;, &lt;||wNat| - |wCvt||&gt;, &lt;cvt cut-in&gt; */

GT[]
IF[]

    /* STACK: &lt;wNat&gt;, &lt;|wCvt|&gt; */
    /* cvt cut-in test failed */

    POP[]
    DUP[]
    ABS[]

    /* else cvt cut-in test succeeded */

EIF[]

/* STACK: &lt;wNat&gt;, &lt;|w|&gt; */
/* round without minDist */

#PUSH, 2, 78 /* roundDist */
CALL[]

/* STACK: &lt;wNat&gt;, &lt;[w]&gt; */
/* inherit sign from wNat */

SWAP[]
#PUSH, 0
LT[]
IF[]
    NEG[]
EIF[]

/* STACK: &lt;[w]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 104

/* determine actual distance to be used for emulating MIRP[&gt;]
   instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 104

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */

SWAP[] /* c */
ROLL[] /* p */
MD[O]
SWAP[] /* cvt */

/* STACK: &lt;wNat&gt;, &lt;cvt&gt; */
/* do cvt cut-in test */

RCVT[]
ABS[]
#PUSH, 2
CINDEX[]
ABS[]
#PUSH, 2
CINDEX[]
SUB[]
ABS[]
#PUSH, 3 /* cvt cut-in */
RS[]

/* STACK: &lt;wNat&gt;, &lt;|wCvt|&gt;, &lt;||wNat| - |wCvt||&gt;, &lt;cvt cut-in&gt; */

GT[]
IF[]

    /* STACK: &lt;wNat&gt;, &lt;|wCvt|&gt; */
    /* cvt cut-in test failed */

    POP[]
    DUP[]
    ABS[]

    /* else cvt cut-in test succeeded */

EIF[]

/* STACK: &lt;wNat&gt;, &lt;|w|&gt; */
/* round with minDist */

#PUSH, 1, 78 /* roundDist */
CALL[]

/* STACK: &lt;wNat&gt;, &lt;[w]&gt; */
/* inherit sign from wNat */

SWAP[]
#PUSH, 0
LT[]
IF[]
    NEG[]
EIF[]

/* STACK: &lt;[w]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 105

/* emulate MDRP[&lt;] instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, 105 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

DUP[] /* c */
#PUSH, 3 /* p */
CINDEX[]
MD[O]
#PUSH, 2, 78 /* roundDist */
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;[dist]&gt; */

ROLL[]
SRP0[]
MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 106

/* emulate MDRP[&gt;] instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, 106 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

DUP[] /* c */
#PUSH, 3 /* p */
CINDEX[]
MD[O]
#PUSH, 1, 78 /* roundDist */
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;[dist]&gt; */

ROLL[]
SRP0[]
MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 107

/* emulate MIRP[&lt;] instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 107 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */

#PUSH, 3 /* p */
CINDEX[]
#PUSH, 3 /* c */
CINDEX[]
ROLL[] /* cvt */
#PUSH, 103 /* resActDist, cvt, noMinDist */
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;[dist]&gt; */

ROLL[]
SRP0[]
MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 108

/* emulate MIRP[&gt;] instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 108 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */

#PUSH, 3 /* p */
CINDEX[]
#PUSH, 3 /* c */
CINDEX[]
ROLL[] /* cvt */
#PUSH, 104 /* resActDist, cvt, minDist */
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;[dist]&gt; */

ROLL[]
SRP0[]
MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 109

/* fn symmetrically constrains a stroke &lt;p&gt;, &lt;c&gt; with &lt;cvt&gt;

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 109 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */
/* determine old median */

#PUSH, 3 /* &lt;p&gt; */
CINDEX[]
GC[N]
#PUSH, 3 /* &lt;c&gt; */
CINDEX[]
GC[N]
ADD[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, &lt;2*median&gt; */
/* lock parent */

#PUSH, 4 /* p */
CINDEX[]
MDAP[r]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, &lt;2*median&gt; */
/* link child */

#PUSH, 4 /* p */
CINDEX[]
#PUSH, 4 /* c */
CINDEX[]
#PUSH, 4 /* cvt */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;2*median&gt; */
/* determine new median */

#PUSH, 3 /* &lt;p&gt; */
CINDEX[]
GC[N]
#PUSH, 3 /* &lt;c&gt; */
CINDEX[]
GC[N]
ADD[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;2*median&gt;, &lt;2*median'&gt; */

SUB[]
#PUSH, 128
DIV[] /* floor to 1/64 for now */

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;deltaMedian&gt; */

DUP[]
ROLL[]
DUP[]
SRP0[]
SWAP[]
MSIRP[m]
SWAP[]
DUP[]
SRP0[]
SWAP[]
MSIRP[m]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 110

/* calculate offset for emulation of interpolation of median of
   &lt;c0&gt; and &lt;c1&gt; between parents &lt;p0&gt; and &lt;p1&gt; using current pv and fv

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, 110

   returns with offset on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt; */

#PUSH, 3 /* c0 */
CINDEX[]
GC[O]
#PUSH, 3 /* c1 */
CINDEX[]
GC[O]
ADD[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, &lt;c0 + c1&gt; */

#PUSH, 5 /* p0 */
CINDEX[]
GC[O]
#PUSH, 128
MUL[]
SUB[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, &lt;c0 + c1 - 2*p0&gt; */

#PUSH, 2 /* p1 */
CINDEX[]
#PUSH, 6 /* p0 */
CINDEX[]
MD[N]
MUL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, &lt;(c0 + c1 - 2*p0)*(p1' - p0')&gt; */

SWAP[] /* p1 */
#PUSH, 5 /* p0 */
CINDEX[]
MD[O]
#PUSH, 128
MUL[]

/* prevent inadvertent divide-by-zero e.g. on non-spacing glyphs */
DUP[]
IF[]
    DIV[]
ELSE[]
    POP[]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;(c0 + c1 - 2*p0)*(p1' - p0')/(2*(p1 - p0))&gt; */

#PUSH, 4 /* p0 */
MINDEX[]
GC[N]
ADD[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;(c0'' + c1'')/2&gt; */

ROLL[] /* c0 */
GC[N]
ROLL[] /* c1 */
GC[N]
ADD[]
#PUSH, 32
MUL[]

/* STACK: &lt;(c0'' + c1'')/2&gt;, &lt;(c0' + c1')/2&gt; */

SUB[]

/* STACK: &lt;offset&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 111

/* emulate interpolation of median of &lt;c0&gt; and &lt;c1&gt;
   between parents &lt;p0&gt; and &lt;p1&gt; using current pv and fv

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, 111 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt; */

#PUSH, 4 /* p0 */
MINDEX[]
#PUSH, 4 /* c0 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
#PUSH, 4 /* p1 */
MINDEX[]
#PUSH, 110 /* calc offset for interpolation of median */
CALL[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;offset&gt; */

DUP[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;offset&gt;, &lt;offset&gt; */

ROLL[]
DUP[]
SRP0[]
SWAP[]

/* STACK: &lt;c0&gt;, &lt;offset&gt;, &lt;c1&gt;, &lt;offset&gt; */

MSIRP[m]

SWAP[]
DUP[]
SRP0[]
SWAP[]

/* STACK: &lt;c0&gt;, &lt;offset&gt; */

MSIRP[m]

#PUSHON
#END
ENDF[]

FDEF[], 112


/* adjust (unrounded) stroke phase to target phase according to &lt;method&gt;

   method 0: round to nearest virtual pixel
   method 1: apply method 2 below 2 pixel wide strokes else method 0
   method 2: optimize for max #black pixels
   method 3: optimize for one edge aligned

   right?: boolean indicating a left (false) or right (true) stroke)

   CALL[], &lt;phase&gt;, &lt;weight&gt;, &lt;method&gt;, &lt;right?&gt;, 112

   returns with (rounded) adjusted phase on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;phase&gt;, &lt;weight&gt;, &lt;method&gt;, &lt;right?&gt; */

SWAP[]

DUP[]
#PUSH, 1
EQ[]
IF[]

    /* STACK: &lt;phase&gt;, &lt;weight&gt;, &lt;right?&gt;, &lt;method&gt; */
    /* replace method depending on stroke weight */

    POP[]
    #PUSH, 2 /* weight */
    CINDEX[]
    #PUSH, 2, 78 /* roundDist */
    CALL[]
    #PUSH, 128
    LT[]
    DUP[]
    ADD[]
EIF[]

DUP[]
ADD[]
ADD[]

/* STACK: &lt;phase&gt;, &lt;weight&gt;, &lt;method' = 2*method + right&gt; */

DUP[]
#PUSH, 1
LTEQ[]
IF[] /* just round to nearest virtual pixel */

    POP[]
    POP[]

    /* STACK: &lt;phase&gt; */

ELSE[]
    DUP[]
    #PUSH, 5
    LTEQ[]
    IF[] /* optimize for max #black pixels */

        POP[]

        /* STACK: &lt;phase&gt;, &lt;weight&gt; */

        DUP[]
        FLOOR[]
        SUB[]

        /* STACK: &lt;phase&gt;, &lt;fractWeight&gt; */

        #PUSH, 64
        SWAP[]
        SUB[]

        /* STACK: &lt;phase&gt;, &lt;1-fractWeight&gt; */

        #PUSH, 0, 3 /* phase */
        CINDEX[]
        LT[]
        #PUSH, 3 /* phase */
        CINDEX[]
        #PUSH, 3 /* 1-fractWeight */
        CINDEX[]
        LT[]
        AND[]
        IF[] /* if 0 &lt; phase &lt; 1-fractWeight then need to adjust phase */

            /* STACK: &lt;phase&gt;, &lt;1-fractWeight&gt; */

            DUP[]
            #PUSH, 3
            CINDEX[]
            SUB[]

            /* STACK: &lt;phase&gt;, &lt;1-fractWeight&gt;, &lt;1-fractWeight-phase&gt; */

            ROLL[]
            GTEQ[]
            IF[] /* error from phase to 1-fractWeight &gt;= error from 0 to phase */
                POP[]
                #PUSH, 0 /* target 0 as phase */
            EIF[]
            /* else target 1-fractWeight as phase, which is what's left on stack */

        ELSE[]

            /* STACK: &lt;phase&gt;, &lt;1-fractWeight&gt; */

            POP[]

        EIF[]

    ELSE[] /* optimize for one edge aligned */

        /* STACK: &lt;phase&gt;, &lt;weight&gt;, &lt;method'&gt; */

        #PUSH, 7
        EQ[]
        IF[] /* right flush */

            /* STACK: &lt;phase&gt;, &lt;weight&gt; */

            DUP[]
            FLOOR[]
            SUB[]

            /* STACK: &lt;phase&gt;, &lt;fractWeight&gt; */

            NEG[]
            SWAP[]
            POP[]

        ELSE[] /* left flush (and default) */

            /* STACK: &lt;phase&gt;, &lt;weight&gt; */

            POP[]
            POP[]
            #PUSH, 0

        EIF[]

    EIF[]

EIF[]

#PUSH, 2, 78 /* roundDist */
CALL[]

/* STACK: phase */

#PUSHON
#END
ENDF[]

FDEF[], 113

/* fn calculates delta phase for optimal position of
   stroke bordered by &lt;p&gt; and &lt;c&gt; according to &lt;method&gt;
   (see fn 112 for definition of method)

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;method&gt;, 113

   returns with delta phase in interval ]-½,+½] on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;method&gt; */

    /* use sequence of parameters &lt;p&gt; and &lt;c&gt; to determine if this is
       a "left" stroke (in which case we may add grey to the right), or
       a "right" stroke (in which case we may add grey to the left) */

#PUSH, 2 /* c */
CINDEX[]
#PUSH, 4 /* p */
CINDEX[]
MD[O]
#PUSH, 0
GTEQ[]
IF[]
    #PUSH, 0 /* "left" stroke */
ELSE[]
    ROLL[]
    ROLL[]
    SWAP[]
    ROLL[]
    #PUSH, 1 /* "right" stroke */
EIF[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;method&gt;, &lt;right?&gt; */

#PUSH, 4 /* p */
CINDEX[]
GC[N]
DUP[]
FLOOR[]
SUB[]
DUP[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;method&gt;, &lt;right?&gt;, &lt;source phase&gt;, &lt;source phase&gt; */

#PUSH, 5 /* c */
MINDEX[]
#PUSH, 6 /* p */
MINDEX[]
MD[N]

/* STACK: &lt;method&gt;, &lt;right?&gt;, &lt;source phase&gt;, &lt;source phase&gt;, &lt;weight&gt; */

#PUSH, 5 /* method */
MINDEX[]
#PUSH, 5 /* right? */
MINDEX[]
#PUSH, 112 /* adjust to target stroke phase */
CALL[]

/* STACK: &lt;source phase&gt;, &lt;target phase&gt; */

SWAP[]
SUB[]

/* STACK: &lt;delta phase&gt; */
/* minimze phase into interval ]-½,+½] */

NEG[]
#PUSH, 32
ADD[]
DUP[]
FLOOR[]
SUB[]
#PUSH, 32
SUB[]
NEG[]

#PUSHON
#END
ENDF[]

FDEF[], 114

/* emulate MIAP instruction with rendering environment specific rounding

   CALL[], &lt;c&gt;, &lt;cvt&gt;, 114 */

#BEGIN
#PUSHOFF

/* STACK: &lt;c&gt;, &lt;cvt&gt; */

#PUSH, 2 /* c */
CINDEX[]
GC[N]
DUP[]

/* STACK: &lt;c&gt;, &lt;cvt&gt;, &lt;wNat&gt;, &lt;wNat&gt; */

ROLL[]
DUP[]
#PUSH, 0
LT[]
IF[]

    /* STACK: &lt;c&gt;, &lt;wNat&gt;, &lt;wNat&gt;, &lt;cvt&gt; */

    POP[]

    /* cvt &lt; 0 (no cvt used) =&gt; w = wNat */
    /* STACK: &lt;c&gt;, &lt;wNat&gt;, &lt;w&gt; */

    #PUSH, 2, 78 /* roundDist */
    CALL[]

ELSE[]

    RCVT[]

    /* STACK: &lt;c&gt;, &lt;wNat&gt;, &lt;wNat&gt;, &lt;wCvt&gt; */
    /* no cvt cut-in test (for eventual support of automatic small caps, superiors, and inferiors), pop wNat to use wCvt */

    SWAP[]
    POP[]

    /* leave value as rounded by cpgm */
    /* STACK: &lt;c&gt;, &lt;wNat&gt;, &lt;w&gt; */

EIF[]

SUB[]
NEG[]

/* STACK: &lt;c&gt;, &lt;wDelta&gt; */

#PUSH, 2
CINDEX[]
SRP0[]

MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 115

/* interpolates a point &lt;p&gt; in &lt;dirFlag&gt; between points &lt;lsb&gt; and &lt;rsb&gt;
   dirFlag: postRoundFlag*8 + dir
   dir: X = 0, Y = 1, X/ = 2, Y/ = 3, ...

   depending on rendering environment and pv may optimise point position

   CALL[], &lt;dirFlag&gt;, &lt;p0&gt;, &lt;c&gt;, &lt;p1&gt;, 115 */

#BEGIN
#PUSHOFF

/* STACK: &lt;dirFlag&gt;, &lt;p0&gt;, &lt;p&gt;, &lt;p1&gt; */
/* separate postRoundFlag from dir */

#PUSH, 4 /* dirFlag */
MINDEX[]
DUP[]
#PUSH, 512
DIV[]
DUP[]
#PUSH, 512
MUL[]
ROLL[]
SWAP[]
SUB[]

/* STACK:, &lt;p0&gt;, &lt;p&gt;, &lt;p1&gt;, &lt;postRoundFlag&gt;, &lt;dir&gt; */

DUP[]
#PUSH, 93 /* setV */
ADD[]
CALL[]

/* STACK: &lt;p0&gt;, &lt;p&gt;, &lt;p1&gt;, &lt;postRoundFlag&gt;, &lt;dir&gt; */

#PUSH, 5 /* p0 */
CINDEX[]
SRP1[]
ROLL[] /* p1 */
SRP2[]
ROLL[] /* p */
DUP[]
IP[]

/* STACK: &lt;p0&gt;, &lt;postRoundFlag&gt;, &lt;dir&gt;, &lt;p&gt; */

ROLL[] /* postRoundFlag */
IF[]

    /* STACK: &lt;p0&gt;, &lt;dir&gt;, &lt;p&gt; */

    #PUSH, 93, 4096, 4 /* setV, 64, dir */
    MINDEX[]
    MUL[]
    ODD[]
    ADD[]
    CALL[]

    /* STACK: &lt;p0&gt;, &lt;p&gt; */

    SWAP[]
    POP[]
    DUP[] /* p */
    SRP0[]
    DUP[]
    GC[N]
    DUP[]
    #PUSH, 2, 78 /* roundDist */
    CALL[]
    SWAP[]
    SUB[]

    /* STACK: &lt;p&gt;, &lt;[p.c]-p.c&gt; */

ELSE[]

    /* STACK: &lt;p0&gt;, &lt;dir&gt;, &lt;p&gt; */

    SWAP[]
    POP[]

    /* STACK: &lt;p0&gt;, &lt;p&gt; */

    DUP[]
    ROLL[]
    DUP[] /* p0 */
    SRP0[]
    MD[N]

    #PUSH, 2, 78 /* roundDist */
    CALL[]

    /* STACK: &lt;p&gt;, &lt;[p.dist]&gt; */

EIF[]

MSIRP[M]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 116

/* constrains a stroke in &lt;dir&gt;, defined by parent &lt;p&gt; and child &lt;c&gt;,
   and by cvt &lt;cvt&gt;, and interpolates it between points &lt;gp0&gt; and &lt;gp1&gt;
   dir: X = 0, Y = 1, X/ = 2
   sof: (stroke optimization flags ||, |&lt;, and &gt;| ) don't = 0, do = 1, leftBias = 2, rightBias = 3

   CALL[], &lt;dir&gt;, &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, &lt;gp1&gt;, &lt;sof&gt;, 116 */

#BEGIN
#PUSHOFF

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, &lt;gp1&gt;, &lt;sof&gt; */

#PUSH, 93, 4096, 9 /* setV, 64, dir */
CINDEX[]
MUL[]
ODD[]
ADD[]
CALL[]

/* constrain stroke */

#PUSH, 5 /* p */
CINDEX[]
#PUSH, 5 /* c */
CINDEX[]
#PUSH, 5 /* cvt */
MINDEX[]
#PUSH, 109 /* symDist */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */

#PUSH, 93, 7 /* setV, dir */
CINDEX[]
ADD[]
CALL[]

#PUSH, 5 /* gp0 */
CINDEX[]
#PUSH, 5 /* p */
CINDEX[]
#PUSH, 5 /* c */
CINDEX[]
#PUSH, 5 /* gp1 */
CINDEX[]
#PUSH, 111 /* interpolate median */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */

#PUSH, 93, 4096, 8 /* setV, 64, dir */
MINDEX[]
MUL[]
ODD[]
ADD[]
CALL[]

/* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */

DUP[]
#PUSH, 0
GT[]
IF[] /* optimize stroke position */

    #PUSH, 80
    CALL[]

    /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt;, &lt;som&gt; */

    #PUSH, 5 /* p */
    CINDEX[]
    #PUSH, 5 /* c */
    CINDEX[]
    #PUSH, 7 /* p */
    CINDEX[]
    #PUSH, 7 /* c */
    CINDEX[]
    #PUSH, 5 /* som */
    CINDEX[]
    #PUSH, 113 /* get delta phase for optimal stroke position */
    CALL[]
    #PUSH, 2
    SLOOP[]
    SHPIX[]

    /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt;, &lt;som&gt; */

    #PUSH, 0
    GT[]
    #PUSH, 2 /* sof */
    CINDEX[]
    #PUSH, 1
    GT[]
    AND[]
    IF[]

        /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */
        /* determine total side-bearing space to see if we need to bias the black body */

        #PUSH, 4 /* p */
        CINDEX[]
        #PUSH, 6 /* gp0 */
        CINDEX[]
        MD[N]
        #PUSH, 3 /* gp1 */
        CINDEX[]
        #PUSH, 5 /* c */
        CINDEX[]
        MD[N]
        ADD[]
        DUP[]
        #PUSH, 64
        GT[]
        IF[]

            /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt;, &lt;totSBS&gt; */
            /* enough total side-bearing space left, leave it alone */
            POP[]

        ELSE[]

            /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt;, &lt;totSBS&gt; */
            /* 1 pixel or less total side-bearing space left */

            #PUSH, 0
            GT[]
            IF[]

                /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */
                /* any total side-bearing space left at all */

                DUP[]
                #PUSH, 2
                EQ[]
                IF[]

                    /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */
                    /* move stroke flush left */

                    #PUSH, 4 /* p */
                    CINDEX[]
                    #PUSH, 4 /* c */
                    CINDEX[]
                    #PUSH, 7 /* gp0 */
                    CINDEX[]
                    #PUSH, 7 /* p */
                    CINDEX[]
                    MD[N]
                    #PUSH, 2
                    SLOOP[]
                    SHPIX[]

                ELSE[]

                    /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */
                    /* move stroke flush left */

                    #PUSH, 4 /* p */
                    CINDEX[]
                    #PUSH, 4 /* c */
                    CINDEX[]
                    #PUSH, 4 /* gp1 */
                    CINDEX[]
                    #PUSH, 6 /* c */
                    CINDEX[]
                    MD[N]
                    #PUSH, 2
                    SLOOP[]
                    SHPIX[]

                EIF[]

            EIF[]

        EIF[]

    EIF[]

EIF[]

/* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */

POP[]
POP[]
POP[]
POP[]
POP[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 117

/* fn tries to place and constrain two strokes &lt;p0,c0,cvt0&gt; and &lt;p1,c1,cvt1&gt;
   between grandparents &lt;gp0&gt; and &lt;gp1&gt; in direction &lt;dir&gt;
   dir: X = 0, Y = 1, X/ = 2
   X/ (italic) is not yet implemented; to do so properly will need to factor
   the italic phase optimization part out of fn 131 and make it available to
   this fn.   

   CALL[], &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, 117 */

#BEGIN
#PUSHOFF

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt; */

#PUSH, 93, 4096, 11 /* setV, dir */
CINDEX[]
MUL[]
ODD[]
ADD[]
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt; */
/* interpolate black body */

#PUSH, 7 /* p0 */
CINDEX[]
#PUSH, 7 /* c0 */
CINDEX[]
#PUSH, 6 /* p1 */
CINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 12 /* gp0 */
CINDEX[]
#PUSH, 12 /* p0 */
CINDEX[]
#PUSH, 9 /* c1 */
CINDEX[]
#PUSH, 8 /* gp1 */
CINDEX[]
#PUSH, 110 /* calc offset for interpolation of median */
CALL[]
#PUSH, 4
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt; */
/* constrain stroke0 */

#PUSH, 7 /* p0 */
CINDEX[]
#PUSH, 7 /* c0 */
CINDEX[]
#PUSH, 7 /* cvt0 */
MINDEX[]
#PUSH, 109 /* symDist */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt; */
/* constrain stroke1 */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
#PUSH, 4 /* cvt1 */
MINDEX[]
#PUSH, 109 /* symDist */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt; */

#PUSH, 80
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
/* determine phase0 for optimal position of stroke0 */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 6 /* c0 */
CINDEX[]
#PUSH, 3 /* som */
CINDEX[]
#PUSH, 113 /* get delta phase for optimal stroke position */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt; */
/* forward to stroke1 position */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 5 /* c1 */
CINDEX[]
#PUSH, 3 /* phase0 */
CINDEX[]
#PUSH, 2
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt; */
/* determine phase1 for optimal position of stroke1 */

DUP[]
#PUSH, 6 /* p1 */
CINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 5 /* som */
CINDEX[]
#PUSH, 113 /* get delta phase for optimal stroke position */
CALL[]
ADD[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt; */
/* undo forwarding to stroke1 position */

#PUSH, 6 /* p1 */
CINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 4 /* phase0 */
CINDEX[]
NEG[]
#PUSH, 2
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt; */
/* determine double average phase error */

#PUSH, 2 /* phase0 */
CINDEX[]
#PUSH, 2 /* phase1 */
CINDEX[]
ADD[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt;, &lt;2*phaseError&gt; */

DUP[]
#PUSH, 64
GTEQ[]
IF[]

    /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt;, &lt;2*phaseError&gt; */
    /* double average phase error &gt;= 1 pixel, correct to the left */

    POP[]
    #PUSH, 64
    SUB[]
    SWAP[]
    #PUSH, 64
    SUB[]
    SWAP[]

ELSE[]

    /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt;, &lt;2*phaseError&gt; */

    #PUSH, -64
    LT[]
    IF[]

        /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt;, &lt;2*phaseError&gt; */
        /* double average phase error &lt; -1 pixel, correct to the right */

        #PUSH, 64
        ADD[]
        SWAP[]
        #PUSH, 64
        ADD[]
        SWAP[]

    EIF[]

EIF[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt; */
/* apply corrected optimal phase0 to stroke0 */

#PUSH, 8 /* p0 */
CINDEX[]
#PUSH, 8 /* c0 */
CINDEX[]
#PUSH, 4 /* phase0 */
MINDEX[]
#PUSH, 2
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase1&gt; */
/* apply corrected optimal phase1 to stroke1 */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 5 /* c1 */
CINDEX[]
ROLL[] /* phase1 */
#PUSH, 2
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */

DUP[]
#PUSH, 0
GT[]
IF[]

    /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
    /* determine total side-bearing space to see if we need to bias the black body */

    #PUSH, 6 /* p0 */
    CINDEX[]
    #PUSH, 8 /* gp0 */
    CINDEX[]
    MD[N]
    #PUSH, 3 /* gp1 */
    CINDEX[]
    #PUSH, 5 /* c1 */
    CINDEX[]
    MD[N]
    ADD[]
    DUP[]
    #PUSH, 64
    GT[]
    IF[]

        /* enough total side-bearing space left, leave it alone */
        POP[]

    ELSE[]

        /* 1 pixel or less total side-bearing space left */
        #PUSH, 0
        GT[]
        IF[]

            /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
            /* any total side-bearing space left at all, move black-body flush left and start over */

            #PUSH, 6 /* p0 */
            CINDEX[]
            #PUSH, 6 /* c0 */
            CINDEX[]
            #PUSH, 6 /* p1 */
            CINDEX[]
            #PUSH, 6 /* c1 */
            CINDEX[]
            #PUSH, 11 /* gp0 */
            CINDEX[]
            #PUSH, 11 /* p0 */
            CINDEX[]
            MD[N]
            #PUSH, 4
            SLOOP[]
            SHPIX[]

            /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
            /* optimize position of stroke0 forwarding phase0 to stroke1 */

            #PUSH, 6 /* p0 */
            CINDEX[]
            #PUSH, 6 /* c0 */
            CINDEX[]
            #PUSH, 6 /* p1 */
            CINDEX[]
            #PUSH, 6 /* c1 */
            CINDEX[]
            #PUSH, 10 /* p0 */
            CINDEX[]
            #PUSH, 10 /* c0 */
            CINDEX[]
            #PUSH, 7 /* som */
            CINDEX[]
            #PUSH, 113 /* get delta phase for optimal stroke position */
            CALL[]
            #PUSH, 4 /* apply to both strokes */
            SLOOP[]
            SHPIX[]

            /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
            /* optimize position of stroke1 */

            #PUSH, 4 /* p1 */
            CINDEX[]
            #PUSH, 4 /* c1 */
            CINDEX[]
            #PUSH, 5 /* c1 */
            CINDEX[]
            #PUSH, 7 /* p1 */
            CINDEX[]
            #PUSH, 5 /* som */
            CINDEX[]
            #PUSH, 113 /* get delta phase for optimal stroke position */
            CALL[]
            #PUSH, 2 /* apply to second stroke only */
            SLOOP[]
            SHPIX[]

        ELSE[]

            /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
            /* no total side-bearing space left, move stroke1 left by 1 pixel */

            #PUSH, 4 /* p1 */
            CINDEX[]
            #PUSH, 4 /* c1 */
            CINDEX[]
            #PUSH, -64, 2
            SLOOP[]
            SHPIX[]

        EIF[]

    EIF[]

EIF[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */

POP[]
POP[]
POP[]
POP[]
POP[]
POP[]
POP[]
POP[]

#PUSHON
#END
ENDF[]

FDEF[], 118

/* fn to set pv perpendicular to p1 and c0' such that distance
   c0'&lt;---p0 measures cvt or natural distance if cvt = -1.
   used as support to ResX|YDDist and ResX|YDLink

   CALL[], &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt&gt;, 118 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt&gt; */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 3 /* c0 */
CINDEX[]
SDPVTL[R]
#PUSH, 3 /* p0 */
CINDEX[]
#PUSH, 3 /* c0 */
CINDEX[]
ROLL[] /* cvt */
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 101 /* resActDist, noCvt, noMinDist */
ELSE[]
    #PUSH, 104 /* resActDist, cvt, minDist */
EIF[]
CALL[]
ABS[]

/* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt; */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 4 /* p0 */
CINDEX[]
SPVTL[r]
#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 4 /* p0 */
CINDEX[]
MD[N]

/* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d&gt; */
/* test if solution exists at all */

DUP[]
DUP[]
MUL[]
#PUSH, 3 /* w */
CINDEX[]
DUP[]
MUL[]
LTEQ[]
#PUSH, 0, 3 /* d */
CINDEX[]
EQ[]
OR[]

/* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d&gt;, &lt;d² &lt;= w² or d = 0?&gt; */

IF[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d&gt; */
    /* solution doesn't exist, hence prepare to bail out */

    POP[]
    POP[]
    SWAP[]
    POP[]
    SPVTL[R]

ELSE[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d&gt; */
    /* solution exists, hence continue computation */

    DUP[]
    MUL[]
    #PUSH, 2 /* w */
    CINDEX[]
    DUP[]
    MUL[]
    SUB[]
    DUP[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d² - w²&gt;, &lt;d² - w²&gt; */

    #PUSH, 83 /* sqrt */
    CALL[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d² - w²&gt;, &lt;sqrt(d² - w²)&gt; */

    ROLL[] /* w */
    MUL[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;d² - w² =: dx&gt;, &lt;w·sqrt(d² - w²) =: dy&gt; */

    #PUSH, 5 /* p1 */
    CINDEX[]
    #PUSH, 5 /* p0 */
    CINDEX[]
    SDPVTL[R]
    #PUSH, 4 /* p0 */
    CINDEX[]
    #PUSH, 4 /* c0 */
    MINDEX[]
    MD[O]

    #PUSH, 0
    LT[]
    IF[]
        NEG[] /* dy */
    EIF[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;dx&gt;, &lt;dy&gt; */

    #PUSH, 4 /* p1 */
    MINDEX[]
    DUP[]
    SVTCA[X]
    GC[N]
    SWAP[]
    SVTCA[Y]
    GC[N]

    /* STACK: &lt;p0&gt;, &lt;dx&gt;, &lt;dy&gt;, &lt;p1.x&gt;, &lt;p1.y&gt; */

    #PUSH, 5 /* p0 */
    MINDEX[]
    DUP[]
    SVTCA[X]
    GC[N]
    SWAP[]
    SVTCA[Y]
    GC[N]

    /* STACK: &lt;dx&gt;, &lt;dy&gt;, &lt;p1.x&gt;, &lt;p1.y&gt;, &lt;p0.x&gt;, &lt;p0.y&gt; */

    #PUSH, 0 /* enter twilight zone */
    SZPS[]

    SVTCA[Y]
    #PUSH, 0
    SWAP[]
    SCFS[]
    SVTCA[X]
    #PUSH, 0
    SWAP[]
    SCFS[]

    /* STACK: &lt;dx&gt;, &lt;dy&gt;, &lt;p1.x&gt;, &lt;p1.y&gt; */

    SVTCA[Y]
    DUP[]
    #PUSH, 1
    SWAP[]
    SCFS[]
    #PUSH, 2
    SWAP[]
    SCFS[]
    SVTCA[X]
    DUP[]
    #PUSH, 1
    SWAP[]
    SCFS[]
    #PUSH, 2
    SWAP[]
    SCFS[]

    /* STACK: &lt;dx&gt;, &lt;dy&gt; */

    SWAP[]

    /* STACK: &lt;dy&gt;, &lt;dx&gt; */

    #PUSH, 2, 0, 1
    SFVTL[r]
    SWAP[]
    SHPIX[]

    /* STACK: &lt;dy&gt; */

    #PUSH, 2, 0, 1
    SFVTL[R]
    SWAP[]
    SHPIX[]

    /* STACK: */

    #PUSH, 2, 1
    SPVTL[R]

    #PUSH, 1 /* leave twilight zone */
    SZPS[]

EIF[]

#PUSHON
#END
ENDF[]

FDEF[], 119

/* align c with p unless fv is perpendicular to pv
   fv and pv assumed to be set prior to calling fn 119
   used as support to ResX|YDDist and ResX|YDLink

   CALL[], &lt;p&gt;, &lt;c&gt;, 119 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

SWAP[]
SRP0[]

/* STACK: &lt;c&gt; */

GFV[]
GPV[]

/* STACK: &lt;c&gt;, &lt;fv.x&gt;, &lt;fv.y&gt;, &lt;pv.x&gt;, &lt;pv.y&gt; */

ROLL[]
MUL[]
SWAP[]
ROLL[]
MUL[]
ADD[]
ABS[]

/* STACK: &lt;c&gt;, &lt;|pv.y*fv.y + pv.x*fv.x|&gt; */

#PUSH, 16384, 1024
MUL[]

/* the above dot product multiplies two 2.14 numbers in 26.6 arithmetic yielding a 2.22 number (2^14 * 2^14 / 2^6 = 2^22)
   like the rasterizer, we're comparing this number to 1/16: |fv1·pv| &lt; 1/16 means fv1 is within ±arcsin(1/16) or ±3.5833° perpendicular to pv
   in 2.22 format 1/16 is 2^18, but since the assembler won't allow us to push 2^18 = 262144, we make up this number as a multiplication
   the multiplication, in turn, is again done in 26.6 format, hence we multiply 16384 with 1024 (2^14 * 2^10 / 2^6 = 2^18) */

LT[]
IF[]

    /* fv is approximately perpendicular to pv which by itself is perpendicular
       to a line from p to c' (with c' the twilight point 2 computed in fn 118),
       i.e. fv is approximately parallel to line from p to c'. Given the usage
       of fn 119 this means that fv is approximately coincident with said line,
       or c is approximately aligned already, hence simply touch the point, but
       without involving the pv */

    /* STACK: &lt;c&gt; */

    #PUSH, 0
    SHPIX[]

ELSE[]

    /* STACK: &lt;c&gt; */

    ALIGNRP[]

EIF[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 120

/* support to ResX|YDDist and ResX|YDLink where fv0 and fv1 are x or y

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1&gt;, 120 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1&gt; */

#PUSH, 6 /* p1 */
CINDEX[]
#PUSH, 9 /* p0 */
CINDEX[]
#PUSH, 9 /* c0 */
CINDEX[]
#PUSH, 7 /* cvt0 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1&gt; */

SWAP[]
#PUSH, 0 /* x? */
EQ[]
IF[]
  SFVTCA[X]
ELSE[]
  SFVTCA[Y]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1&gt; */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 6 /* c0 */
MINDEX[]
#PUSH, 119
CALL[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1&gt; */

#PUSH, 5 /* p0 */
CINDEX[]
#PUSH, 5 /* p1 */
MINDEX[]
#PUSH, 5 /* c1 */
CINDEX[]
#PUSH, 5 /* cvt1 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c1&gt;, &lt;fv1&gt; */

#PUSH, 0 /* x? */
EQ[]
IF[]
  SFVTCA[X]
ELSE[]
  SFVTCA[Y]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c1&gt; */

#PUSH, 119
CALL[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 121

/* support to ResX|YDDist and ResX|YDLink where fv0 is x or y while fv1 is to-line

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt;, 121 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 7 /* p1 */
CINDEX[]
#PUSH, 10 /* p0 */
CINDEX[]
#PUSH, 10 /* c0 */
CINDEX[]
#PUSH, 8 /* cvt0 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

ROLL[]
#PUSH, 0 /* x? */
EQ[]
IF[]
  SFVTCA[X]
ELSE[]
  SFVTCA[Y]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 7 /* c0 */
MINDEX[]
#PUSH, 119
CALL[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 6 /* p1 */
MINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 6 /* cvt1 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

SFVTL[r]

/* STACK: &lt;p0&gt;, &lt;c1&gt; */

#PUSH, 119
CALL[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 122

/* support to ResX|YDDist and ResX|YDLink where fv0 is to-line while fv1 is x or y

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1&gt;, 122 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1&gt; */

#PUSH, 7 /* p1 */
CINDEX[]
#PUSH, 10 /* p0 */
CINDEX[]
#PUSH, 10 /* c0 */
CINDEX[]
#PUSH, 8 /* cvt0 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1&gt; */

ROLL[]
ROLL[]
SFVTL[r]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1&gt; */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 6 /* c0 */
MINDEX[]
#PUSH, 119
CALL[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1&gt; */

#PUSH, 5 /* p0 */
CINDEX[]
#PUSH, 5 /* p1 */
MINDEX[]
#PUSH, 5 /* c1 */
CINDEX[]
#PUSH, 5 /* cvt1 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c1&gt;, &lt;fv1&gt; */

#PUSH, 0 /* x? */
EQ[]
IF[]
  SFVTCA[X]
ELSE[]
  SFVTCA[Y]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c1&gt; */

#PUSH, 119
CALL[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 123

/* support to ResX|YDDist and ResX|YDLink where both fv0 and fv1 are to-line

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt;, 123 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 8 /* p1 */
CINDEX[]
#PUSH, 11 /* p0 */
CINDEX[]
#PUSH, 11 /* c0 */
CINDEX[]
#PUSH, 9 /* cvt0 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 4 /* fv0.p0 */
MINDEX[]
#PUSH, 4 /* fv0.p1 */
MINDEX[]
SFVTL[r]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 7 /* c0 */
MINDEX[]
#PUSH, 119
CALL[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 6 /* p1 */
MINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 6 /* cvt1 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

SFVTL[r]

/* STACK: &lt;p0&gt;, &lt;c1&gt; */

#PUSH, 119
CALL[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 124

/* determine on which side of edge p0-&gt;p1 is c
   by calculating vector product (c - p0) ^ (p1 - p0)

   CALL[], &lt;p0&gt;, &lt;c&gt;, &lt;p1&gt;, 124

   returns with vector product on stack
   if vector product &lt; 0 then c is on the left of p0-&gt;p1
   if vector product &gt; 0 then c is on the right of p0-&gt;p1
   else c is exactly on p0-&gt;p1 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c&gt;, &lt;p1&gt; */

SPVTCA[X]
#PUSH, 3 /* p0 */
CINDEX[]
#PUSH, 3 /* c */
CINDEX[]
MD[O]
#PUSH, 4 /* p0 */
CINDEX[]
#PUSH, 3 /* p1 */
CINDEX[]
MD[O]

/* STACK: &lt;p0&gt;, &lt;c&gt;, &lt;p1&gt;, &lt;a.x&gt;, &lt;b.x&gt; */

SPVTCA[Y]
#PUSH, 5 /* p0 */
CINDEX[]
#PUSH, 5 /* c */
MINDEX[]
MD[O]
#PUSH, 5 /* p0 */
MINDEX[]
#PUSH, 5 /* p1 */
MINDEX[]
MD[O]

/* STACK: &lt;a.x&gt;, &lt;b.x&gt;, &lt;a.y&gt;, &lt;b.y&gt; */

#PUSH, 4 /* a.x */
MINDEX[]
MUL[]

ROLL[] /* b.x */
ROLL[] /* a.y */
MUL[]

SUB[]

/* STACK: &lt;b.y*a.x - b.x*a.y&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 125

/* fn interpolates a pair of diagonal links between grand-parents gp0 and gp1 along pv
   pv: X = 0, Y = 1, X/ = 2; fv0 and fv1: x and y components in 2.14

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, 125 */

#BEGIN
#PUSHOFF

/* interpolate parents between grand-parents along pv */
/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

#PUSH, 93, 14 /* pv */
CINDEX[]
ADD[]
CALL[]

#PUSH, 12 /* gp0 */
MINDEX[]
SRP1[]
#PUSH, 5 /* gp1 */
MINDEX[]
SRP2[]

#PUSH, 10 /* p0 */
CINDEX[]
IP[]
#PUSH, 7 /* p1 */
CINDEX[]
IP[]

/* determine if this is a crisscrossed stroke */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

#PUSH, 10 /* p0 */
CINDEX[]
#PUSH, 10 /* c0 */
CINDEX[]
#PUSH, 9 /* p1 */
CINDEX[]
#PUSH, 124 /* c0 on which side of edge p0-&gt;p1? */
CALL[]
#PUSH, 0
LT[]

#PUSH, 11 /* p0 */
CINDEX[]
#PUSH, 8 /* c1 */
CINDEX[]
#PUSH, 10 /* p1 */
CINDEX[]
#PUSH, 124 /* c1 on which side of edge p0-&gt;p1? */
CALL[]
#PUSH, 0
LT[]

EQ[]
IF[]

    /* both childern on same side of parent edge p0&gt;-&gt;p1
       hence re-align children with parents perp to dpv. */
    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 7 /* p1 */
    CINDEX[]
    #PUSH, 11 /* p0 */
    CINDEX[]
    SDPVTL[R]

    #PUSH, 4 /* fv0.x */
    CINDEX[]
    #PUSH, 4 /* fv0.y */
    CINDEX[]
    SFVFS[]

    #PUSH, 10 /* p0 */
    CINDEX[]
    SRP0[]
    #PUSH, 9 /* c0 */
    CINDEX[]
    MDRP[m&lt;rBl]

    #PUSH, 2 /* fv1.x */
    CINDEX[]
    #PUSH, 2 /* fv1.y */
    CINDEX[]
    SFVFS[]

    #PUSH, 7 /* p1 */
    CINDEX[]
    SRP0[]
    #PUSH, 6 /* c1 */
    CINDEX[]
    MDRP[m&lt;rBl]

ELSE[]

    /* childern on opposite sides of "parent edge" p0&gt;-&gt;p1
       hence re-align children with parents per method for crisscrossed strokes */
    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 7 /* p1 */
    CINDEX[]
    #PUSH, 11 /* p0 */
    CINDEX[]
    #PUSH, 11 /* c0 */
    CINDEX[]
    #PUSH, -1, 118 /* no cvt0, no minDist */
    CALL[]

    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 4 /* fv0.x */
    CINDEX[]
    #PUSH, 4 /* fv0.y */
    CINDEX[]
    SFVFS[]

    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 7 /* p1 */
    CINDEX[]
    #PUSH, 10 /* c0 */
    CINDEX[]
    #PUSH, 119
    CALL[]

    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 10 /* p0 */
    CINDEX[]
    #PUSH, 8 /* p1 */
    CINDEX[]
    #PUSH, 8 /* c1 */
    CINDEX[]
    #PUSH, -1, 118 /* no cvt1, no minDist */
    CALL[]

    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 2 /* fv1.x */
    CINDEX[]
    #PUSH, 2 /* fv1.y */
    CINDEX[]
    SFVFS[]

    /* STACK: &lt;p0&gt;, &lt;c1&gt; */

    #PUSH, 10 /* p0 */
    CINDEX[]
    #PUSH, 7 /* c1 */
    CINDEX[]
    #PUSH, 119
    CALL[]

EIF[]

/* determine pre-link medians, measuring perpendicularly to p0-&gt;p1 */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

#PUSH, 10 /* p0 */
CINDEX[]
GC[N]
#PUSH, 10 /* c0 */
CINDEX[]
GC[N]
ADD[]

#PUSH, 8 /* p1 */
CINDEX[]
GC[N]
#PUSH, 8 /* c1 */
CINDEX[]
GC[N]
ADD[]

/* links */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;median0&gt;, &lt;median1&gt; */

#PUSH, 6 /* fv0.x */
CINDEX[]
#PUSH, 6 /* fv0.y */
CINDEX[]
SFVFS[]

#PUSH, 12 /* p0 */
CINDEX[]
#PUSH, 12 /* c0 */
CINDEX[]
#PUSH, 12 /* cvt0 */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;median0&gt;, &lt;median1&gt; */

#PUSH, 4 /* fv1.x */
CINDEX[]
#PUSH, 4 /* fv1.y */
CINDEX[]
SFVFS[]

#PUSH, 9 /* p1 */
CINDEX[]
#PUSH, 9 /* c1 */
CINDEX[]
#PUSH, 9 /* cvt1 */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

/* subtract post-link medians from pre-link ones */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;median0&gt;, &lt;median1&gt; */

SWAP[]

#PUSH, 10 /* p0 */
CINDEX[]
GC[N]
#PUSH, 10 /* c0 */
CINDEX[]
GC[N]
ADD[]

SUB[]
#PUSH, 32
MUL[]

SWAP[]

#PUSH, 8 /* p1 */
CINDEX[]
GC[N]
#PUSH, 8 /* c1 */
CINDEX[]
GC[N]
ADD[]

SUB[]
#PUSH, 32
MUL[]

/* finally move points by respective deltas */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;delta0&gt;, &lt;delta1&gt; */

#PUSH, 1, 12 /* pv */
CINDEX[]
EQ[]
IF[]
    SFVTCA[Y]
ELSE[]
    SFVTCA[X]
EIF[]

#PUSH, 10 /* p0 */
MINDEX[]
DUP[]
SRP0[]
#PUSH, 3 /* delta0 */
CINDEX[]
MSIRP[m]

#PUSH, 6 /* fv0.x */
MINDEX[]
#PUSH, 6 /* fv0.y */
MINDEX[]
SFVFS[]

#PUSH, 7 /* c0 */
MINDEX[]
DUP[]
SRP0[]
ROLL[] /* delta0 */
MSIRP[m]

/* STACK: &lt;pv&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;delta1&gt; */

#PUSH, 1, 7 /* pv */
MINDEX[]
EQ[]
IF[]
    SFVTCA[Y]
ELSE[]
    SFVTCA[X]
EIF[]

#PUSH, 5 /* p1 */
MINDEX[]
DUP[]
SRP0[]
#PUSH, 2 /* delta1 */
CINDEX[]
MSIRP[m]

ROLL[] /* fv0.x */
ROLL[] /* fv0.y */
SFVFS[]

SWAP[] /* c1 */
DUP[]
SRP0[]
SWAP[] /* delta1 */
MSIRP[m]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 126

/* glue code to fn 125 where both fv0 and fv1 are x or y

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0&gt;, &lt;fv1&gt;, 126 */

#BEGIN
#PUSHOFF

/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0&gt;, &lt;fv1&gt; */

SWAP[] /* fv0 */
#PUSH, 1
EQ[]
IF[]
    #PUSH, 0, 16384
ELSE[]
    #PUSH, 16384, 0
EIF[]

ROLL[] /* fv1 */
#PUSH, 1
EQ[]
IF[]
    #PUSH, 0, 16384
ELSE[]
    #PUSH, 16384, 0
EIF[]

#PUSH, 125 /* resIPDDLink */
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 127

/* glue code to fn 125 where fv0 is to line and fv1 is x or y

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.0&gt;, &lt;fv0.1&gt;, &lt;fv1&gt;, 127 */

#BEGIN
#PUSHOFF

/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.0&gt;, &lt;fv0.1&gt;, &lt;fv1&gt; */

ROLL[] /* fv0.0 */
ROLL[] /* fv0.1 */
SFVTL[r]
GFV[]

ROLL[] /* fv1 */
#PUSH, 1
EQ[]
IF[]
    #PUSH, 0, 16384
ELSE[]
    #PUSH, 16384, 0
EIF[]

#PUSH, 125 /* resIPDDLink */
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 128

/* glue code to fn 125 where fv0 is x or y and fv1 is to line

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0&gt;, &lt;fv1.0&gt;, &lt;fv1.1&gt;, 128 */

#BEGIN
#PUSHOFF

/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0&gt;, &lt;fv1.0&gt;, &lt;fv1.1&gt; */

SFVTL[r]

#PUSH, 1
EQ[]
IF[]
    #PUSH, 0, 16384
ELSE[]
    #PUSH, 16384, 0
EIF[]

GFV[]

#PUSH, 125 /* resIPDDLink */
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 129

/* glue code to fn 125 where both fv0 and fv1 are to line

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.0&gt;, &lt;fv0.1&gt;, &lt;fv1.0&gt;, &lt;fv1.1&gt;, 129 */

#BEGIN
#PUSHOFF

/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.0&gt;, &lt;fv0.1&gt;, &lt;fv1.0&gt;, &lt;fv1.1&gt; */

#PUSH, 4 /* fv0.0 */
MINDEX[]
#PUSH, 4 /* fv0.1 */
MINDEX[]
SFVTL[r]
GFV[]
#PUSH, 4 /* fv1.0 */
MINDEX[]
#PUSH, 4 /* fv1.1 */
MINDEX[]
SFVTL[r]
GFV[]
#PUSH, 125 /* resIPDDLink */
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 130

/* extrapolate x-coordinate of &lt;p&gt; to base line along italic angle
   returns with extrapolated x-coordinate on stack

   CALL[], &lt;p&gt;, 130 */

#BEGIN
#PUSHOFF

DUP[]
SVTCA[X]
GC[N]
SWAP[]
SVTCA[Y]
GC[N]

/* STACK: &lt;p.x&gt;, &lt;p.y&gt; */

#PUSH, 10 /* rise */
RS[]
#PUSH, 11 /* run */
RS[]

/* STACK: &lt;p.x&gt;, &lt;p.y&gt;, &lt;rise&gt;, &lt;run&gt; */

ROLL[]
MUL[]
SWAP[]
DIV[]
SUB[]

/* STACK: &lt;p.x - p.y*run/rise&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 131

/* constrains an italic stroke, defined by parents &lt;p0&gt; and &lt;p1&gt;, by
   children &lt;c0&gt; and &lt;c1&gt;, and by cvts &lt;cvt0&gt; and &lt;cvt1&gt;, and inter-
   polates it between points &lt;lsb&gt; and &lt;rsb&gt;

   for b&amp;w stroke additionally optimizes the resulting pixel pattern

   CALL[], &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, 131 */

#BEGIN
#PUSHOFF

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt; */

#PUSH, 9 /* pv perp italic, fv X */
CALL[]

/* lock parent edge */

#PUSH, 6 /* p0 */
CINDEX[]
MDAP[r]

#PUSH, 5 /* p1 */
CINDEX[]
RDTG[]
MDRP[m&lt;RBl]

/* link child edge */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 5 /* c0 */
CINDEX[]
#PUSH, 4 /* cvt0 */
CINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
#PUSH, 3 /* cvt1 */
CINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

RTG[]

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt; */
/* interpolate median of p0 and c0 between lsb and rsb */

#PUSH, 8 /* lsb */
CINDEX[]
#PUSH, 7 /* p0 */
CINDEX[]
#PUSH, 6 /* c0 */
CINDEX[]
#PUSH, 10 /* rsb */
CINDEX[]
#PUSH, 111 /* interpolate median */
CALL[]

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt; */
/* if the two actual parent-&gt;child distances round to the same stroke weight */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 5 /* c0 */
CINDEX[]
#PUSH, 4 /* cvt0 */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 102 /* resActDist, noCvt, minDist */
ELSE[]
    #PUSH, 104 /* resActDist, cvt, minDist */
EIF[]
CALL[]

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;[dist0]&gt; */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
#PUSH, 4 /* cvt1 */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 102 /* resActDist, noCvt, minDist */
ELSE[]
    #PUSH, 104 /* resActDist, cvt, minDist */
EIF[]
CALL[]

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;[dist0]&gt;, &lt;[dist1]&gt; */

EQ[]
IF[]

    /* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */
    /* adjust median of p1 and c1 in parallel */

    RDTG[]
    #PUSH, 4 /* p0 */
    CINDEX[]
    SRP0[]
    #PUSH, 3 /* p1 */
    CINDEX[]
    MDRP[m&lt;RBl]

    #PUSH, 2 /* c0 */
    CINDEX[]
    SRP0[]
    #PUSH, 1 /* c1 */
    CINDEX[]
    MDRP[m&lt;RBl]

    #PUSH, 5 /* rsb */
    MINDEX[]
    POP[]
    #PUSH, 5 /* lsb */
    MINDEX[]
    POP[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */

ELSE[]

    /* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */
    /* interpolate median of p1 and c1 between lsb and rsb independently */

    #PUSH, 6 /* lsb */
    MINDEX[]
    #PUSH, 4 /* p1 */
    CINDEX[]
    #PUSH, 3 /* c1 */
    CINDEX[]
    #PUSH, 8 /* rsb */
    MINDEX[]
    #PUSH, 111 /* interpolate median */
    CALL[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */

EIF[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */
/* for b&amp;w only optimize pixel pattern */

#PUSH, 0, 2
RS[]
EQ[]
IF[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */
    /* extrapolate c0 to base line */

    RDTG[]
    #PUSH, 2 /* c0 */
    CINDEX[]
    #PUSH, 130
    CALL[]

    /* extrapolate p0 to base line */

    #PUSH, 5 /* p0 */
    CINDEX[]
    #PUSH, 130
    CALL[]

    /* get parentPhase from extrapolated x-coordinate */

    DUP[]
    DUP[]
    ROUND[Bl]
    SUB[]

    #PUSH, 4 /* targetPhase */
    RS[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;c0.x'&gt;, &lt;p0.x'&gt;, &lt;parentPhase&gt;, &lt;targetPhase&gt; */
    /* shifting parent edge by deltaPhase optimizes stepping pattern on parent edge */

    SVTCA[X]
    SWAP[]
    SUB[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;c0.x'&gt;, &lt;p0.x'&gt;, &lt;deltaPhase&gt; */
    /* minimize the positioning error by mapping deltaPhase from [-63,63] to [-32,31] */

    #PUSH, 96
    ADD[]
    DUP[]
    ROUND[Bl]
    SUB[]
    #PUSH, 32
    SUB[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;c0.x'&gt;, &lt;p0.x'&gt;, &lt;deltaPhase&gt; */
    /* save minimized deltaPhase for child edge and shift parent edge */

    DUP[]
    #PUSH, 8 /* p0 */
    MINDEX[]
    #PUSH, 8 /* p1 */
    MINDEX[]
    ROLL[]
    #PUSH, 2
    SLOOP[]
    SHPIX[]

    /* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;c0.x'&gt;, &lt;p0.x'&gt;, &lt;deltaPhase&gt; */
    /* since child edge is linked perpendicular to italic angle,
       the resulting stroke would include unnecessary pixels,
       hence determine phase of distance between extrapolated
       x-coordinates (deltaDeltaPhase) */

    ROLL[]
    ROLL[]
    SUB[]
    DUP[]
    ROUND[Bl]
    SUB[]

    /* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;deltaPhase&gt;, &lt;deltaDeltaPhase&gt; */
    /* subtract from deltaPhase (don't shift quite as far...) */

    SUB[]

    /* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;deltaPhase'&gt; */
    /* shift parent edge */

    #PUSH, 2
    SLOOP[]
    SHPIX[]

    /* STACK: */

ELSE[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */

    POP[]
    POP[]
    POP[]
    POP[]

    /* STACK: */

EIF[]

RTG[]

#PUSHON
#END
ENDF[]

FDEF[], 132

/* for monochrome only: stack points &lt;p&gt; through &lt;c&gt; on top of &lt;p&gt; below &lt;ppem&gt;

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;ppem&gt;, 132 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;ppem&gt; */

MPPEM[]
GT[]
#PUSH, 1, 2
RS[]
GTEQ[]
AND[]
IF[]

    /* STACK: &lt;p&gt;, &lt;c&gt; */

    SWAP[]
    SRP0[]
    DUP[]
    SVTCA[X]
    ALIGNRP[]
    SVTCA[Y]
    ALIGNRP[]

ELSE[]

    /* STACK: &lt;p&gt;, &lt;c&gt; */

    POP[]
    POP[]
EIF[]

#PUSHON
#END
ENDF[]

FDEF[], 133

/* support fn for fns 134 and 135

   CALL[], &lt;align?&gt;, &lt;from&gt;, &lt;to&gt;, 133 */

#BEGIN
#PUSHOFF

SWAP[]

/* STACK: &lt;align?&gt;, &lt;to&gt;, &lt;from&gt; */

#WBeginLoop133:

#PUSH, 2 /* to */
CINDEX[]
#PUSH, 2 /* from */
CINDEX[]
GTEQ[]
IF[]

    /* STACK: &lt;align?&gt;, &lt;to&gt;, &lt;from&gt; */

    DUP[]
    #PUSH, 4 /* align? */
    CINDEX[]
    IF[]
        ALIGNRP[]
    ELSE[]
        IP[]
    EIF[]

    #PUSH, 1
    ADD[]

    #PUSH, WOffset133
    JMPR[], (WOffset133=#WBeginLoop133)

EIF[]

/* STACK: &lt;align?&gt;, &lt;to&gt;, &lt;from&gt; */

POP[]
POP[]
POP[]

#PUSHON
#END
ENDF[]

FDEF[], 134

/* support fn for italic IUP[?]
   assume pv and fv are set externally

   CALL[], &lt;p0&gt;, &lt;p1&gt;, 134 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;p1&gt; */

#PUSH, 2 /* p0 */
CINDEX[]
GC[O]
#PUSH, 2 /* p1 */
CINDEX[]
GC[O]
EQ[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;eq?&gt; */

ROLL[] /* p0 */
DUP[]
DUP[]
SRP0[]
SRP1[]
#PUSH, 1
ADD[]
ROLL[] /* p1 */
DUP[]
SRP2[]
#PUSH, 1
SUB[]

/* STACK: &lt;eq?&gt;, &lt;from&gt;, &lt;to&gt; */

#PUSH, 133
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 135

/* support fn for italic IUP[?]
   assume pv and fv are set externally

   CALL[], &lt;p0&gt;, &lt;end&gt;, &lt;start&gt;, &lt;p1&gt;, 135 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;end&gt;, &lt;start&gt;, &lt;p1&gt; */

#PUSH, 4 /* p0 */
CINDEX[]
GC[O]
#PUSH, 2 /* p1 */
CINDEX[]
GC[O]
EQ[]

/* STACK: &lt;p0&gt;, &lt;end&gt;, &lt;start&gt;, &lt;p1&gt;, &lt;eq?&gt; */

SWAP[]
DUP[]
SRP2[]
#PUSH, 1
SUB[]
SWAP[]
DUP[]

#PUSH, 6 /* p0 */
MINDEX[]
DUP[]
DUP[]
SRP0[]
SRP1[]
#PUSH, 1
ADD[]
#PUSH, 6 /* end */
MINDEX[]

/* STACK: &lt;start&gt;, &lt;to&gt;, &lt;eq?&gt;, &lt;eq?&gt;, &lt;from&gt;, &lt;end&gt; */

#PUSH, 133
CALL[]

ROLL[]
ROLL[]
#PUSH, 133
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 150
/* Function 150 takes 5 arguments */
/* VERSION 1.0 20120420 */

/* This function moves a point between a PPEM range */
/* for the given rasterizer mode (in Store 2) ClearType */
/* CALL[],&lt;point&gt;,&lt;amount&gt;,&lt;low PPEM&gt;,&lt;high PPEM&gt;, &lt;rasterizer mode&gt;, 150 */
/* &lt;low ppem&gt; Lowest PPEM range to be modified (inclusive) */
/* &lt;high ppem&gt; Highest PPEM range to be modified (inclusive) */
/* &lt;Point&gt; point to be modified */
/* &lt;amount&gt; Amount to move point, in ± 64ths */
/* &lt;rasterizer mode&gt; value in store 2 */
/* 150 Function number */
#BEGIN
#PUSHOFF
#PUSH, 2
RS[] /* read store 2 */
EQ[] /* is it = to the last arg? */
IF[] /* if so . . . */
    GPV[] /* Save current PV on stack to restore */
    SPVTCA[Y] /* We should only MPPEM with Y PV */
    ROLL[]
    MPPEM[] /* check cur. size against high ppem */
    GTEQ[]
    #PUSH, 4
    MINDEX[]
    MPPEM[] /* and low ppem */
    LTEQ[]
    AND[]
    IF[] /* if it's between, then */
        SPVFS[] /* Restore orig PV */
        SHPIX[] /* move the point by the amount */
    ELSE[]
       SPVFS[] /* Restore orig PV */
       POP[] /* otherwise remove the remaining arguments */
       POP[]
    EIF[]

ELSE[]
    POP[] /* remove the remaining arguments if the first test fails */
    POP[]
    POP[]
    POP[]
EIF[]
#END
#PUSHON
ENDF[]

FDEF[], 151
/* Function 151 takes 5 arguments */
/* VERSION 1.0 20120420 */

/* This function moves a point between a PPEM range */
/* for the given set of rasterizer flags (in Store 2) */
/* CALL[],&lt;point&gt;,&lt;amount&gt;,&lt;low PPEM&gt;,&lt;high PPEM&gt;, &lt;rasterizer mode&gt;, 151 */
/* &lt;low ppem&gt; Lowest PPEM range to be modified (inclusive) */
/* &lt;high ppem&gt; Highest PPEM range to be modified (inclusive) */
/* &lt;Point&gt; point to be modified */
/* &lt;amount&gt; Amount to move point, in ± 64ths */
/* &lt;rasterizer flag&gt; bit of a value in store 2 */
/* Function 151 differs from Function 150 in that instead of requiring an */
/* exact match with the value in store 2, a given set of flags (or bit values) */
/* can be referenced. For example, if the function should execute */
/* in any situation where ClearType with fractional AWs is enabled, */
/* (c.f. Function 84) irrespective of other flags (e.g. BGR as opposed */
/* to RGB Devices or non-ClearType direction anti-aliasing) then one */
/* would use a &lt;rasterizer flag&gt; value of 64. (c.f. Function 84.) */
/* The rasterizer values for &lt;rasterizer mode&gt; are defined in the function */
/* 84 header. */
/* EXAMPLE: */
/* If one wanted the move to occur if either subpixel positioned or full gray pixel */
/* then one would take the 64 (from subpixel positioned) and the 256 (from */
/* gray full-pixel) and add them to get 320. With a value of 320, the point will */
/* get moved if either subpixel positioned or full gray pixel is enabled. */
/* If one wanted to move to occur always if ClearType was on, independent of */
/* any subtype or spacing flag, one would set the rasterizer mode to 2. */

/* 151 Function number */
#BEGIN
#PUSHOFF
#PUSH, 152 /* Call function 152 with the rasterizer mode on the top of stack */
CALL[]
IF[] /* if so . . . */
    GPV[] /* Save current PV on stack to restore */
    SPVTCA[Y] /* We should only MPPEM with Y PV */
    ROLL[]
    MPPEM[] /* check cur. size against high ppem */
    GTEQ[]
    #PUSH, 4
    MINDEX[]
    MPPEM[] /* and low ppem */
    LTEQ[]
    AND[]
    IF[] /* if it's between, then */
        SPVFS[] /* Restore orig PV */
        SHPIX[] /* move the point by the amount */
    ELSE[]
        SPVFS[] /* Restore orig PV */
        POP[] /* otherwise remove the remaining arguments */
        POP[]
    EIF[]

ELSE[]
    POP[] /* remove the remaining arguments if the first test fails */
    POP[]
    POP[]
    POP[]
EIF[]
#END
#PUSHON
ENDF[]

FDEF[], 152
/* Function 152 takes 1 argument, a "bitfield" flag. */
/* VERSION 1.0 20111117 */
/*
Function 152 is intended to take a set of one or more bits as input and do an AND (e.g. mask) of those
bits with the set of flags returned by Function 84. Then determine if there is at least one
of these resultant bits that are set.

Function 152 returns TRUE if the match is successful, and FALSE if it is not successful.

If the parameter is zero, indicating no flags, then the function returns FALSE.

This function takes a maxiumum of 32 bit flags.

USES: Storage 2 (FN 84)
RETURNS: 0 or 1
*/

#BEGIN
#PUSHOFF
/* Input parameter is a set of one or more flags */

DUP[]
#PUSH, 2     /* Read FN 84 flags */
RS[]
EQ[]         /* If a simple match, return TRUE */
#PUSH, 1
SWAP[]

#PUSH, BEcln
SWAP[]
JROT[], (BEcln=#LEndClear)  /* Jump to end and clean up stack. */
POP[]
#PUSH, 0, 2
RS[]         /* Read FN 84 flags */
#PUSH, BEclr /* If no FN 84 flags, return FALSE */
SWAP[]

JROF[], (BEclr=#LEndClear)

POP[]
#PUSH, 2
RS[]
SWAP[]
#PUSH, 32   /* Maximum number of bits to loop through */
/* TopLoop: */
#LTopLoop:
   /* STACK
   Loop Iteration Count
   Updated (shifted) Input Value
   Updated (shifted) FN 84 Flag
   */
  DUP[]
  NOT[]
  IF[]    /* Exit the loop when done */
    POP[]
    POP[]
    POP[]
    #PUSH, 0, BDEnd /* 73  End */

    JMPR[], (BDEnd=#LEndFn)

  EIF[]
  ROLL[]
  ROLL[]
  DUP[]
  ROLL[]
  DUP[]
  ROLL[]
  SWAP[]
  /* STACK
  Updated (shifted) FN 84 Flag
  Updated (shifted) Input Value
  Updated (shifted) FN 84 Flag
  Updated (Shifted) Input Value
  Loop Interation Count
  */

  /* Check to see if the lower-order bit is set in the FN 84 Flag */
  #PUSH, 4096 /* Convert to 26.6 by multiply by 64 x 64 */
  MUL[]
  ODD[]
  IF[]
    /* Check to see if the lower-order bit is set in the Input Value */
    #PUSH, 4096
    MUL[]
    ODD[]
    IF[]
      /* We can early out here once we find our first match */
      POP[]
      POP[]
      POP[]
      #PUSH, 1, BTEnd  /* 1 is the TRUE return code */
      JMPR[], (BTEnd=#LEndFn)
    EIF[]
  ELSE[]
    POP[]
  EIF[]
  /* STACK
  Updated (shifted) FN 84 Flag
  Updated (shifted) Input Value
  Loop Interation Count
  */
  /* Shift both the Input Value and the FN 84 Flag each one bit right */
  #PUSH, 128  /* 2 in 26.6 */
  DIV[]
  DUP[]
  NOT[]
  IF[]
    POP[]
    POP[]
    POP[]
    #PUSH, 0, BPEnd /* 0 is end condition of FALSE */

    JMPR[], (BPEnd=#LEndFn)

  EIF[]
  SWAP[]
  #PUSH, 128  /* 2 in 26.6 */
  DIV[]
  DUP[]
  NOT[]
  IF[]
    POP[]
    POP[]
    POP[]
    #PUSH, 0, BZEnd /* End */

    JMPR[], (BZEnd=#LEndFn) 

  EIF[]
  ROLL[]
  #PUSH, 1
  SUB[]
  #PUSH, WReLoop  /* -77 TopLoop */

JMPR[], (WReLoop=#LTopLoop)

/* EndClear: */
#LEndClear:
SWAP[]
POP[]
#LEndFn:
/* End: */
#END
#PUSHON
ENDF[]

FDEF[], 153
/* Function 153 takes 1 argument, a "bitfield" flag. */
/* VERSION 1.0 20111117 */
/*
Function 153 is intended to take a set of one or more bits as input and do an AND (e.g. mask) of those
bits with the set of flags returned by Function 84. Then determine if ALL
of these resultant bits from the mask are set.

Function 153 returns TRUE if the match is successful, and FALSE if it is not successful.

If the parameter is zero, indicating no flags, then the function returns FALSE.

This function takes a maxiumum of 32 flags.

USES: Storage 2 (FN 84)
RETURNS: 0 or 1
*/

#BEGIN
#PUSHOFF
/* Input parameter is a set of one or more flags */

DUP[]
#PUSH, 2     /* Read FN 84 flags */
RS[]
EQ[]         /* If a simple match, return TRUE */
#PUSH, 1
SWAP[]

#PUSH, BEcln
SWAP[]
JROT[], (BEcln=#LEndClear)  /* Jump to end and clean up stack. */
POP[]
#PUSH, 0, 2
RS[]         /* Read FN 84 flags */
#PUSH, BEclr /* If no FN 84 flags, return FALSE */
SWAP[]

JROF[], (BEclr=#LEndClear)

POP[]
#PUSH, 0, 2   /* 0 is the boolean tracking success, start off with FALSE */
RS[]
ROLL[]
#PUSH, 32   /* Maximum number of bits to loop through */
/* TopLoop: */
#LTopLoop:
   /* STACK
   Loop Iteration Count
   Updated (shifted) Input Value
   Updated (shifted) FN 84 Flag
   Conditional boolean tracking success
   */
  DUP[]
  NOT[]
  IF[]    /* Exit the loop when done */
    POP[]
    POP[]
    POP[]
    #PUSH, BDEnd /* 73  End */

    JMPR[], (BDEnd=#LEndFn)

  EIF[]
  ROLL[]
  ROLL[]
  DUP[]
  ROLL[]
  DUP[]
  ROLL[]
  SWAP[]
  /* STACK
  Updated (shifted) FN 84 Flag
  Updated (shifted) Input Value
  Updated (shifted) FN 84 Flag
  Updated (Shifted) Input Value
  Loop Interation Count
  Conditional boolean tracking success
  */

  /* Check to see if the lower-order bit is set in the FN 84 Flag */
  #PUSH, 4096 /* Convert to 26.6 by multiply by 64 x 64 */
  MUL[]
  ODD[]
  IF[]
    /* Check to see if the lower-order bit is set in the Input Value */
    #PUSH, 4096
    MUL[]
    ODD[]
    IF[]
      #PUSH, 4
      MINDEX[]
      #PUSH, 1  /* Set TRUE return code */
      OR[]      /* We OR this because we will immediately exit if we fail this test */
      #PUSH, 4
      MINDEX[]
      #PUSH, 4
      MINDEX[]
      #PUSH, 4
      MINDEX[]
    ELSE[]
      POP[]
      POP[]
      POP[]
      POP[]
      #PUSH, BTEnd , 0  /* 0 is the FALSE return code */
      SWAP[]
      JMPR[], (BTEnd=#LEndFn)

    EIF[]
  ELSE[]
    POP[]
  EIF[]
  #PUSH, 4 /* Can this be cleaned up and integrated with the code below? */
  MINDEX[]
  SWAP[]
  /* STACK
  Updated (shifted) FN 84 Flag
  Conditional boolean tracking success
  Updated (shifted) Input Value
  Loop Interation Count
  */
  /* Shift both the Input Value and the FN 84 Flag each one bit right */
  #PUSH, 128  /* 2 in 26.6 */
  DIV[]
  DUP[]
  NOT[]
  IF[]
    ROLL[]
    NOT[]
    ROLL[]
    AND[]
    SWAP[]
    POP[]
    SWAP[]
    POP[]
    #PUSH, BPEnd /* 29  End */

    JMPR[], (BPEnd=#LEndFn)

  EIF[]
  ROLL[]
  #PUSH, 128  /* 2 in 26.6 */
  DIV[]
  DUP[]
  NOT[]
  IF[]
    POP[]
    POP[]
    SWAP[]
    POP[]
    #PUSH, BZEnd /* End */

    JMPR[], (BZEnd=#LEndFn)

  EIF[]
  #PUSH, 4
  MINDEX[]
  #PUSH, 1
  SUB[]
  #PUSH, WReLoop  /* -77 TopLoop */

JMPR[], (WReLoop=#LTopLoop)

/* EndClear: */
#LEndClear:
SWAP[]
POP[]
#LEndFn:
/* End: */
#END
#PUSHON
ENDF[]



    </extraProgram>

    <extraProgram name="ppgm">
/* auto-generated pre-program */
/* VTT 6.32 compiler Fri May  1 12:56:35 2020 */

/* Grey scaling? */
CALL[], 84

/* InstructionsOn */
#PUSHOFF
MPPEM[]
#PUSH, 2047
GT[]
MPPEM[]
#PUSH, 9
LT[]
OR[]
#PUSH, 1
GETINFO[]
#PUSH, 37
GTEQ[]
#PUSH, 1
GETINFO[]
#PUSH, 64
LTEQ[]
AND[]
#PUSH, 6
GETINFO[]
#PUSH, 0
NEQ[]
AND[]
OR[]
IF[]
    #PUSH, 1, 1
    INSTCTRL[]
EIF[]
#PUSHON

/* DropOutCtrlOff */
SCANCTRL[], 400

SCANTYPE[], 1
SCANTYPE[], 5

/* CvtCutIn */
SVTCA[Y]
SCVTCI[], 64
WS[], 3, 64
#PUSHOFF
MPPEM[]
#PUSH, 144
GTEQ[]
IF[]
#PUSH, 3, 0, 0
SCVTCI[]
WS[]
EIF[]
#PUSHON

/* ClearTypeCtrl */
#PUSHOFF
#PUSH, 2, 2
RS[]
LTEQ[]
IF[]
    #PUSH, 4, 3
    INSTCTRL[]
EIF[]
#PUSHON

WS[], 16, 0
/* LinearAdvanceWidths */
DLTC1[(2 @0 8)(2 @1 8)(2 @5 8)(2 @7 8)
      (2 @11 8)]
SVTCA[Y]
CALL[], 2, 89
SVTCA[Y]
CALL[], 8, 89
CALL[], 3, 100, 2, 85
CALL[], 9, 100, 8, 85
DLTC1[(0 @1 8)(0 @3 8)(0 @4 8)(0 @5 8)
      (0 @9 8)]
SVTCA[Y]
CALL[], 0, 89
DLTC1[(6 @1 8)(6 @3 8)(6 @5 8)(6 @7 8)
      (6 @9 8)(6 @11 8)(6 @13 8)(6 @15 8)]
SVTCA[Y]
CALL[], 6, 89
SVTCA[Y]
CALL[], 10, 89
DLTC1[(14 @7 -8)]
SVTCA[Y]
CALL[], 14, 89
CALL[], 1, 50, 0, 85
CALL[], 7, 75, 6, 85
CALL[], 11, 75, 10, 85
CALL[], 15, 50, 14, 85
SVTCA[Y]
CALL[], 4, 89
SVTCA[Y]
CALL[], 12, 89
CALL[], 5, 75, 4, 85
CALL[], 13, 75, 12, 85
SVTCA[Y]
CALL[], 16, 89
SVTCA[Y]
CALL[], 18, 89
CALL[], 17, 75, 16, 85
CALL[], 19, 75, 18, 85
SVTCA[X]
CALL[], 29, 33, 64, 30, 255, 90
SVTCA[X]
CALL[], 31, 64, 30, 255, 91
SVTCA[X]
CALL[], 34, 64, 33, 255, 91
SVTCA[X]
CALL[], 32, 64, 30, 255, 91
SVTCA[X]
CALL[], 35, 64, 33, 255, 91
SVTCA[X]
CALL[], 36, 30, 255, 31
SVTCA[Y]
CALL[], 37, 31, 255, 31
CALL[], 38, 32, 255, 31
SVTCA[X]
CALL[], 39, 33, 255, 31
SVTCA[Y]
CALL[], 40, 34, 255, 31
CALL[], 41, 35, 255, 31
SVTCA[X]
CALL[], 49, 36, 255, 31
SVTCA[Y]
CALL[], 50, 37, 255, 31
CALL[], 51, 38, 255, 31
CALL[], 52, 38, 167, 31
SVTCA[X]
CALL[], 53, 39, 125, 31
CALL[], 54, 39, 255, 31
CALL[], 55, 39, 125, 31
SVTCA[Y]
CALL[], 56, 40, 255, 31
CALL[], 57, 41, 250, 31
CALL[], 58, 41, 255, 31
CALL[], 59, 41, 250, 31
SVTCA[X]
CALL[], 60, 42, 72, 31
CALL[], 61, 42, 255, 31
SVTCA[Y]
CALL[], 62, 43, 167, 31
CALL[], 63, 43, 255, 31
CALL[], 64, 44, 255, 31
SVTCA[X]
CALL[], 65, 45, 255, 31
CALL[], 66, 45, 125, 31
SVTCA[Y]
CALL[], 67, 46, 255, 31
CALL[], 68, 47, 84, 31
CALL[], 69, 47, 255, 31
CALL[], 70, 47, 250, 31
CALL[], 71, 47, 125, 31
CALL[], 72, 48, 255, 31
CALL[], 73, 48, 250, 31
CALL[], 75, 52, 74, 85
RTG[]

    </extraProgram>

  </TSI1>

  <TSI3>

    <glyphProgram name=".notdef">
/* VTTTalk glyph 0, char 0xffff */
/* GUI generated Tue Apr 28 14:57:49 2020 */

/* Y direction */
YAnchor(3,8)
YShift(3,23)
YShift(23,26)
YShift(26,29)
YAnchor(9,2)
YShift(9,17)
YShift(17,28)
YShift(28,27)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="A">
/* VTTTalk glyph 1, char 0x41 (A) */
/* GUI generated Thu Apr 16 11:55:07 2020 */

/* Y direction */
ResYAnchor(0,2)
ResYAnchor(7,8)
YShift(7,3)
YIPAnchor(0,5,7)
YInterpolate(0,9,5)
YShift(5,4)
YShift(5,10)
YShift(10,8)

/* X direction */

XAnchor(7)
XAnchor(2)

XInterpolate(7,6,5,4,3,1,0,9,10,8,2)

Align(9,10,5,6)
Align(9,8,4,3)

Smooth()

    </glyphProgram>

    <glyphProgram name="AE">
/* VTTTalk glyph 26, char 0xc6 */
/* GUI generated Fri Apr 24 13:45:22 2020 */

/* Y direction */
ResYAnchor(0,2)
YShift(0,3)
YShift(3,17)
YAnchor(15,8)
YIPAnchor(15,13,7,0)
YShift(13,12)
YShift(13,18)
YShift(18,16)
YShift(7,4)
YShift(15,11)
YShift(11,8)

/* X direction */
XAnchor(1)
XAnchor(15)
XInterpolate(1,2,5,6,9,10,3,0,17,4,7,16,12,8,11,18,13,14,15)

Align(17,18,13,14)
Align(3,4,7,8)
Smooth()

    </glyphProgram>

    <glyphProgram name="Aringacute">
/* VTTTalk glyph 24, char 0x1fa */
/* GUI generated Fri May  1 11:21:21 2020 */

/* Y direction */
ResYAnchor(5,2)
YShift(5,13)
YShift(5,24)
YAnchor(24)
YShift(24,33)
YShift(24,18)
YAnchor(18)
YShift(18,27)
YShift(27,0)
YShift(0,3)
YAnchor(11,8)
YShift(11,7)

YIPAnchor(5,9,11)
YShift(9,14)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="B">
/* VTTTalk glyph 28, char 0x42 (B) */
/* GUI generated Thu Apr 16 12:42:27 2020 */

/* Y direction */
ResYAnchor(0,2)
YShift(0,40)
ResYAnchor(18,8)
YShift(18,30)
YIPAnchor(0,29,18)
YShift(29,41)
YInterpolate(41,9,29)


Smooth()

    </glyphProgram>

    <glyphProgram name="C">
/* VTTTalk Unicode 0x43 (C) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 11 3 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
ResYAnchor(11,3)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(11,19) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YShift(0,28) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="CR">
/* VTTTalk Unicode 0xd */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/


    </glyphProgram>

    <glyphProgram name="D">
/* VTTTalk Unicode 0x44 (D) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 2 */
/* CVT 11 8 */
/* Min and Max */
ResYAnchor(11,8)	/* min, CVT */
ResYAnchor(0,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(0,22) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YShift(11,23) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="Dcroat">
/* VTTTalk glyph 39, char 0x110 */
/* GUI generated Thu Apr 16 13:53:31 2020 */

/* Y direction */
ResYAnchor(4,2)
YShift(4,26)
ResYAnchor(15,8)
YShift(15,27)
YIPAnchor(4,3,15)
YShift(3,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="E">
/* VTTTalk Unicode 0x45 (E) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 2 */
/* CVT 11 8 */
/* Min and Max */
ResYAnchor(11,8)	/* min, CVT */
ResYAnchor(0,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(0,3) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(0,7,11)
YAnchor(7)
YShift(7,4) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YShift(11,8) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="Eng">
/* VTTTalk glyph 113, char 0x14a */
/* GUI generated Tue Apr 21 10:29:02 2020 */

/* Y direction */
YAnchor(0)
YShift(0,7)
YAnchor(15,8)
ResYAnchor(16,2)
YShift(16,19)
YInterpolate(15,18,13,12,21,11,16)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Eth">
/* VTTTalk glyph 37, char 0xd0 */
/* GUI generated Thu Apr 16 13:50:55 2020 */

/* Y direction */
ResYAnchor(4,2)
YShift(4,26)
ResYAnchor(15,8)
YShift(15,27)
YIPAnchor(4,3,15)
YShift(3,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="Euro">
/* VTTTalk glyph 905, char 0x20ac */
/* GUI generated Sat Apr 25 14:23:48 2020 */

/* Y direction */
ResYAnchor(14,3)
YShift(14,22)
ResYAnchor(40,9)
YShift(40,31)
YIPAnchor(40,1,14)
YShift(1,0)
YDist(1,6,&gt;=)
YShift(6,7)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="F">
/* VTTTalk Unicode 0x46 (F) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 2 */
/* CVT 9 8 */
/* Min and Max */
ResYAnchor(9,8)	/* min, CVT */
ResYAnchor(0,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(0,3) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(0,7,9)
YAnchor(7)
YShift(7,4) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="G">
/* VTTTalk glyph 66, char 0x47 (G) */
/* GUI generated Wed Apr 15 14:43:59 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,26)
ResYAnchor(10,3)
YShift(10,17)
YIPAnchor(10,34,0)
YInterpolate(34,29,30,0)
YShift(34,35)
ResYAnchor(37,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="G.ss11">
/* VTTTalk glyph 228, char 0xffff */
/* GUI generated Sun Apr 19 15:30:14 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,29)
ResYAnchor(11,3)
YShift(11,19)
YIPAnchor(11,35,0)
YShift(35,36)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="H">
/* VTTTalk glyph 73, char 0x48 (H) */
/* GUI generated Fri Apr 17 13:13:41 2020 */

/* Y direction */
ResYAnchor(0,2)
YShift(0,5)
ResYAnchor(11,8)
YShift(11,7)
YIPAnchor(0,9,11)
YShift(9,8)
YShift(9,2)
YShift(2,3)

XAnchor(11)
XAnchor(5)

XInterpolate(11,0,1,2,3,4,6,7,8,9,10,5)

Align(10,9,2,1)
Align(7,8,3,4)


/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="Hbar">
/* VTTTalk glyph 74, char 0x126 */
/* GUI generated Fri Apr 17 11:33:29 2020 */

/* Y direction */
ResYAnchor(4,2)
YShift(4,9)
ResYAnchor(15,8)
YShift(15,11)
YIPAnchor(15,13,4)
YShift(13,6)
YDist(13,3,&gt;=2)
YShift(3,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="I">
/* VTTTalk Unicode 0x49 (I) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 2 */
/* CVT 3 8 */
/* Min and Max */
ResYAnchor(3,8)	/* min, CVT */
ResYAnchor(0,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


Smooth()


    </glyphProgram>

    <glyphProgram name="J">
/* VTTTalk Unicode 0x4a (J) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 13 2 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
ResYAnchor(13,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(0,7) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="K">
/* VTTTalk glyph 95, char 0x4b (K) */
/* GUI generated Wed Apr  8 13:09:18 2020 */

/* Y direction */
ResYAnchor(4,2)
YShift(4,1)
ResYAnchor(11,8)
YShift(11,7)
YInterpolate(11,9,2,8,5,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="L">
/* VTTTalk Unicode 0x4c (L) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 2 */
/* CVT 5 8 */
/* Min and Max */
ResYAnchor(5,8)	/* min, CVT */
ResYAnchor(0,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(5,2) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="Lslash">
/* VTTTalk glyph 104, char 0x141 */
/* GUI generated Tue Apr 21 10:27:21 2020 */

/* Y direction */
ResYAnchor(4,2)
ResYAnchor(9,8)
YShift(9,6)
YIPAnchor(9,3,1,4)
YShift(3,0)
YShift(1,2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="M">
/* VTTTalk glyph 105, char 0x4d (M) */
/* GUI generated Wed Apr  8 13:10:10 2020 */

/* Y direction */
ResYAnchor(0,2)
YShift(0,4)
ResYAnchor(12,8)
YShift(12,6)
YInterpolate(12,9,2,7,10,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="N">
/* VTTTalk glyph 107, char 0x4e (N) */
/* GUI generated Wed Apr 15 14:44:39 2020 */

/* Y direction */
ResYAnchor(0,2)
YShift(0,4)
ResYAnchor(9,8)
YShift(9,6)
YInterpolate(9,2,7,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="NULL">
/* VTTTalk Unicode 0x0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/


    </glyphProgram>

    <glyphProgram name="O">
/* VTTTalk Unicode 0x4f (O) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 11 3 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
ResYAnchor(11,3)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(11,31) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YShift(0,22) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="OE">
/* VTTTalk glyph 150, char 0x152 */
/* GUI generated Wed Apr 22 15:18:21 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,32)
YShift(32,28)
ResYAnchor(11,3)
YIPAnchor(11,23,0)
YShift(23,20)
YShift(11,42)
YShift(42,15)
ResYAnchor(16,2)
YShift(16,19)
ResYAnchor(27,8)
YShift(27,24)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="P">
/* VTTTalk Unicode 0x50 (P) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 2 */
/* CVT 13 8 */
/* Min and Max */
ResYAnchor(13,8)	/* min, CVT */
ResYAnchor(0,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(0,24) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(0,11,13)
YAnchor(11)
YShift(11,25) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="Q">
/* VTTTalk glyph 153, char 0x51 (Q) */
/* GUI generated Wed Apr 15 14:45:02 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,26)
YShift(26,23)
ResYAnchor(11,3)
YShift(11,35)
ResYAnchor(25,8)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="R">
/* VTTTalk glyph 154, char 0x52 (R) */
/* GUI generated Wed Apr 15 14:45:11 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,13)
ResYAnchor(1,2)
YShift(1,27)
YIPAnchor(1,15,0)
YShift(15,11)
YShift(15,28)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="S">
/* VTTTalk glyph 162, char 0x53 (S) */
/* GUI generated Wed Apr 15 14:45:25 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,9)
ResYAnchor(26,3)
YShift(26,36)
YInterpolate(0,13,21,26)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="T">
/* VTTTalk Unicode 0x54 (T) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 2 2 */
/* CVT 6 8 */
/* Min and Max */
ResYAnchor(6,8)	/* min, CVT */
ResYAnchor(2,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(2,1) /*perpendicular to the stroke*/
YShift(1,5) /*along bottom edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="Tbar">
/* VTTTalk glyph 176, char 0x166 */
/* GUI generated Sun Apr 19 14:26:05 2020 */

/* Y direction */
ResYAnchor(6,2)
YShift(6,5)
YShift(5,9)
ResYAnchor(10,8)
YIPAnchor(6,0,10)
YShift(0,3)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Thorn">
/* VTTTalk glyph 152, char 0xde */
/* GUI generated Wed Apr 22 15:19:27 2020 */

/* Y direction */
ResYAnchor(0,2)
ResYAnchor(15,8)
YIPAnchor(0,2,13,15)
YShift(2,26)
YShift(13,27)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="U">
/* VTTTalk Unicode 0x55 (U) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 8 2 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
ResYAnchor(8,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(0,17) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(8,24)

Smooth()


    </glyphProgram>

    <glyphProgram name="Ustraitstrokecy">
/* VTTTalk glyph 575, char 0x4b0 */
/* GUI generated Fri Apr 17 13:26:47 2020 */

/* Y direction */
ResYAnchor(5,2)
YShift(5,9)
ResYAnchor(11,8)
YIPAnchor(5,0,11)
YInterpolate(5,7,4,10,0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="V">
/* VTTTalk glyph 205, char 0x56 (V) */
/* GUI generated Wed Apr 15 14:45:43 2020 */

/* Y direction */
ResYAnchor(0,2)
YShift(0,4)
ResYAnchor(6,8)
YInterpolate(6,2,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="W">
/* VTTTalk glyph 206, char 0x57 (W) */
/* GUI generated Wed Apr 15 14:46:33 2020 */

/* Y direction */
ResYAnchor(0,2)
YShift(0,5)
YShift(0,8)
YShift(0,12)
ResYAnchor(17,8)
YShift(17,14)
YInterpolate(17,10,2,15,3,9,6,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="W.ss09">
/* VTTTalk glyph 227, char 0xffff */
/* GUI generated Fri Apr 17 11:58:05 2020 */

/* Y direction */
ResYAnchor(0,2)
YShift(0,4)
YShift(0,7)
YAnchor(8)
YShift(8,12)
YInterpolate(12,2,5,10,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="X">
/* VTTTalk glyph 211, char 0x58 (X) */
/* GUI generated Wed Apr 15 14:47:12 2020 */

/* Y direction */
ResYAnchor(1,2)
YShift(1,5)
ResYAnchor(11,8)
YShift(11,8)
YInterpolate(11,9,6,0,3,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="Y">
/* VTTTalk glyph 212, char 0x59 (Y) */
/* GUI generated Wed Apr 15 14:47:31 2020 */

/* Y direction */
ResYAnchor(1,2)
YShift(1,5)
ResYAnchor(7,8)
YInterpolate(7,6,0,3,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Z">
/* VTTTalk glyph 222, char 0x5a (Z) */
/* GUI generated Wed Apr 15 14:47:48 2020 */

/* Y direction */
ResYAnchor(3,2)
YShift(3,2)
YShift(3,5)
ResYAnchor(9,8)
YShift(9,6)
YShift(6,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="a">
/* VTTTalk glyph 229, char 0x61 (a) */
/* GUI generated Thu Apr 16 11:27:29 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,34)
ResYAnchor(9,7)
YShift(9,44)
YInterpolate(0,31,39,40,12,9)
ResYAnchor(14,6)
ResYAnchor(24,10)
YShift(24,20)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="a.sc">
/* VTTTalk glyph 476, char 0xffff */
/* GUI generated Fri Apr 17 14:58:34 2020 */

/* Y direction */
YAnchor(0,74)
YAnchor(2)
YShift(2,7)
YIPAnchor(0,5,2)
YInterpolate(0,9,5)
YShift(5,4)
YShift(5,10)
YShift(10,8)
YAnchor(3,18)
YAnchor(6,18)

/* X direction */
XAnchor(2)
XAnchor(6)
XAnchor(7)
XInterpolate(2,3,9,7)
DAlign(3,4,8,9)
DAlign(6,5,10,9)

Smooth()

    </glyphProgram>

    <glyphProgram name="a.ss01">
/* VTTTalk glyph 459, char 0xffff */
/* GUI generated Sun Apr 19 14:35:49 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,16)
YAnchor(16)
YShift(0,20)
ResYAnchor(9,7)
YShift(9,14)
YAnchor(14)
YShift(9,28)
YInterpolate(0,17,24,25,12,9)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="a.ss02">
/* VTTTalk glyph 460, char 0xffff */
/* GUI generated Sun Apr 19 14:43:45 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,32)
YAnchor(32)
YShift(0,36)
ResYAnchor(25,7)
YShift(25,18)
YIPAnchor(25,8,0)
YInterpolate(8,42,39,33,0)
YShift(8,46)
YShift(46,11)
YShift(11,43)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="acutecomb">
/* VTTTalk glyph 974, char 0x301 */
/* GUI generated Thu Apr 16 12:05:52 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)
YDist(0,2,&gt;=2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="ae">
/* VTTTalk glyph 254, char 0xe6 */
/* GUI generated Tue Apr 21 11:07:53 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,51)
YShift(51,43)
YShift(0,58)
YShift(58,54)
YShift(54,63)

ResYAnchor(22,7)
YIPAnchor(22,7,0)
YShift(7,72)
YShift(7,10)
YShift(10,69)

YShift(22,16)
YShift(16,25)
YShift(25,13)

YShift(22,28)
YShift(28,87)

YIPAnchor(51,36,28)
YShift(36,91)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="ampersand">
/* VTTTalk glyph 954, char 0x26 (&amp;) */
/* GUI generated Wed Apr 29 14:44:03 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,17)
ResYAnchor(36,3)
YShift(36,44)
YIPAnchor(0,22,36)
YInterpolate(0,28,10,52,22)
YInterpolate(22,9,32,48,36)
YShift(22,55)
YShift(55,58)
YAnchor(54,8)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="apostrophe">
/* VTTTalk glyph 1045, char 0xffff */
/* GUI generated Sun Apr 26 13:06:50 2020 */

/* Y direction */
YAnchor(2)
YDist(2,4,&gt;=2)
YInterpolate(4,0,1,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="approxequal">
/* VTTTalk glyph 937, char 0x2248 */
/* GUI generated Wed Apr 29 15:01:18 2020 */

/* Y direction */
YAnchor(30,18)
YShift(30,37)
YDist(30,18,&gt;=)
YShift(18,3)
YShift(18,14)
YShift(14,7)
YShift(30,26)
YShift(26,41)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="asciicircum">
/* VTTTalk glyph 968, char 0x5e (^) */
/* GUI generated Fri Apr 17 12:02:22 2020 */

/* Y direction */
YAnchor(1,2)
YDist(1,6,&gt;=)
YShift(6,4)
YInterpolate(6,5,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="asciitilde">
/* VTTTalk glyph 938, char 0x7e (~) */
/* GUI generated Wed Apr 29 15:01:48 2020 */

/* Y direction */
YAnchor(19)
YShift(19,9)
YShift(19,27)
YDist(19,5,&gt;=2)
YShift(5,13)
YShift(5,23)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="asterisk">
/* VTTTalk glyph 847, char 0x2a (*) */
/* GUI generated Wed Apr 29 14:22:23 2020 */

/* Y direction */
YAnchor(5,2)
YDist(5,14,&gt;=2)
YShift(14,0)
YInterpolate(14,13,10,1,4,7,9,2,3,8,5)
YShift(14,12)
YShift(12,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="at">
/* VTTTalk glyph 953, char 0x40 (@) */
/* GUI generated Wed Apr 29 14:31:59 2020 */

/* Y direction */
YAnchor(26)
YShift(26,19)
YDist(26,56,&gt;=2)
YShift(56,47)
YAnchor(47)
YShift(47,0)
YShift(56,77)
YShift(77,53)
YShift(53,81)
YAnchor(36,16)
YShift(36,10)
YDist(36,65,&gt;=2)
YShift(65,69)
YAnchor(69)
YShift(65,85)
YShift(85,68)
YShift(68,82)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="b">
/* VTTTalk glyph 256, char 0x62 (b) */
/* GUI generated Thu Apr 16 11:30:10 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,20)
ResYAnchor(5,10)
ResYAnchor(6,0)
ResYAnchor(11,7)
YShift(11,29)
YInterpolate(0,3,34,33,8,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="b.sc">
/* VTTTalk glyph 477, char 0xffff */
/* GUI generated Fri Apr 17 14:59:17 2020 */

/* Y direction */
YAnchor(0,74)
YShift(0,35)
YAnchor(16)
YShift(16,26)
YIPAnchor(0,25,16)
YShift(25,8)
YShift(25,36)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="backslash">
/* VTTTalk Unicode 0x5c (\) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 1 18 */
/* CVT 3 16 */
/* Min and Max */
ResYAnchor(1,18)	/* min, CVT */
ResYAnchor(3,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


Smooth()



    </glyphProgram>

    <glyphProgram name="bar">
/* VTTTalk Unicode 0x7c (|) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="braceleft">
/* VTTTalk glyph 866, char 0x7b ({) */
/* GUI generated Tue Apr 28 15:33:12 2020 */

/* Y direction */
YAnchor(14)
YShift(14,11)
YAnchor(36)
YShift(36,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="braceright">
/* VTTTalk glyph 867, char 0x7d (}) */
/* GUI generated Tue Apr 28 15:34:03 2020 */

/* Y direction */
YAnchor(1)
YShift(1,0)
YAnchor(23)
YShift(23,24)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="bracketleft">
/* VTTTalk glyph 868, char 0x5b ([) */
/* GUI generated Tue Apr 28 15:35:00 2020 */

/* Y direction */
YAnchor(0)
YShift(0,5)
YAnchor(1)
YShift(1,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="bracketright">
/* VTTTalk glyph 869, char 0x5d (]) */
/* GUI generated Tue Apr 28 15:35:22 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)
YAnchor(5)
YShift(5,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="brevecombcy">
/* VTTTalk glyph 1019, char 0xffff */
/* GUI generated Thu Apr 23 14:38:42 2020 */

/* Y direction */
YAnchor(0)
YShift(0,8)
YDist(0,4,&gt;=2)
YShift(4,12)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="brevecombcy.case">
/* VTTTalk glyph 1020, char 0xffff */
/* GUI generated Fri Apr 17 10:43:32 2020 */

/* Y direction */
YAnchor(0)

YDelta(0,1@10;14)

YShift(0,7)
YDist(0,4,&gt;=2)
YShift(4,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="brokenbar">
/* VTTTalk glyph 962, char 0xa6 */
/* GUI generated Wed Apr 29 15:31:27 2020 */

/* Y direction */
YAnchor(1)
YShift(1,3)
YAnchor(3)
YAnchor(4)
YUpToGrid(6)
YShift(4,6)
YAnchor(6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="bullet">
/* VTTTalk glyph 850, char 0x2022 */
/* GUI generated Thu Apr 23 15:18:17 2020 */

/* Y direction */
YAnchor(4)
YShift(4,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="c">
/* VTTTalk Unicode 0x63 (c) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 9 7 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(9,7)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(9,16) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YShift(0,25) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="c.sc">
/* VTTTalk glyph 478, char 0xffff */
/* GUI generated Fri Apr 17 14:59:52 2020 */

/* Y direction */
YAnchor(0,11)
YShift(0,25)
YAnchor(9,75)
YShift(9,16)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="c_t">
/* VTTTalk glyph 469, char 0xffff */
/* GUI generated Tue Apr 21 13:40:12 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,80)

ResYAnchor(9,7)
YShift(9,71)

YShift(9,19)
YAnchor(19)
YShift(19,59)

ResYAnchor(43,11)
YShift(43,36)

ResYAnchor(53,6)
YShift(53,26)
YShift(53,50)
YShift(50,29)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="cent">
/* VTTTalk glyph 900, char 0xa2 */
/* GUI generated Sun Apr 26 12:35:39 2020 */

/* Y direction */
ResYAnchor(10,7)
YDist(10,11,&gt;=)
YShift(10,13)
YShift(10,20)
YShift(20,37)
ResYAnchor(30,11)
YShift(30,1)
YDist(30,31,&gt;=)
YShift(30,21)
YShift(21,36)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="colon">
/* VTTTalk glyph 851, char 0x3a (:) */
/* GUI generated Sat Apr 25 14:10:29 2020 */

/* Y direction */
ResYAnchor(1,6)
YShift(1,0)
YAnchor(4,10)
YShift(4,5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="colonmonetary">
/* VTTTalk glyph 901, char 0x20a1 */
/* GUI generated Sun Apr 26 12:37:43 2020 */

/* Y direction */
ResYAnchor(5,7)
YShift(5,12)
YShift(12,35)
YShift(12,41)
YDist(5,38,&gt;=)
YShift(38,36)
YAnchor(36)
ResYAnchor(30,11)
YShift(30,21)
YShift(30,44)
YShift(30,47)
YDist(30,48,&gt;=)
YShift(48,43)
YAnchor(43)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="comma">
/* VTTTalk glyph 852, char 0x2c (,) */
/* GUI generated Sat Apr 25 14:11:26 2020 */

/* Y direction */
YAnchor(3)
YDist(3,6,&gt;=2)
YInterpolate(6,5,2,3)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="copyright">
/* VTTTalk glyph 957, char 0xa9 */
/* GUI generated Thu Apr 30 13:35:02 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,20)
YDist(0,40,&gt;=2)
YShift(40,68)
ResYAnchor(10,3)
YShift(10,30)
YDist(10,50,&gt;=2)
YShift(50,58)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="currency">
/* VTTTalk glyph 902, char 0xa4 */
/* GUI generated Sun Apr 26 12:38:27 2020 */

/* Y direction */
YAnchor(3)
YShift(3,47)
YAnchor(21)
YShift(21,39)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="d">
/* VTTTalk glyph 264, char 0x64 (d) */
/* GUI generated Thu Apr 16 11:30:33 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,34)
ResYAnchor(9,7)
YShift(9,44)
YInterpolate(0,31,39,40,12,9)
ResYAnchor(14,0)
ResYAnchor(21,10)
YShift(21,20)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="d.sc">
/* VTTTalk glyph 479, char 0xffff */
/* GUI generated Sun Apr 19 15:00:33 2020 */

/* Y direction */
YAnchor(0,74)
YShift(0,21)
YAnchor(11)
YShift(11,22)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="d.ss03">
/* VTTTalk glyph 461, char 0xffff */
/* GUI generated Sun Apr 19 14:47:33 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,20)
ResYAnchor(9,7)
YShift(9,30)
ResYAnchor(13,0)
YAnchor(16,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="dagger">
/* VTTTalk glyph 963, char 0x2020 */
/* GUI generated Wed Apr 29 15:32:37 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)
YAnchor(1)
YShift(1,10)
YShift(1,4)
YShift(4,7)
YAnchor(5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="daggerdbl">
/* VTTTalk glyph 965, char 0x2021 */
/* GUI generated Wed Apr 29 15:34:44 2020 */

/* Y direction */
YAnchor(0)
YAnchor(9)
YIPAnchor(0,4,9)
YShift(4,15)
YShift(4,1)
YShift(1,18)
YDist(4,5,&gt;=)
YShift(5,14)
YShift(5,8)
YShift(8,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="dcroat">
/* VTTTalk glyph 267, char 0x111 */
/* GUI generated Wed Apr 22 14:16:18 2020 */

/* Y direction */
ResYAnchor(4,11)
YShift(4,38)
YShift(38,35)
YShift(38,43)
ResYAnchor(13,7)
YShift(13,48)
YDist(13,3,&gt;=)
YShift(3,0)
YShift(13,16)
YShift(16,44)
ResYAnchor(18,0)
ResYAnchor(25,10)
YShift(25,24)
YShift(24,22)
YShift(22,19)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="degree">
/* VTTTalk glyph 960, char 0xb0 */
/* GUI generated Wed Apr 29 15:30:29 2020 */

/* Y direction */
YAnchor(7)
YShift(7,20)
YDist(7,0,&gt;=2)
YShift(0,14)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="descendercy">
/* VTTTalk glyph 1025, char 0xffff */
/* GUI generated Tue Apr 28 15:08:14 2020 */

/* Y direction */
YAnchor(3)
YDist(3,0,&gt;=2)
YShift(3,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="descendercy.case">
/* VTTTalk glyph 1027, char 0xffff */
/* GUI generated Thu Apr 16 12:16:09 2020 */

/* Y direction */
YAnchor(3)
YShift(3,2)
YDist(3,5,&gt;=2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="divide">
/* VTTTalk glyph 929, char 0xf7 */
/* GUI generated Wed Apr 29 14:50:55 2020 */

/* Y direction */
YAnchor(8)
YShift(8,5)
YAnchor(5)
YShift(5,4)
YShift(8,9)
YUpToGrid(0)
YShift(9,0)
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="dollar">
/* VTTTalk glyph 903, char 0x24 ($) */
/* GUI generated Sun Apr 26 12:41:26 2020 */

/* Y direction */
ResYAnchor(34,9)
YDist(34,2,&gt;=)
YShift(34,43)
YInterpolate(34,0,1,7,4,43)
ResYAnchor(59,3)
YDist(59,8,&gt;=)
YShift(59,17)
YInterpolate(59,6,5,10,11,17)

YInterpolate(34,46,29,54,21,50,25,59)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="dong">
/* VTTTalk glyph 904, char 0x20ab */
/* GUI generated Sun Apr 26 12:46:17 2020 */

/* Y direction */
YAnchor(48)
YShift(48,49)
YDist(48,24,&gt;=)
YShift(24,15)
YAnchor(15)
YShift(24,42)
YShift(24,5)
YAnchor(5)
YShift(5,33)
YInterpolate(24,21,28,29,8,5)
YDist(5,54,&gt;=)
YShift(54,51)
YShift(51,9)
YAnchor(9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="dotbelowcomb">
/* VTTTalk glyph 988, char 0x323 */
/* GUI generated Tue Apr 28 14:55:21 2020 */

/* Y direction */
YAnchor(1)
YShift(1,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="dotlessi">
/* VTTTalk Unicode 0x131 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 6 */
/* CVT 3 10 */
/* Min and Max */
ResYAnchor(3,10)	/* min, CVT */
ResYAnchor(0,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


Smooth()

    </glyphProgram>

    <glyphProgram name="e">
/* VTTTalk glyph 270, char 0x65 (e) */
/* GUI generated Tue Apr 21 12:54:03 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,40)
ResYAnchor(9,7)
YShift(9,31)
YIPAnchor(9,16,0)
YShift(16,23)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="e.sc">
/* VTTTalk glyph 480, char 0xffff */
/* GUI generated Sun Apr 19 15:00:52 2020 */

/* Y direction */
YAnchor(0,74)
YShift(0,3)
YAnchor(11)
YShift(11,8)
YIPAnchor(0,7,11)
YShift(7,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="eight">
/* VTTTalk glyph 775, char 0x38 (8) */
/* GUI generated Thu Apr 30 12:10:01 2020 */

/* Y direction */
ResYAnchor(0,13)
YShift(0,32)
YAnchor(16)
YShift(16,59)
YIPAnchor(16,50,0)
YShift(50,41)
YShift(41,8)
YShift(41,24)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="eight.dnom">
/* VTTTalk glyph 815, char 0xffff */
/* GUI generated Thu Apr 30 16:05:35 2020 */

/* Y direction */
YAnchor(0,11)
YShift(0,30)
YLink(0,16,77)
YShift(16,53)
YIPAnchor(0,38,16)
YShift(38,46)
YShift(38,8)
YShift(8,23)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="eight.lf">
/* VTTTalk glyph 785, char 0xffff */
/* GUI generated Wed Apr 22 14:46:02 2020 */

/* Y direction */
ResYAnchor(5,9)
YShift(5,45)
ResYAnchor(21,3)
YShift(21,63)
YIPAnchor(21,54,5)
YShift(54,13)
YShift(54,29)
YShift(54,36)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="eight.numr">
/* VTTTalk glyph 825, char 0xffff */
/* GUI generated Thu Apr 30 16:29:12 2020 */

/* Y direction */
YAnchor(4,78)
YShift(4,40)
YLink(4,20,77)
YShift(20,54)
YIPAnchor(4,33,20)
YShift(33,47)
YShift(33,12)
YShift(12,27)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="ellipsis">
/* VTTTalk glyph 853, char 0x2026 */
/* GUI generated Sat Apr 25 14:11:59 2020 */

/* Y direction */
YAnchor(0,10)
YShift(0,1)
YShift(1,5)
YShift(5,9)
YShift(0,4)
YShift(4,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="emdash">
/* VTTTalk glyph 872, char 0x2014 */
/* GUI generated Thu Apr 23 15:19:53 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="emptyset">
/* VTTTalk glyph 941, char 0x2205 */
/* GUI generated Wed Apr 29 15:04:10 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,22)
YDist(0,39,&gt;=)
YShift(39,36)
ResYAnchor(9,7)
YShift(9,31)
YDist(9,37,&gt;=)
YShift(37,38)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="endash">
/* VTTTalk glyph 873, char 0x2013 */
/* GUI generated Thu Apr 23 15:20:04 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="eng">
/* VTTTalk glyph 345, char 0x14b */
/* GUI generated Tue Apr 21 11:57:40 2020 */

/* Y direction */
YAnchor(0)
YShift(0,7)
ResYAnchor(24,10)
ResYAnchor(25,6)
ResYAnchor(31,7)
YShift(31,18)
YInterpolate(24,22,27,31)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="equal">
/* VTTTalk glyph 930, char 0x3d (=) */
/* GUI generated Wed Apr 29 14:52:39 2020 */

/* Y direction */
YAnchor(4)
YShift(4,5)
YDist(4,1,&gt;=)
YShift(1,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="estimated">
/* VTTTalk glyph 967, char 0x212e */
/* GUI generated Wed Apr 29 15:37:39 2020 */

/* Y direction */
ResYAnchor(9,7)
YShift(9,24)
ResYAnchor(17,11)
YShift(17,0)
YShift(0,3)
YShift(0,21)
YShift(21,20)
YIPAnchor(17,5,9)
YShift(5,28)
YShift(28,27)
YShift(27,30)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="eth">
/* VTTTalk glyph 265, char 0xf0 */
/* GUI generated Tue Apr 21 12:08:35 2020 */

/* Y direction */
ResYAnchor(5,11)
YShift(5,33)
ResYAnchor(25,0)
YIPAnchor(25,14,5)
YInterpolate(25,54,47,53,52,48,49,51,50,14)
YInterpolate(14,20,0,5)
YShift(14,42)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="exclam">
/* VTTTalk glyph 854, char 0x21 (!) */
/* GUI generated Sat Apr 25 14:12:43 2020 */

/* Y direction */
ResYAnchor(1,2)
ResYAnchor(4)
YShift(4,5)
YShift(5,0)
YAnchor(0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="exclamdown">
/* VTTTalk glyph 855, char 0xa1 */
/* GUI generated Sat Apr 25 14:15:00 2020 */

/* Y direction */
YAnchor(2,10)
YAnchor(3,6)
YDist(3,6,&gt;=)
YShift(6,7)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="f">
/* VTTTalk Unicode 0x66 (f) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 2 6 */
/* CVT 8 1 */
/* CVT 24 14 */
/* Min and Max */
ResYAnchor(24,14)	/* min, CVT */
ResYAnchor(8,1)	/* max, CVT */

/* CVTs - beginning */
YAnchor(2)  /*knot, CVT*/ 
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(8,15) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YShift(2,1) /*perpendicular to the stroke*/
YShift(1,22) /*along bottom edge*/
YShift(2,19) /*along top edge*/

Smooth()



    </glyphProgram>

    <glyphProgram name="f.sc">
/* VTTTalk glyph 481, char 0xffff */
/* GUI generated Sun Apr 19 15:05:38 2020 */

/* Y direction */
YAnchor(0,74)
YShift(0,3)
YAnchor(8)
YIPAnchor(0,4,8)
YShift(4,7)

/* X direction */



Smooth()

    </glyphProgram>

    <glyphProgram name="f_f">
/* VTTTalk glyph 470, char 0xfb00 */
/* GUI generated Tue Apr 28 13:06:31 2020 */

/* Y direction */
YAnchor(0,10)
YAnchor(4,6)
YShift(4,1)
YShift(1,35)
YShift(35,31)
YShift(4,37)
YShift(37,28)
YAnchor(15,1)
YShift(15,23)
YInterpolate(37,41,12,44,9,15)
YAnchor(33,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="f_f_i">
/* VTTTalk glyph 471, char 0xfb03 */
/* GUI generated Fri May  1 11:37:50 2020 */

/* Y direction */
YAnchor(0,10)
YShift(0,35)
YShift(35,31)
YAnchor(4,6)
YShift(4,28)
YShift(4,39)
YShift(4,1)
YShift(1,37)
YShift(37,33)
YAnchor(15,1)
YShift(15,23)
YInterpolate(4,43,12,46,9,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="f_f_l">
/* VTTTalk glyph 472, char 0xfb04 */
/* GUI generated Fri May  1 11:42:32 2020 */

/* Y direction */
YAnchor(0,11)
YShift(0,55)
YAnchor(27,10)
YShift(27,23)
YAnchor(31,6)
YShift(31,18)
YShift(31,64)
YShift(31,28)
YShift(28,21)
YShift(28,25)
YAnchor(42,1)
YShift(42,13)
YInterpolate(31,68,39,71,36,42)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="figuredash">
/* VTTTalk glyph 874, char 0x2012 */
/* GUI generated Thu Apr 23 15:20:12 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="five">
/* VTTTalk glyph 772, char 0x35 (5) */
/* GUI generated Thu Apr 30 12:07:31 2020 */

/* Y direction */
YAnchor(0)
YShift(0,7)
ResYAnchor(25,4)
YShift(25,29)
YIPAnchor(25,33,0)
YShift(33,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="five.dnom">
/* VTTTalk glyph 812, char 0xffff */
/* GUI generated Thu Apr 30 16:02:24 2020 */

/* Y direction */
YAnchor(0,11)
YShift(0,7)
YLink(0,24,77)
YShift(24,27)
YIPAnchor(0,32,24)
YShift(32,14)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="five.lf">
/* VTTTalk glyph 782, char 0xffff */
/* GUI generated Wed Apr 22 13:57:17 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,7)
ResYAnchor(26,2)
YShift(26,29)
YShift(26,25)

YIPAnchor(26,33,0)
YShift(33,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="five.numr">
/* VTTTalk glyph 822, char 0xffff */
/* GUI generated Thu Apr 30 16:19:56 2020 */

/* Y direction */
YAnchor(7,78)
YShift(7,14)
YLink(7,31,77)
YShift(31,34)
YIPAnchor(7,0,31)
YShift(0,21)
YShift(21,35)
YShift(35,24)
YShift(35,25)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="florin">
/* VTTTalk glyph 906, char 0x192 */
/* GUI generated Sat Apr 25 15:19:51 2020 */

/* Y direction */
YAnchor(0)
YShift(0,7)
YAnchor(20,1)
YShift(20,27)
YIPAnchor(20,15,0)
YShift(15,31)
YShift(15,12)
YShift(12,34)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="four">
/* VTTTalk glyph 771, char 0x34 (4) */
/* GUI generated Thu Apr 30 12:07:09 2020 */

/* Y direction */
ResYAnchor(3,4)
YShift(3,12)
YAnchor(9)
YIPAnchor(3,8,9)
YShift(8,1)
YShift(8,5)
YShift(5,13)
YShift(13,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="four.dnom">
/* VTTTalk glyph 811, char 0xffff */
/* GUI generated Thu Apr 30 16:01:22 2020 */

/* Y direction */
YAnchor(0,10)
YLink(0,4,77)
YShift(4,13)
YIPAnchor(0,1,4)
YShift(1,9)
YShift(1,12)
YShift(12,3)
YShift(12,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="four.lf">
/* VTTTalk glyph 781, char 0xffff */
/* GUI generated Wed Apr 22 13:56:56 2020 */

/* Y direction */
YAnchor(0,8)
ResYAnchor(4,2)
YShift(4,12)
YIPAnchor(0,1,4)
YShift(1,9)
YShift(1,11)
YShift(11,3)
YShift(11,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="four.numr">
/* VTTTalk glyph 821, char 0xffff */
/* GUI generated Thu Apr 30 16:16:04 2020 */

/* Y direction */
YAnchor(0,78)
YLink(0,4,77)
YShift(4,13)
YIPAnchor(0,1,4)
YShift(1,9)
YShift(1,12)
YShift(12,3)
YShift(12,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="fraction">
/* VTTTalk glyph 837, char 0x2044 */
/* GUI generated Fri May  1 11:28:40 2020 */

/* Y direction */
ResYAnchor(2,2)
YShift(2,3)
ResYAnchor(5,18)
YShift(5,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="franc">
/* VTTTalk glyph 907, char 0x20a3 */
/* GUI generated Sat Apr 25 15:20:58 2020 */

/* Y direction */
ResYAnchor(0,12)
ResYAnchor(1,2)
YShift(1,4)
YIPAnchor(1,8,0)
YShift(8,5)
YDist(8,11,&gt;=)
YShift(11,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="g">
/* VTTTalk glyph 295, char 0x67 (g) */
/* GUI generated Thu Apr 16 11:31:19 2020 */

/* Y direction */
ResYAnchor(0,15)
YShift(0,7)
ResYAnchor(15,11)
YShift(15,34)
ResYAnchor(24,7)
YShift(24,44)
YInterpolate(0,12,39,40,27,30,11,24)
ResYAnchor(28,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="g.sc">
/* VTTTalk glyph 482, char 0xffff */
/* GUI generated Sun Apr 19 15:07:54 2020 */

/* Y direction */
YAnchor(0,11)
YShift(0,25)
YShift(0,37)
YAnchor(37)
YAnchor(9,75)
YShift(9,16)
YIPAnchor(9,33,0)
YShift(33,34)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="germandbls">
/* VTTTalk glyph 405, char 0xdf */
/* GUI generated Tue Apr 28 11:59:21 2020 */

/* Y direction */
ResYAnchor(23,10)
ResYAnchor(28,3)
YShift(28,17)
ResYAnchor(43,11)
YShift(43,0)
YIPAnchor(28,9,43)
YShift(9,8)
YShift(9,35)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="gravecomb">
/* VTTTalk glyph 973, char 0x300 */
/* GUI generated Thu Apr 16 12:10:28 2020 */

/* Y direction */
YAnchor(3)
YDist(3,1,&gt;=2)
YShift(3,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="greater">
/* VTTTalk glyph 932, char 0x3e (&gt;) */
/* GUI generated Wed Apr 29 14:54:00 2020 */

/* Y direction */
YAnchor(1)
YShift(1,2)
YAnchor(5)
YShift(5,4)
YInterpolate(1,0,3,6,5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="greaterequal">
/* VTTTalk glyph 934, char 0x2265 */
/* GUI generated Wed Apr 29 14:58:49 2020 */

/* Y direction */
YAnchor(10)
YShift(10,4)
YDist(10,0,&gt;=)
YShift(0,3)
YShift(10,7)
YAnchor(7)
YShift(7,6)
YInterpolate(10,9,5,8,7)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="guillemotleft">
/* VTTTalk glyph 879, char 0xab */
/* GUI generated Tue Apr 28 15:38:01 2020 */

/* Y direction */
YAnchor(5)
YShift(5,4)
YShift(5,1)
YAnchor(1)
YShift(1,2)
YInterpolate(5,6,13,10,3,7,0,1)
YShift(1,8)
YShift(8,9)
YShift(5,12)
YShift(12,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="guillemotright">
/* VTTTalk glyph 880, char 0xbb */
/* GUI generated Tue Apr 28 15:40:04 2020 */

/* Y direction */
YAnchor(8)
YShift(8,9)
YShift(8,1)
YShift(1,2)
YShift(8,12)
YAnchor(12)
YShift(12,11)
YInterpolate(8,0,7,3,10,13,6,12)
YShift(12,5)
YShift(5,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="guilsinglleft">
/* VTTTalk glyph 881, char 0x2039 */
/* GUI generated Wed Apr 29 13:46:48 2020 */

/* Y direction */
YAnchor(5)
YShift(5,4)
YShift(5,1)
YAnchor(1)
YShift(1,2)
YInterpolate(5,6,3,0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="guilsinglright">
/* VTTTalk glyph 882, char 0x203a */
/* GUI generated Wed Apr 29 13:47:57 2020 */

/* Y direction */
YAnchor(1)
YShift(1,2)
YShift(1,5)
YAnchor(5)
YShift(5,4)
YInterpolate(1,0,3,6,5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="h">
/* VTTTalk glyph 302, char 0x68 (h) */
/* GUI generated Thu Apr 16 11:32:39 2020 */

/* Y direction */
ResYAnchor(0,0)
ResYAnchor(5,7)
YShift(5,21)
ResYAnchor(27,10)
YShift(27,14)
YInterpolate(27,25,2,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="h.sc">
/* VTTTalk glyph 483, char 0xffff */
/* GUI generated Thu Apr 23 14:10:24 2020 */

/* Y direction */
YAnchor(0,74)
YShift(0,5)
YAnchor(6)
YShift(6,11)
YIPAnchor(0,9,6)
YShift(9,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="hbar">
/* VTTTalk glyph 303, char 0x127 */
/* GUI generated Wed Apr 22 14:03:45 2020 */

/* Y direction */
ResYAnchor(4,0)
ResYAnchor(9,7)
YShift(9,25)
YDist(9,3,&gt;=)
YShift(3,0)
ResYAnchor(31,10)
YShift(31,18)
YInterpolate(31,29,6,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="hcircumflex">
/* VTTTalk glyph 305, char 0x125 */
/* GUI generated Wed Apr 22 14:08:36 2020 */

/* Y direction */
ResYAnchor(7,0)
YDist(7,6,&gt;=)
YShift(6,0)
YDist(6,1,&gt;=2)
YInterpolate(6,5,1)
YShift(6,4)
YShift(4,3)
ResYAnchor(12,7)
YShift(12,28)
ResYAnchor(34,10)
YShift(34,21)
YInterpolate(34,32,9,12)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="hookabovecomb">
/* VTTTalk glyph 983, char 0x309 */
/* GUI generated Thu Apr 16 12:11:11 2020 */

/* Y direction */
YAnchor(10)
YShift(10,11)
YDist(10,4,&gt;=2)
YShift(4,17)
YShift(4,1)
YShift(1,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="hookcy">
/* VTTTalk glyph 1021, char 0xffff */
/* GUI generated Tue Apr 28 15:06:18 2020 */

/* Y direction */
YAnchor(10)
YDist(10,0,&gt;=2)
YShift(0,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="hookcy.case">
/* VTTTalk glyph 1023, char 0xffff */
/* GUI generated Thu Apr 16 12:24:35 2020 */

/* Y direction */
YAnchor(11)
YDist(11,0,&gt;=2)
YShift(0,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="hyphen">
/* VTTTalk glyph 876, char 0x2d (-) */
/* GUI generated Thu Apr 23 15:20:22 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="i">
/* VTTTalk glyph 307, char 0x69 (i) */
/* GUI generated Wed Apr 15 14:49:45 2020 */

/* Y direction */
ResYAnchor(0,6)
YDist(0,7,&gt;=)
YShift(7,4)
ResYAnchor(3,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="i.sc">
/* VTTTalk glyph 484, char 0xffff */
/* GUI generated Thu Apr 23 14:11:21 2020 */

/* Y direction */
YAnchor(0,74)
YAnchor(2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="infinity">
/* VTTTalk glyph 940, char 0x221e */
/* GUI generated Wed Apr 29 15:03:18 2020 */

/* Y direction */
YAnchor(0)
YShift(0,40)
YShift(0,8)
YShift(8,56)
YShift(0,24)
YAnchor(24)
YShift(24,32)
YInterpolate(24,20,60,36,4,0)
YShift(24,16)
YShift(16,48)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="integral">
/* VTTTalk glyph 942, char 0x222b */
/* GUI generated Wed Apr 29 15:04:43 2020 */

/* Y direction */
YAnchor(8)
YShift(8,15)
YAnchor(32)
YShift(32,39)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="j">
/* VTTTalk glyph 323, char 0x6a (j) */
/* GUI generated Wed Apr 15 14:50:08 2020 */

/* Y direction */
YAnchor(0)
YShift(0,7)
ResYAnchor(12,6)
YDist(12,21,&gt;=)
YShift(21,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="j.sc">
/* VTTTalk glyph 485, char 0xffff */
/* GUI generated Thu Apr 23 14:11:41 2020 */

/* Y direction */
YAnchor(0,11)
YShift(0,6)
YAnchor(11,74)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="j.ss04">
/* VTTTalk glyph 462, char 0xffff */
/* GUI generated Sun Apr 19 15:51:17 2020 */

/* Y direction */
ResYAnchor(0,6)
YDist(0,7,&gt;=)
YShift(7,4)
ResYAnchor(3,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="k">
/* VTTTalk glyph 326, char 0x6b (k) */
/* GUI generated Wed Apr 15 14:50:29 2020 */

/* Y direction */
ResYAnchor(15,7)
YShift(15,6)
ResYAnchor(24,0)
ResYAnchor(27,10)
YShift(27,23)
YInterpolate(27,21,0,10,11,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="k.sc">
/* VTTTalk glyph 486, char 0xffff */
/* GUI generated Thu Apr 23 14:12:45 2020 */

/* Y direction */
YAnchor(3,74)
YShift(3,1)
YAnchor(6)
YShift(6,11)
YInterpolate(11,9,2,8,5,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="kgreenlandic">
/* VTTTalk glyph 328, char 0x138 */
/* GUI generated Thu Apr 23 13:13:28 2020 */

/* Y direction */
ResYAnchor(0,6)
YShift(0,4)
ResYAnchor(11,10)
YShift(11,7)
YInterpolate(11,9,2,8,5,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="l">
/* VTTTalk glyph 329, char 0x6c (l) */
/* GUI generated Wed Apr 15 14:50:37 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,14)
ResYAnchor(7,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="l.sc">
/* VTTTalk glyph 487, char 0xffff */
/* GUI generated Thu Apr 23 14:13:08 2020 */

/* Y direction */
YAnchor(0,74)
YAnchor(5)
YShift(5,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="l.ss05">
/* VTTTalk glyph 463, char 0xffff */
/* GUI generated Sun Apr 19 15:52:13 2020 */

/* Y direction */
ResYAnchor(0,0)
YAnchor(7,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="less">
/* VTTTalk glyph 933, char 0x3c (&lt;) */
/* GUI generated Wed Apr 29 14:54:32 2020 */

/* Y direction */
YAnchor(1)
YShift(1,2)
YAnchor(5)
YShift(5,4)
YInterpolate(5,6,3,0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="lessequal">
/* VTTTalk glyph 935, char 0x2264 */
/* GUI generated Wed Apr 29 14:59:41 2020 */

/* Y direction */
YAnchor(9)
YShift(9,8)
YDist(9,2,&gt;=)
YShift(2,3)
YShift(9,5)
YAnchor(5)
YShift(5,6)
YInterpolate(9,10,7,4,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="lira">
/* VTTTalk glyph 911, char 0x20a4 */
/* GUI generated Tue Apr 28 13:48:22 2020 */

/* Y direction */
ResYAnchor(4,9)
YShift(4,53)
YShift(4,11)
YAnchor(11)
YShift(11,12)
YShift(12,46)
YShift(46,8)
YShift(8,49)
ResYAnchor(26,3)
YShift(26,33)
YIPAnchor(4,60,26)
YShift(60,63)
YDist(60,3,&gt;=)
YShift(3,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="logicalnot">
/* VTTTalk glyph 939, char 0xac */
/* GUI generated Wed Apr 29 15:02:31 2020 */

/* Y direction */
YAnchor(5)
YShift(5,4)
YShift(4,2)
YAnchor(2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="lozenge">
/* VTTTalk glyph 952, char 0x25ca */
/* GUI generated Wed Apr 29 13:42:25 2020 */

/* Y direction */
YAnchor(3,18)
YShift(3,9)
ResYAnchor(5,3)
YShift(5,7)
YInterpolate(3,6,1,4,8,5)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="lslash">
/* VTTTalk glyph 336, char 0x142 */
/* GUI generated Thu Apr 23 13:14:37 2020 */

/* Y direction */
ResYAnchor(4,11)
YShift(4,18)
YShift(4,3)
YShift(3,0)
ResYAnchor(11,0)
YShift(11,1)
YShift(1,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="m">
/* VTTTalk glyph 337, char 0x6d (m) */
/* GUI generated Thu Apr 16 11:33:19 2020 */

/* Y direction */
ResYAnchor(0,6)
ResYAnchor(5,7)
YShift(5,41)
YShift(5,13)
YShift(13,28)
ResYAnchor(46,10)
YShift(46,22)
YShift(46,34)
YInterpolate(46,32,44,9,2,38,5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="m.sc">
/* VTTTalk glyph 488, char 0xffff */
/* GUI generated Thu Apr 23 14:14:06 2020 */

/* Y direction */
YAnchor(0,74)
YShift(0,4)
YAnchor(5)
YShift(5,12)
YInterpolate(12,8,9,2,7,10,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="minus">
/* VTTTalk glyph 927, char 0x2212 */
/* GUI generated Wed Apr 29 14:48:37 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="minute">
/* VTTTalk glyph 969, char 0x2032 */
/* GUI generated Fri Apr 17 12:02:40 2020 */

/* Y direction */
YAnchor(0)
YDist(0,1,&gt;=2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="multiply">
/* VTTTalk glyph 928, char 0xd7 */
/* GUI generated Wed Apr 29 14:49:33 2020 */

/* Y direction */
YAnchor(3,18)
YShift(3,4)
YShift(3,1)
YShift(1,0)
YShift(3,7)
YAnchor(7)
YShift(7,6)
YInterpolate(3,2,11,5,8,7)
YShift(7,9)
YShift(9,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="n">
/* VTTTalk glyph 339, char 0x6e (n) */
/* GUI generated Thu Apr 16 11:33:33 2020 */

/* Y direction */
ResYAnchor(0,6)
ResYAnchor(6,7)
YShift(6,22)
ResYAnchor(28,10)
YShift(28,15)
YInterpolate(28,26,2,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="n.sc">
/* VTTTalk glyph 489, char 0xffff */
/* GUI generated Thu Apr 23 14:14:36 2020 */

/* Y direction */
YAnchor(0,74)
YShift(0,4)
YAnchor(5)
YShift(5,9)
YInterpolate(5,2,7,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="nine">
/* VTTTalk Unicode 0x39 (9) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(8,5)	/* max */

/* YDir: Stroke #0 */
YShift(8,41) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(8,17,0)
YAnchor(17)
YShift(17,32) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YShift(0,25) /*perpendicular to the stroke*/

Smooth()



    </glyphProgram>

    <glyphProgram name="nine.dnom">
/* VTTTalk glyph 816, char 0xffff */
/* GUI generated Thu Apr 30 16:06:37 2020 */

/* Y direction */
YAnchor(0,11)
YShift(0,7)
YLink(0,21,77)
YShift(21,35)
YIPAnchor(0,14,21)
YShift(14,28)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="nine.lf">
/* VTTTalk glyph 786, char 0xffff */
/* GUI generated Wed Apr 22 14:47:12 2020 */

/* Y direction */
ResYAnchor(19,9)
YShift(19,12)
ResYAnchor(27,3)
YShift(27,32)
YIPAnchor(27,4,19)
YShift(4,41)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="nine.numr">
/* VTTTalk glyph 826, char 0xffff */
/* GUI generated Thu Apr 30 16:30:41 2020 */

/* Y direction */
YAnchor(0,78)
YShift(0,7)
YLink(0,21,77)
YShift(21,35)
YIPAnchor(0,14,21)
YShift(14,28)
YShift(28,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="notequal">
/* VTTTalk glyph 931, char 0x2260 */
/* GUI generated Wed Apr 29 14:53:23 2020 */

/* Y direction */
YAnchor(11)
YDist(11,4,&gt;=)
YShift(4,7)
YShift(7,0)
YAnchor(0)
YShift(11,8)
YShift(8,1)
YAnchor(1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="numbersign">
/* VTTTalk glyph 856, char 0x23 (#) */
/* GUI generated Sat Apr 25 14:17:23 2020 */

/* Y direction */
YAnchor(11,8)
YShift(11,7)
YAnchor(20,2)
YShift(20,24)
YIPAnchor(11,12,16,20)
YShift(12,5)
YShift(12,9)
YShift(12,15)
YShift(15,31)
YShift(31,2)
YShift(16,19)
YShift(19,22)
YShift(22,26)
YShift(16,30)
YShift(30,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="o">
/* VTTTalk Unicode 0x6f (o) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 9 7 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(9,7)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(9,27) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YShift(0,18) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="o.sc">
/* VTTTalk glyph 490, char 0xffff */
/* GUI generated Fri Apr 17 12:28:05 2020 */

/* Y direction */
YAnchor(0,11)
YShift(0,18)
YAnchor(9,75)
YShift(9,27)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="oe">
/* VTTTalk glyph 382, char 0x153 */
/* GUI generated Sun Apr 26 12:52:05 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,47)
YShift(0,39)
YShift(39,31)
ResYAnchor(9,7)
YShift(9,56)
YIPAnchor(9,24,0)
YInterpolate(9,13,24)
YInterpolate(24,43,0)
YShift(24,75)
YShift(9,16)
YShift(16,71)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="one">
/* VTTTalk glyph 768, char 0x31 (1) */
/* GUI generated Sat Apr 25 14:01:44 2020 */

/* Y direction */
ResYAnchor(13,4)
YShift(13,2)
YShift(2,8)
YShift(8,7)
ResYAnchor(18,12)
YShift(18,0)
YShift(0,15)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="one.dnom">
/* VTTTalk glyph 808, char 0xffff */
/* GUI generated Thu Apr 30 15:57:59 2020 */

/* Y direction */
YAnchor(17,10)
YShift(17,1)
YShift(1,14)
YLink(17,12,77)
YShift(12,2)
YShift(2,7)
YShift(7,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="one.lf">
/* VTTTalk glyph 778, char 0xffff */
/* GUI generated Fri Apr 17 10:33:46 2020 */

/* Y direction */
ResYAnchor(13,2)
YShift(13,2)
YShift(2,8)
YShift(8,7)
YAnchor(18)
YShift(18,0)
YShift(0,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="one.numr">
/* VTTTalk glyph 818, char 0xffff */
/* GUI generated Thu Apr 30 16:11:57 2020 */

/* Y direction */
YAnchor(2,78)
YShift(2,4)
YShift(4,17)
YLink(2,15,77)
YShift(15,5)
YShift(15,10)
YShift(10,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="onehalf">
/* VTTTalk glyph 838, char 0xbd */
/* GUI generated Fri May  1 11:56:36 2020 */

/* Y direction */
YAnchor(0,10)
YShift(0,33)
YLink(0,21,77)
YShift(21,12)
YInterpolate(0,29,4,9,24,21)
YShift(0,59)
YAnchor(59)
YShift(59,54)
YAnchor(38,78)
YShift(38,40)
YShift(40,53)
YLink(38,51,77)
YShift(51,41)
YShift(51,46)
YShift(46,45)
YShift(51,56)
YAnchor(56)
YShift(56,57)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="ordfeminine">
/* VTTTalk glyph 502, char 0xaa */
/* GUI generated Wed Apr 29 12:42:15 2020 */

/* Y direction */
YAnchor(23,2)
YShift(23,17)
YDist(23,0,&gt;=5)
YIPAnchor(0,7,23)
YShift(7,56)
YShift(7,10)
YShift(10,53)
YShift(0,36)
YAnchor(36)
YShift(36,35)
YShift(0,48)
YShift(48,45)
YShift(45,52)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="ordmasculine">
/* VTTTalk glyph 503, char 0xba */
/* GUI generated Wed Apr 29 12:44:05 2020 */

/* Y direction */
YAnchor(9,2)
YShift(9,25)
YDist(9,0,&gt;=5)
YShift(0,18)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="oslash">
/* VTTTalk glyph 376, char 0xf8 */
/* GUI generated Tue Apr 28 11:23:49 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,18)
ResYAnchor(9,7)
YShift(9,27)
YShift(9,45)
YAnchor(45)
YShift(45,44,47,41,42)
YShift(0,40,43,36,37,38)
YAnchor(38)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="p">
/* VTTTalk glyph 383, char 0x70 (p) */
/* GUI generated Thu Apr 16 11:33:51 2020 */

/* Y direction */
ResYAnchor(0,6)
ResYAnchor(5,7)
YShift(5,29)
ResYAnchor(14,11)
YShift(14,20)
YInterpolate(14,17,35,34,2,5)
ResYAnchor(19,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="p.sc">
/* VTTTalk glyph 491, char 0xffff */
/* GUI generated Thu Apr 23 14:16:21 2020 */

/* Y direction */
YAnchor(0,74)
YShift(0,22)
YAnchor(12)
YIPAnchor(0,11,12)
YShift(11,23)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="paragraph">
/* VTTTalk glyph 955, char 0xb6 */
/* GUI generated Wed Apr 29 14:45:27 2020 */

/* Y direction */
ResYAnchor(4,2)
YShift(4,22)
YShift(22,27)
YShift(27,7)
YAnchor(13)
YShift(13,9)
YIPAnchor(13,14,4)
YShift(14,11)
YShift(11,10)
YShift(14,21)
YShift(21,28)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="parenleft">
/* VTTTalk glyph 870, char 0x28 (() */
/* GUI generated Tue Apr 28 15:35:44 2020 */

/* Y direction */
YAnchor(4)
YShift(4,5)
YAnchor(15)
YShift(15,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="parenright">
/* VTTTalk glyph 871, char 0x29 ()) */
/* GUI generated Tue Apr 28 15:36:10 2020 */

/* Y direction */
YAnchor(5)
YShift(5,6)
YAnchor(15)
YShift(15,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="partialdiff">
/* VTTTalk glyph 949, char 0x2202 */
/* GUI generated Wed Apr 29 15:11:19 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,34)
ResYAnchor(27,3)
YShift(27,20)
YIPAnchor(0,9,27)
YShift(9,43)
YShift(43,39)
YShift(39,12)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="percent">
/* VTTTalk glyph 950, char 0x25 (%) */
/* GUI generated Wed Apr 29 13:33:23 2020 */


/* Y direction */
ResYAnchor(7,3)
YShift(7,21)
YShift(7,0)
YAnchor(0)
YShift(0,14)
YShift(7,58)
YAnchor(58)
YShift(58,59)


ResYAnchor(28,9)
YShift(28,42)
YShift(28,35)
YAnchor(35)
YShift(35,49)
YShift(28,61)
YAnchor(61)
YShift(61,56)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="period">
/* VTTTalk glyph 857, char 0x2e (.) */
/* GUI generated Sat Apr 25 14:18:04 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="periodcentered">
/* VTTTalk glyph 849, char 0xb7 */
/* GUI generated Wed Apr 29 14:23:27 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="periodcentered.loclCAT">
/* VTTTalk glyph 865, char 0xffff */
/* GUI generated Wed Apr 29 15:26:55 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="perthousand">
/* VTTTalk glyph 951, char 0x2030 */
/* GUI generated Wed Apr 29 13:41:02 2020 */

/* Y direction */
ResYAnchor(7,3)
YShift(7,21)
YShift(7,0)
YAnchor(0)
YShift(0,14)
YShift(7,86)
YAnchor(86)
YShift(86,87)
YAnchor(28,9)
YShift(28,42)
YShift(28,35)
YAnchor(35)
YShift(35,49)
YShift(35,63)
YShift(63,77)
YShift(28,56)
YShift(56,70)
YShift(28,89)
YAnchor(89)
YShift(89,84)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="peseta">
/* VTTTalk glyph 915, char 0x20a7 */
/* GUI generated Tue Apr 28 14:10:11 2020 */

/* Y direction */
YAnchor(0,8)
ResYAnchor(1,2)
YShift(1,25)
YIPAnchor(0,12,1)
YShift(12,14)

ResYAnchor(30,11)
YShift(30,48)

YAnchor(38,6)
YDist(38,39,&gt;=)

YShift(38,41)
YShift(38,35)
YShift(35,44)

ResYAnchor(53,11)
YShift(53,60)

ResYAnchor(76,7)
YShift(76,83)

YInterpolate(53,64,94,68,90,72,87,76)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="pi">
/* VTTTalk glyph 766, char 0x3c0 */
/* GUI generated Sat Apr 25 13:53:00 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,17)
ResYAnchor(7,10)
ResYAnchor(10,6)
YShift(10,9)
YShift(9,5)
YShift(9,13)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="plus">
/* VTTTalk glyph 926, char 0x2b (+) */
/* GUI generated Tue Apr 28 14:50:25 2020 */

/* Y direction */
YAnchor(8)
YShift(8,9)
YShift(8,11)
YShift(8,5)
YShift(5,2)
YShift(5,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="plusminus">
/* VTTTalk glyph 936, char 0xb1 */
/* GUI generated Wed Apr 29 15:00:26 2020 */

/* Y direction */
YAnchor(10,18)
YShift(10,6)
YShift(10,8)
YShift(8,1)
YAnchor(1)
YShift(1,0)
YShift(10,11)
YShift(11,13)
YShift(11,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="product">
/* VTTTalk glyph 945, char 0x220f */
/* GUI generated Wed Apr 29 15:06:48 2020 */

/* Y direction */
YAnchor(3)
YShift(3,11)
ResYAnchor(6,2)
YShift(6,4)
YShift(4,1)
YShift(4,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="q">
/* VTTTalk glyph 385, char 0x71 (q) */
/* GUI generated Sun Apr 19 15:53:19 2020 */

/* Y direction */
ResYAnchor(3,11)
YShift(3,20)
ResYAnchor(12,7)
YShift(12,29)
YInterpolate(3,0,24,25,15,12)
ResYAnchor(16,6)
ResYAnchor(19,14)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="q.sc">
/* VTTTalk glyph 492, char 0xffff */
/* GUI generated Thu Apr 23 14:16:51 2020 */

/* Y direction */
YAnchor(0,11)
YShift(0,38)
YAnchor(38)
YShift(0,18)
YShift(18,36)
YAnchor(9,75)
YShift(9,27)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="q.ss06">
/* VTTTalk glyph 464, char 0xffff */
/* GUI generated Sun Apr 19 15:54:25 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,34)
ResYAnchor(9,7)
YShift(9,43)
YInterpolate(0,31,38,39,12,9)
YAnchor(13,6)
ResYAnchor(21,14)
YShift(21,20)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="question">
/* VTTTalk glyph 858, char 0x3f (?) */
/* GUI generated Wed Apr 29 14:13:24 2020 */

/* Y direction */
ResYAnchor(21,3)
YShift(21,12)
YAnchor(35,8)
YShift(35,36)
YShift(36,0)
YAnchor(0)

/* X direction */

Smooth()




    </glyphProgram>

    <glyphProgram name="questiondown">
/* VTTTalk Unicode 0xbf */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Y direction */
YAnchor(21,14)
YShift(21,12)
YAnchor(38,6)
YShift(38,37)
YShift(37,34)
YAnchor(34)

/* X direction */

Smooth()




    </glyphProgram>

    <glyphProgram name="quotedbl">
/* VTTTalk glyph 860, char 0x22 (") */
/* GUI generated Wed Apr 29 15:24:16 2020 */

/* Y direction */
ResYAnchor(1,2)
YShift(1,5)
YDist(1,0,&gt;=2)
YShift(0,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="quotedblbase">
/* VTTTalk glyph 883, char 0x201e */
/* GUI generated Wed Apr 29 14:03:01 2020 */


/* Y direction */
YAnchor(3)
YShift(3,10)
YDist(3,6,&gt;=2)
YShift(6,7)
YInterpolate(6,8,1,5,12,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="quotedblleft">
/* VTTTalk glyph 884, char 0x201c */
/* GUI generated Wed Apr 29 14:06:10 2020 */

/* Y direction */
YAnchor(6)
YShift(6,13)
YDist(6,4,&gt;=2)
YShift(4,11)
YInterpolate(4,8,1,5,12,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="quotedblright">
/* VTTTalk glyph 885, char 0x201d */
/* GUI generated Wed Apr 29 14:07:30 2020 */

/* Y direction */
YAnchor(10)
YShift(10,3)
YDist(10,13,&gt;=2)
YShift(13,0)
YInterpolate(13,5,9,12,8,2,1,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="quoteleft">
/* VTTTalk glyph 886, char 0x2018 */
/* GUI generated Wed Apr 29 14:08:36 2020 */

/* Y direction */
YAnchor(6)
YShift(6,4)
YAnchor(4)
YInterpolate(4,1,5,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="quoteright">
/* VTTTalk glyph 887, char 0x2019 */
/* GUI generated Wed Apr 29 14:09:05 2020 */

/* Y direction */
YAnchor(3)
YShift(3,6)
YAnchor(6)
YInterpolate(6,5,1,3)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="quotesinglbase">
/* VTTTalk glyph 888, char 0x201a */
/* GUI generated Wed Apr 29 14:09:42 2020 */

/* Y direction */
YAnchor(3)
YShift(3,6)
YAnchor(6)
YInterpolate(6,5,1,3)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="quotesingle">
/* VTTTalk glyph 861, char 0x27 (') */
/* GUI generated Wed Apr 29 15:24:45 2020 */

/* Y direction */
ResYAnchor(1,2)
YDist(1,3,&gt;=2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="r">
/* VTTTalk glyph 386, char 0x72 (r) */
/* GUI generated Thu Apr 16 11:34:03 2020 */

/* Y direction */
ResYAnchor(0,6)
YShift(0,8)
YShift(8,9)
ResYAnchor(14,10)
YInterpolate(14,12,2,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="r.sc">
/* VTTTalk glyph 493, char 0xffff */
/* GUI generated Thu Apr 23 14:18:10 2020 */

/* Y direction */
YAnchor(0,74)
YShift(0,25)
YAnchor(10)
YShift(10,15)
YIPAnchor(0,13,10)
YShift(13,9)
YShift(13,26)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="radical">
/* VTTTalk glyph 947, char 0x221a */
/* GUI generated Wed Apr 29 15:08:46 2020 */

/* Y direction */
YAnchor(0)
YShift(0,3)
YShift(0,9)
YAnchor(9)
YShift(9,8)
YShift(8,1)
YAnchor(4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="registered">
/* VTTTalk glyph 958, char 0xae */
/* GUI generated Thu Apr 30 13:54:48 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,20)
YDist(0,54,&gt;=2)
YShift(54,50)
YAnchor(50)
ResYAnchor(10,3)
YShift(10,29)
YDist(10,39,&gt;=2)
YShift(39,62)
YIPAnchor(54,63,39)
YShift(63,52)
YShift(52,48)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="s">
/* VTTTalk glyph 394, char 0x73 (s) */
/* GUI generated Thu Apr 16 11:34:12 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,7)
ResYAnchor(22,7)
YShift(22,29)
YInterpolate(0,11,14,36,18,22)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="s.sc">
/* VTTTalk glyph 494, char 0xffff */
/* GUI generated Thu Apr 23 14:19:08 2020 */

/* Y direction */
YAnchor(0,11)
YShift(0,8)
YAnchor(23,75)
YShift(23,31)
YInterpolate(0,11,42,15,38,18,35,23)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="s_t">
/* VTTTalk glyph 475, char 0xfb06 */
/* GUI generated Thu Apr 30 12:24:29 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,8)
ResYAnchor(26,7)
YShift(26,90)
YInterpolate(0,13,103,17,98,21,94,26)
YShift(26,30)
YShift(30,87)
YShift(87,86)
YShift(26,38)
YAnchor(38)
YShift(38,79)
ResYAnchor(63,11)
YShift(63,54)
ResYAnchor(73,6)
YShift(73,44)
YShift(73,70)
YShift(70,47)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="section">
/* VTTTalk glyph 956, char 0xa7 */
/* GUI generated Wed Apr 29 15:42:49 2020 */

/* Y direction */
YAnchor(7)
YShift(7,15)
ResYAnchor(39,3)
YShift(39,49)
YInterpolate(7,20,0,24,71,74,65,78,81,57,31,54,39)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="semicolon">
/* VTTTalk glyph 862, char 0x3b (;) */
/* GUI generated Wed Apr 29 15:26:13 2020 */

/* Y direction */
ResYAnchor(1,6)
YShift(1,0)
YAnchor(7)
YDist(7,4,&gt;=2)
YInterpolate(4,9,5,7)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="seven">
/* VTTTalk Unicode 0x37 (7) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 2 4 */
/* Min and Max */
YAnchor(4)	/* min */
ResYAnchor(2,4)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(2,1) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="seven.dnom">
/* VTTTalk glyph 814, char 0xffff */
/* GUI generated Thu Apr 30 16:04:29 2020 */

/* Y direction */
YAnchor(4,10)
YLink(4,2,77)
YShift(2,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="seven.lf">
/* VTTTalk glyph 784, char 0xffff */
/* GUI generated Wed Apr 22 14:45:28 2020 */

/* Y direction */
ResYAnchor(2,2)
YShift(2,1)
YAnchor(4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="seven.numr">
/* VTTTalk glyph 824, char 0xffff */
/* GUI generated Thu Apr 30 16:26:57 2020 */

/* Y direction */
YAnchor(5,78)
YLink(5,2,77)
YShift(2,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="six">
/* VTTTalk glyph 773, char 0x36 (6) */
/* GUI generated Wed Apr 15 19:45:33 2020 */

/* Y direction */
ResYAnchor(0,13)
YShift(0,32)
YAnchor(24)
YShift(24,17)
YIPAnchor(24,9,0)
YShift(9,41)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="six.dnom">
/* VTTTalk glyph 813, char 0xffff */
/* GUI generated Thu Apr 30 16:03:47 2020 */

/* Y direction */
YAnchor(23,11)
YShift(23,27)
YLink(23,16,77)
YShift(16,9)
YIPAnchor(23,3,16)
YShift(3,34)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="six.lf">
/* VTTTalk glyph 783, char 0xffff */
/* GUI generated Wed Apr 22 13:59:39 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,31)
ResYAnchor(23,3)
YShift(23,16)
YIPAnchor(23,9,0)
YShift(9,40)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="six.numr">
/* VTTTalk glyph 823, char 0xffff */
/* GUI generated Thu Apr 30 16:26:25 2020 */

/* Y direction */
YAnchor(23,78)
YShift(23,27)
YLink(23,16,77)
YShift(16,9)
YIPAnchor(23,3,16)
YInterpolate(23,30,6,3)
YShift(3,34)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="slash">
/* VTTTalk Unicode 0x2f (/) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 16 */
/* CVT 2 18 */
/* Min and Max */
ResYAnchor(2,18)	/* min, CVT */
ResYAnchor(0,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


Smooth()



    </glyphProgram>

    <glyphProgram name="space">
/* VTTTalk Unicode 0x20 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="sterling">
/* VTTTalk glyph 919, char 0xa3 */
/* GUI generated Tue Apr 28 14:22:59 2020 */

/* Y direction */
ResYAnchor(18,3)
YShift(18,25)
ResYAnchor(52,9)
YShift(52,45)
YIPAnchor(52,0,18)
YShift(0,3)
YShift(52,59)
YAnchor(59)
YShift(59,4)
YShift(59,38)
YShift(38,41)
YShift(38,56)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="summation">
/* VTTTalk glyph 946, char 0x2211 */
/* GUI generated Wed Apr 29 15:07:53 2020 */

/* Y direction */
ResYAnchor(1,2)
YShift(1,12)
YShift(12,2)
YShift(12,11)
YAnchor(5,8)
YInterpolate(5,10,3,1)
YShift(5,8)
YShift(8,4)
YShift(8,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="t">
/* VTTTalk glyph 406, char 0x74 (t) */
/* GUI generated Tue Apr 28 12:01:48 2020 */

/* Y direction */
ResYAnchor(6,6)
YDist(6,8,&gt;=)
YShift(6,10)
YShift(6,5)
YShift(5,13)
ResYAnchor(29,11)
YShift(29,20)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="t.sc">
/* VTTTalk glyph 495, char 0xffff */
/* GUI generated Thu Apr 23 14:19:43 2020 */

/* Y direction */
YAnchor(2,74)
YShift(2,1)
YShift(1,5)
YAnchor(6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="t.ss07">
/* VTTTalk glyph 465, char 0xffff */
/* GUI generated Sun Apr 19 15:55:56 2020 */

/* Y direction */
ResYAnchor(3,6)
YShift(3,4)
YAnchor(4)
YShift(3,6)
YShift(3,0)
YShift(0,9)
YAnchor(11,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="tailcy">
/* VTTTalk glyph 1022, char 0xffff */
/* GUI generated Tue Apr 28 15:07:06 2020 */

/* Y direction */
YAnchor(4)
YDist(4,6,&gt;=2)
YShift(4,3)
YShift(3,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="tailcy.case">
/* VTTTalk glyph 1024, char 0xffff */
/* GUI generated Fri Apr 17 10:46:23 2020 */

/* Y direction */
YAnchor(4)
YShift(4,3)
YDist(4,6,&gt;=2)
YShift(3,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="tbar">
/* VTTTalk glyph 407, char 0x167 */
/* GUI generated Tue Apr 28 12:05:13 2020 */

/* Y direction */
ResYAnchor(11,6)
YDist(11,12,&gt;=)
YShift(11,14)
YDist(11,0,&gt;=)
YShift(0,3)
YShift(11,8)
YShift(8,17)
ResYAnchor(33,11)
YShift(33,24)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="thorn">
/* VTTTalk glyph 384, char 0xfe */
/* GUI generated Tue Apr 28 11:32:16 2020 */

/* Y direction */
ResYAnchor(0,14)
YAnchor(1)
ResYAnchor(6,7)
YShift(6,29)
ResYAnchor(15,11)
YShift(15,20)
YInterpolate(15,18,35,34,3,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="three">
/* VTTTalk glyph 770, char 0x33 (3) */
/* GUI generated Thu Apr 30 12:04:35 2020 */

/* Y direction */
YAnchor(0)
YShift(0,7)
ResYAnchor(32,5)
YShift(32,24)
YIPAnchor(32,16,0)
YShift(16,15)
YShift(15,39)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="three.dnom">
/* VTTTalk glyph 810, char 0xffff */
/* GUI generated Thu Apr 30 16:00:10 2020 */

/* Y direction */
YAnchor(0,11)
YShift(0,8)
YLink(0,32,77)
YShift(32,24)
YIPAnchor(0,15,32)
YShift(15,18)
YShift(15,38)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="three.lf">
/* VTTTalk glyph 780, char 0xffff */
/* GUI generated Fri Apr 17 10:35:24 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,9)
ResYAnchor(35,3)
YShift(35,26)
YIPAnchor(35,17,0)
YShift(17,18)
YShift(17,43)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="three.numr">
/* VTTTalk glyph 820, char 0xffff */
/* GUI generated Thu Apr 30 16:14:50 2020 */

/* Y direction */
YAnchor(0,78)
YShift(0,8)
YLink(0,32,77)
YShift(32,24)
YIPAnchor(0,15,32)
YShift(15,18)
YShift(15,38)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="tildecomb">
/* VTTTalk glyph 981, char 0x303 */
/* GUI generated Thu Apr 16 12:14:14 2020 */

/* Y direction */
YAnchor(0)
YShift(0,8)
YShift(0,19)
YDist(0,14,&gt;=2)
YShift(14,4)
YShift(14,23)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="trademark">
/* VTTTalk glyph 959, char 0x2122 */
/* GUI generated Thu Apr 30 14:16:38 2020 */

/* Y direction */
ResYAnchor(6,2)
YShift(6,3)
YAnchor(3)
YIPAnchor(3,17,6)
YShift(17,10)
YShift(3,20)
YAnchor(20)
YShift(20,14)
YAnchor(14)
YShift(6,5)
YShift(5,1)
YShift(6,8)
YAnchor(8)
YShift(8,11)
YShift(8,18)
YShift(18,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="two">
/* VTTTalk Unicode 0x32 (2) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 12 */
/* CVT 25 4 */
/* Min and Max */
ResYAnchor(0,12)	/* min, CVT */
ResYAnchor(25,5)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(25,14) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YShift(0,39) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="two.dnom">
/* VTTTalk glyph 809, char 0xffff */
/* GUI generated Thu Apr 30 15:58:56 2020 */

/* Y direction */
YAnchor(0,10)
YShift(0,33)
YLink(0,21,77)
YShift(21,12)
YInterpolate(0,29,4,9,24,21)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="two.lf">
/* VTTTalk glyph 779, char 0xffff */
/* GUI generated Fri Apr 17 10:34:36 2020 */

/* Y direction */
YAnchor(0)
YShift(0,39)
ResYAnchor(24,3)
YShift(24,14)
YInterpolate(0,34,5,10,24)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="two.numr">
/* VTTTalk glyph 819, char 0xffff */
/* GUI generated Thu Apr 30 16:13:57 2020 */

/* Y direction */
YAnchor(0,78)
YShift(0,33)
YLink(0,21,77)
YShift(21,12)
YInterpolate(21,24,9,4,29,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="u">
/* VTTTalk glyph 414, char 0x75 (u) */
/* GUI generated Thu Apr 16 11:34:26 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,12)
ResYAnchor(6,6)
YShift(6,18)
YInterpolate(0,35,16,6)
ResYAnchor(25,10)
YShift(25,24)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="u.sc">
/* VTTTalk glyph 496, char 0xffff */
/* GUI generated Thu Apr 23 14:20:04 2020 */

/* Y direction */
YAnchor(0,11)
YShift(0,17)
YAnchor(8,74)
YShift(8,24)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="u.ss08">
/* VTTTalk glyph 466, char 0xffff */
/* GUI generated Tue Apr 21 13:36:34 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,16)
YShift(0,24)
YAnchor(24)
YAnchor(8)
YShift(8,22)
YInterpolate(8,20,25,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="underscore">
/* VTTTalk glyph 864, char 0x5f (_) */
/* GUI generated Wed Apr 15 13:49:49 2020 */

/* Y direction */
YAnchor(2)
YShift(2,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni00A0">
/* VTTTalk Unicode 0xa0 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni00AD">
/* VTTTalk glyph 878, char 0xad */
/* GUI generated Thu Apr 23 15:20:31 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni00B2">
/* VTTTalk glyph 829, char 0xb2 */
/* GUI generated Thu Apr 30 16:48:15 2020 */

/* Y direction */
YAnchor(0,79)
YShift(0,33)
YLink(0,21,77)
YShift(21,12)
YInterpolate(0,29,4,9,24,21)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni00B3">
/* VTTTalk glyph 830, char 0xb3 */
/* GUI generated Thu Apr 30 16:52:27 2020 */

/* Y direction */
YAnchor(0,79)
YShift(0,7)
YLink(0,31,77)
YShift(31,23)
YIPAnchor(0,14,31)
YShift(14,17)
YShift(14,37)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni00B5">
/* VTTTalk glyph 948, char 0xb5 */
/* GUI generated Wed Apr 29 15:10:17 2020 */

/* Y direction */
ResYAnchor(0,6)
YShift(0,12)
YAnchor(20,10)
YShift(20,19)
ResYAnchor(33,11)
YShift(33,38)
YAnchor(38)
YShift(33,7)
YShift(7,29)
YShift(29,11)
YShift(7,36)
YShift(36,5)
YShift(5,2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni00B9">
/* VTTTalk glyph 828, char 0xb9 */
/* GUI generated Thu Apr 30 16:47:07 2020 */

/* Y direction */
YAnchor(2,79)
YShift(2,4)
YShift(4,17)
YLink(2,15,77)
YShift(15,5)
YShift(15,10)
YShift(10,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni018F">
/* VTTTalk glyph 174, char 0x18f */
/* GUI generated Sun Apr 19 14:57:26 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,36)
ResYAnchor(25,3)
YShift(25,16)
YIPAnchor(25,42,0)
YInterpolate(25,12,30,42)
YShift(42,8)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni01C4">
/* VTTTalk glyph 1061, char 0x1c4 */
/* GUI generated Sun Apr 26 13:27:18 2020 */

/* Y direction */
ResYAnchor(3,2)
YShift(3,2)
YShift(2,5)
YDist(3,40,&gt;=)
YDist(40,35,&gt;=2)
YShift(35,34)
YInterpolate(40,36,35)
YShift(35,37)
YShift(37,38)
YAnchor(9,8)
YShift(9,6)
YShift(6,0)
ResYAnchor(10,2)
YShift(10,32)
YAnchor(21,8)
YShift(21,33)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni01C5">
/* VTTTalk glyph 1047, char 0x1c5 */
/* GUI generated Thu Apr 23 15:48:17 2020 */

/* Y direction */
ResYAnchor(0,2)
YShift(0,22)
ResYAnchor(11,8)
YShift(11,23)
YShift(11,33)
YShift(33,30)
YShift(30,24)
ResYAnchor(27,6)
YShift(27,26)
YShift(26,29)
YDist(27,40,&gt;=)
YDist(40,35,&gt;=2)
YShift(35,34)
YInterpolate(40,36,35)
YShift(35,37)
YShift(37,38)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni01C6">
/* VTTTalk glyph 1048, char 0x1c6 */
/* GUI generated Sun Apr 26 13:20:17 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,34)
ResYAnchor(9,7)
YShift(9,44)
YInterpolate(0,31,39,40,12,9)
YAnchor(13,0)
YAnchor(21,10)
YShift(21,20)
ResYAnchor(56,6)
YShift(56,55)
YShift(55,58)
YDist(56,69,&gt;=)
YDist(69,64,&gt;=2)
YShift(64,63)
YInterpolate(64,65,69)
YShift(64,66)
YShift(66,67)
YAnchor(62,10)
YShift(62,59)
YShift(59,53)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0237">
/* VTTTalk glyph 324, char 0x237 */
/* GUI generated Tue Apr 21 12:38:49 2020 */

/* Y direction */
YAnchor(0)
YShift(0,7)
ResYAnchor(12,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0259">
/* VTTTalk glyph 293, char 0x259 */
/* GUI generated Wed Apr 22 14:20:11 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,33)
ResYAnchor(24,7)
YShift(24,15)
YIPAnchor(24,38,0)
YShift(38,7)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni02BC">
/* VTTTalk glyph 996, char 0x2bc */
/* GUI generated Wed Apr 29 15:17:52 2020 */

/* Y direction */
YAnchor(2)
YDist(2,0,&gt;=2)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni02BE">
/* VTTTalk glyph 1003, char 0xffff */
/* GUI generated Tue Apr 28 15:00:36 2020 */

/* Y direction */
YAnchor(8)
YShift(8,7)
YDist(8,0,&gt;=2)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni02BF">
/* VTTTalk glyph 1002, char 0xffff */
/* GUI generated Tue Apr 28 15:00:05 2020 */

/* Y direction */
YAnchor(6)
YShift(6,7)
YDist(6,0,&gt;=2)
YShift(0,13)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni02C8">
/* VTTTalk Unicode 0x2c8 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(1)	/* min */
YAnchor(0)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni02C9">
/* VTTTalk glyph 999, char 0x2c9 */
/* GUI generated Tue Apr 28 14:06:46 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni02CB">
/* VTTTalk glyph 1000, char 0xffff */
/* GUI generated Tue Apr 28 14:58:47 2020 */

/* Y direction */
ResYAnchor(1,2)
YDist(1,0,&gt;=2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni02CC">
/* VTTTalk Unicode 0x2cc */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(1)	/* min */
YAnchor(0)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0302">
/* VTTTalk glyph 977, char 0x302 */
/* GUI generated Thu Apr 16 11:59:38 2020 */

/* Y direction */
YAnchor(4)
YShift(4,3)
YDist(4,2,&gt;=2)
YInterpolate(4,5,2)
YShift(4,6)
YShift(6,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0304">
/* VTTTalk glyph 982, char 0x304 */
/* GUI generated Thu Apr 16 12:12:15 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0306">
/* VTTTalk glyph 979, char 0x306 */
/* GUI generated Thu Apr 16 12:06:51 2020 */

/* Y direction */
YAnchor(8)
YShift(8,0)
YDist(8,3,&gt;=2)
YShift(3,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0307">
/* VTTTalk glyph 972, char 0x307 */
/* GUI generated Thu Apr 16 17:39:49 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0308">
/* VTTTalk glyph 971, char 0x308 */
/* GUI generated Thu Apr 16 12:09:52 2020 */

/* Y direction */
YAnchor(7)
YShift(7,3)
YDist(7,6,&gt;=)
YShift(6,2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni030A">
/* VTTTalk glyph 980, char 0x30a */
/* GUI generated Thu Apr 23 15:41:18 2020 */

/* Y direction */
YAnchor(9)
YShift(9,18)
YDist(9,3,&gt;=2)
YShift(3,12)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni030B">
/* VTTTalk glyph 975, char 0x30b */
/* GUI generated Fri Apr 17 12:04:33 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)
YDist(0,2,&gt;=2)
YShift(2,6)
YShift(0,4)
YShift(4,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni030C">
/* VTTTalk glyph 978, char 0x30c */
/* GUI generated Thu Apr 16 13:52:46 2020 */

/* Y direction */
YAnchor(6)
YDist(6,1,&gt;=2)
YShift(1,0)
YInterpolate(6,2,1)
YShift(1,3)
YShift(3,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni030C.alt">
/* VTTTalk glyph 976, char 0xffff */
/* GUI generated Fri Apr 17 12:05:00 2020 */

/* Y direction */
YAnchor(3)
YShift(3,0)
YDist(3,1,&gt;=2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni030F">
/* VTTTalk glyph 984, char 0x30f */
/* GUI generated Thu Apr 16 12:09:04 2020 */

/* Y direction */
YAnchor(3)
YShift(3,2)
YDist(3,0,&gt;=2)
YShift(0,5)
YShift(3,7)
YAnchor(7)
YShift(7,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0311">
/* VTTTalk glyph 985, char 0x311 */
/* GUI generated Thu Apr 16 12:11:53 2020 */

/* Y direction */
YAnchor(19)
YShift(19,11)
YAnchor(11)
YDist(19,4,&gt;=2)
YShift(4,16)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0312">
/* VTTTalk glyph 986, char 0x312 */
/* GUI generated Wed Apr 29 15:16:11 2020 */

/* Y direction */
YAnchor(3)
YDist(3,0,&gt;=2)
YInterpolate(0,5,1,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni031B">
/* VTTTalk glyph 987, char 0x31b */
/* GUI generated Wed Apr 22 13:33:03 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)
YDist(0,7,&gt;=3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0324">
/* VTTTalk glyph 989, char 0x324 */
/* GUI generated Wed Apr 29 15:16:42 2020 */

/* Y direction */
YAnchor(1)
YShift(1,5)
YShift(1,0)
YShift(0,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0326">
/* VTTTalk glyph 990, char 0x326 */
/* GUI generated Wed Apr 29 15:17:03 2020 */

/* Y direction */
YAnchor(3)
YDist(3,0,&gt;=2)
YInterpolate(0,5,1,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0326.1">
/* VTTTalk glyph 1041, char 0xf6c3 */
/* GUI generated Sun Apr 26 13:04:40 2020 */

/* Y direction */
YAnchor(4)
YDist(4,0,&gt;=2)
YInterpolate(0,2,6,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0327">
/* VTTTalk glyph 991, char 0x1dd7 */
/* GUI generated Thu Apr 16 17:30:28 2020 */

/* Y direction */
YAnchor(14)
YShift(14,13)
YDist(14,0,&gt;=2)
YShift(0,7)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0328">
/* VTTTalk glyph 992, char 0x328 */
/* GUI generated Thu Apr 16 12:13:02 2020 */

/* Y direction */
YAnchor(4)
YShift(4,5)
YDist(4,12,&gt;=2)
YShift(12,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni032E">
/* VTTTalk glyph 993, char 0x32e */
/* GUI generated Fri Apr 17 11:34:37 2020 */

/* Y direction */
YAnchor(3)
YShift(3,10)
YDist(3,0,&gt;=2)
YShift(0,7)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0331">
/* VTTTalk glyph 994, char 0x331 */
/* GUI generated Wed Apr 29 15:17:21 2020 */

/* Y direction */
YAnchor(1)
YShift(1,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0335">
/* VTTTalk glyph 995, char 0x335 */
/* GUI generated Fri Apr 17 12:45:47 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0394">
/* VTTTalk glyph 1058, char 0x394 */
/* GUI generated Sun Apr 26 13:23:41 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,6)
YShift(6,1,4)
ResYAnchor(2,2)
YShift(2,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni03A9">
/* VTTTalk glyph 1059, char 0x3a9 */
/* GUI generated Sun Apr 26 13:24:43 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,1)
YShift(1,44)
YShift(0,23)
YShift(23,20)
YShift(20,24)
ResYAnchor(11,3)
YShift(11,34)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni03BC">
/* VTTTalk glyph 1060, char 0x3bc */
/* GUI generated Sun Apr 26 13:25:36 2020 */

/* Y direction */
ResYAnchor(0,14)
ResYAnchor(1,6)
YShift(1,14)
YAnchor(21,10)
YShift(21,20)
ResYAnchor(34,11)
YShift(34,8)
YInterpolate(34,37,6,30,12,3,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0402">
/* VTTTalk glyph 555, char 0x402 */
/* GUI generated Fri Apr 17 10:55:18 2020 */

/* Y direction */
ResYAnchor(3,2)
YShift(3,2)
YShift(2,6)
ResYAnchor(7,8)
ResYAnchor(8,9)
YShift(8,15)
YIPAnchor(3,29,8)
YInterpolate(29,26,25,8)
YShift(29,22)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0404">
/* VTTTalk glyph 547, char 0x404 */
/* GUI generated Fri Apr 17 10:52:53 2020 */

/* Y direction */
ResYAnchor(4,9)
YShift(4,32)
ResYAnchor(14,3)
YShift(14,22)
YIPAnchor(14,0,4)
YShift(0,1)
YShift(0,9)
YShift(0,27)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0409">
/* VTTTalk glyph 544, char 0x409 */
/* GUI generated Fri Apr 17 10:52:14 2020 */

/* Y direction */
ResYAnchor(7,2)
YShift(7,21)
ResYAnchor(19,8)
YShift(19,27)
YShift(19,0)
YAnchor(0)
YShift(0,1)
YIPAnchor(7,9,19)
YShift(9,37)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni040A">
/* VTTTalk glyph 545, char 0x40a */
/* GUI generated Fri Apr 17 10:52:34 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,17)
YShift(17,21)
ResYAnchor(1,2)
YShift(1,6)
YIPAnchor(1,3,0)
YShift(3,7)
YShift(3,19)
YShift(19,31)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni040B">
/* VTTTalk glyph 552, char 0x40b */
/* GUI generated Fri Apr 17 10:54:16 2020 */

/* Y direction */
ResYAnchor(3,2)
YShift(3,2)
YShift(2,6)
ResYAnchor(7,8)
YShift(7,25)
YIPAnchor(3,20,7)
YShift(20,12)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni040F">
/* VTTTalk glyph 540, char 0x40f */
/* GUI generated Fri Apr 17 10:51:04 2020 */

/* Y direction */
YAnchor(0)
ResYAnchor(2,8)
YShift(2,5)
YShift(2,10)
ResYAnchor(3,2)
YShift(3,8)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0411">
/* VTTTalk glyph 507, char 0x411 */
/* GUI generated Thu Apr 16 12:26:12 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,15)
ResYAnchor(1,2)
YShift(1,4)
YIPAnchor(1,5,0)
YShift(5,25)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0413">
/* VTTTalk glyph 509, char 0x413 */
/* GUI generated Thu Apr 16 12:42:58 2020 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(1,2)
YShift(1,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0414">
/* VTTTalk glyph 512, char 0x414 */
/* GUI generated Thu Apr 16 12:45:01 2020 */

/* Y direction */
ResYAnchor(7,2)
YShift(7,19)
YAnchor(14,8)
YDist(14,15,&gt;=)
YShift(15,12)
YShift(14,16)
YShift(16,1)
YShift(16,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0414.loclBGR">
/* VTTTalk glyph 620, char 0xffff */
/* GUI generated Tue Apr 21 11:13:26 2020 */

/* Y direction */
ResYAnchor(1,2)
YShift(1,5)
YAnchor(13,18)
YShift(13,8)
YShift(13,6)
YShift(6,4)
YDist(13,14,&gt;=)
YShift(14,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0416">
/* VTTTalk glyph 516, char 0x416 */
/* GUI generated Thu Apr 16 12:45:45 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,14)
YShift(0,18)
ResYAnchor(2,2)
YShift(2,7)
YShift(2,11)
YIPAnchor(2,16,0)
YShift(16,20)
YShift(16,8)
YShift(8,4)
YShift(4,1)
YShift(4,12)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0417">
/* VTTTalk glyph 517, char 0x417 */
/* GUI generated Thu Apr 16 13:21:30 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,7)
ResYAnchor(32,3)
YShift(32,25)
YIPAnchor(32,16,0)
YShift(16,15)
YShift(15,39)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0418">
/* VTTTalk glyph 518, char 0x418 */
/* GUI generated Thu Apr 16 13:22:38 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,7)
ResYAnchor(1,2)
YShift(1,5)
YInterpolate(0,3,8,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni041A">
/* VTTTalk glyph 522, char 0x41a */
/* GUI generated Thu Apr 16 13:23:18 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,9)
ResYAnchor(1,2)
YShift(1,6)
YIPAnchor(1,11,0)
YShift(11,3)
YShift(3,7)

/* X direction */

XAnchor(0)
XAnchor(6)
XInterpolate(0,12,11,3,2,6)
Align(12,11,3,2)


Smooth()


    </glyphProgram>

    <glyphProgram name="uni041B">
/* VTTTalk glyph 524, char 0x41b */
/* GUI generated Thu Apr 16 13:26:38 2020 */

/* Y direction */
ResYAnchor(7,2)
YShift(7,12)
ResYAnchor(9,8)
YShift(9,0)
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni041B.loclBGR">
/* VTTTalk glyph 621, char 0xffff */
/* GUI generated Tue Apr 21 11:13:56 2020 */

/* Y direction */
YAnchor(0)
YShift(0,4)
ResYAnchor(1,2)
YShift(1,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni041E">
/* VTTTalk glyph 527, char 0x41e */
/* GUI generated Thu Apr 16 12:19:27 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,20)
ResYAnchor(10,3)
YShift(10,30)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni041F">
/* VTTTalk glyph 528, char 0x41f */
/* GUI generated Thu Apr 16 13:27:20 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,4)
ResYAnchor(1,2)
YShift(1,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0421">
/* VTTTalk glyph 530, char 0x421 */
/* GUI generated Thu Apr 16 12:20:00 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,28)
ResYAnchor(10,3)
YShift(10,18)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0423">
/* VTTTalk glyph 532, char 0x423 */
/* GUI generated Thu Apr 16 13:28:02 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,1)
ResYAnchor(7,2)
YShift(7,11)
YInterpolate(0,6,9,7)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0424">
/* VTTTalk glyph 534, char 0x424 */
/* GUI generated Fri Apr 17 10:49:17 2020 */

/* Y direction */
YAnchor(10)
YShift(10,25)
YAnchor(25)
YShift(10,42)
YShift(10,11)
YShift(11,41)
YAnchor(20,8)
YDist(20,0,&gt;=)
YShift(0,32)
YShift(0,19)
YShift(19,33)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0424.loclBGR">
/* VTTTalk glyph 622, char 0xffff */
/* GUI generated Tue Apr 21 12:45:04 2020 */

/* Y direction */
ResYAnchor(10,3)
YDist(10,11,&gt;=)
YShift(10,13)
YShift(10,25)
YShift(25,43)
ResYAnchor(22,9)
YShift(22,1)
YDist(22,23,&gt;=)
YShift(22,24)
YShift(24,34)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0426">
/* VTTTalk glyph 537, char 0x426 */
/* GUI generated Thu Apr 16 13:44:03 2020 */

/* Y direction */
ResYAnchor(2,8)
YDist(2,0,&gt;=)
YShift(2,5)
YShift(5,9)
ResYAnchor(3,2)
YShift(3,8)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0427">
/* VTTTalk glyph 536, char 0x427 */
/* GUI generated Thu Apr 16 13:43:25 2020 */

/* Y direction */
ResYAnchor(3,8)
ResYAnchor(12,2)
YShift(12,1)
YIPAnchor(12,7,3)
YShift(7,17)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0428">
/* VTTTalk glyph 538, char 0x428 */
/* GUI generated Thu Apr 16 13:46:12 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,3)
YShift(3,7)
ResYAnchor(1,2)
YShift(1,6)
YShift(1,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0429">
/* VTTTalk glyph 539, char 0x429 */
/* GUI generated Fri Apr 17 10:50:12 2020 */

/* Y direction */
YAnchor(0)
ResYAnchor(2,8)
YShift(2,5)
YShift(5,9)
YShift(5,13)
ResYAnchor(3,2)
YShift(3,8)
YShift(3,12)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni042A">
/* VTTTalk glyph 542, char 0x42a */
/* GUI generated Fri Apr 17 10:51:36 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,15)
ResYAnchor(3,2)
YShift(3,2)
YIPAnchor(3,5,0)
YShift(5,25)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni042B">
/* VTTTalk glyph 543, char 0x42b */
/* GUI generated Fri Apr 17 10:51:49 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,13)
YShift(0,26)
ResYAnchor(1,2)
YShift(1,24)
YIPAnchor(1,3,0)
YShift(3,23)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni042C">
/* VTTTalk glyph 541, char 0x42c */
/* GUI generated Fri Apr 17 10:51:20 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,13)
ResYAnchor(1,2)
YIPAnchor(1,3,0)
YShift(3,23)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni042D">
/* VTTTalk glyph 548, char 0x42d */
/* GUI generated Fri Apr 17 10:53:18 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,9)
ResYAnchor(25,3)
YShift(25,18)
YIPAnchor(25,35,0)
YShift(35,36)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni042E">
/* VTTTalk glyph 553, char 0x42e */
/* GUI generated Fri Apr 17 10:54:28 2020 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(1,2)
ResYAnchor(8,9)
YShift(8,28)
ResYAnchor(18,3)
YShift(18,38)
YIPAnchor(18,6,8)
YShift(6,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni042F">
/* VTTTalk glyph 554, char 0x42f */
/* GUI generated Fri Apr 17 10:54:50 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,11)
ResYAnchor(8,2)
YShift(8,21)
YIPAnchor(8,13,0)
YShift(13,1)
YShift(13,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0431">
/* VTTTalk glyph 628, char 0x431 */
/* GUI generated Tue Apr 21 12:48:27 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,31)
YAnchor(11)
YShift(11,12)
YIPAnchor(11,23,0)
YInterpolate(23,20,3,41,0)
YShift(23,37)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0431.loclSRB">
/* VTTTalk glyph 756, char 0xffff */
/* GUI generated Sat Apr 25 13:34:59 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,19)
YAnchor(44,2)
YShift(44,47)
YAnchor(53)
YShift(53,28)
YShift(28,9)
YShift(28,37)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0432">
/* VTTTalk glyph 629, char 0x432 */
/* GUI generated Tue Apr 21 12:48:58 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,35)
ResYAnchor(7,7)
YShift(7,28)
YIPAnchor(7,21,0)
YShift(21,14)
YShift(14,43)
YShift(43,44)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0432.loclBGR">
/* VTTTalk glyph 743, char 0xffff */
/* GUI generated Sat Apr 25 13:19:35 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,28)
ResYAnchor(9,3)
YShift(9,43)
YIPAnchor(9,36,0)
YShift(36,35)
YShift(35,17)
YShift(17,18)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0433">
/* VTTTalk glyph 630, char 0x433 */
/* GUI generated Tue Apr 21 12:50:18 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,34)
ResYAnchor(21,7)
YShift(21,14)
YInterpolate(0,31,4,27,7,24,11,21)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0433.loclSRB">
/* VTTTalk glyph 757, char 0xffff */
/* GUI generated Sat Apr 25 13:37:41 2020 */

/* Y direction */
ResYAnchor(5,6)
YDist(5,13,&gt;=)
YShift(13,14)
YAnchor(11)
YShift(11,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0434">
/* VTTTalk glyph 633, char 0x434 */
/* GUI generated Tue Apr 21 12:53:15 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,33)
ResYAnchor(20,0)
YShift(20,19)
YIPAnchor(20,9,0)
YInterpolate(20,23,16,9)
YInterpolate(9,26,13,38,29,0)
YShift(9,42)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0435">
/* VTTTalk glyph 634, char 0x435 */
/* GUI generated Tue Apr 21 12:54:25 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,40)
ResYAnchor(9,7)
YShift(9,31)
YIPAnchor(9,16,0)
YShift(16,23)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="uni0436">
/* VTTTalk glyph 637, char 0x436 */
/* GUI generated Tue Apr 21 12:58:10 2020 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,21)
YShift(0,25)
ResYAnchor(4,6)
YShift(4,9)
YShift(4,16)
YIPAnchor(4,27,0)
YShift(27,23)
YShift(27,7)
YShift(7,3)
YShift(7,10)
YShift(7,19)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0436.loclBGR">
/* VTTTalk glyph 745, char 0xffff */
/* GUI generated Sat Apr 25 13:22:53 2020 */

/* Y direction */
YAnchor(0)
YShift(0,22)
YShift(0,26)
ResYAnchor(6,7)
YShift(6,16)
YShift(16,17)
ResYAnchor(10,0)
YIPAnchor(10,28,0)
YShift(28,24)
YShift(28,5)
YShift(5,20)
YShift(28,9)
YShift(9,12)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0437">
/* VTTTalk glyph 638, char 0x437 */
/* GUI generated Tue Apr 21 13:00:02 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,7)
ResYAnchor(30,7)
YShift(30,23)
YIPAnchor(30,14,0)
YShift(14,15)
YShift(15,37)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0437.loclBGR">
/* VTTTalk glyph 746, char 0xffff */
/* GUI generated Sat Apr 25 13:23:41 2020 */

/* Y direction */
YAnchor(0)
YShift(0,7)
ResYAnchor(32,7)
YShift(32,25)
YIPAnchor(32,17,0)
YShift(17,16)
YShift(16,39)
YShift(39,40)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni043A">
/* VTTTalk glyph 643, char 0x43a */
/* GUI generated Tue Apr 21 13:02:11 2020 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,13)
ResYAnchor(1,6)
YShift(1,8)
YIPAnchor(1,15,0)
YShift(15,3)
YShift(3,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni043B">
/* VTTTalk glyph 645, char 0x43b */
/* GUI generated Tue Apr 21 13:03:14 2020 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,6)
ResYAnchor(3,6)
YInterpolate(0,7,3)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni043C">
/* VTTTalk glyph 646, char 0x43c */
/* GUI generated Tue Apr 21 13:04:12 2020 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,7)
ResYAnchor(1,6)
YShift(1,5)
YInterpolate(0,10,9,3,8,11,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni043D">
/* VTTTalk glyph 647, char 0x43d */
/* GUI generated Tue Apr 21 13:04:40 2020 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,8)
ResYAnchor(1,6)
YShift(1,6)
YIPAnchor(1,10,0)
YShift(10,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni043E">
/* VTTTalk glyph 648, char 0x43e */
/* GUI generated Tue Apr 21 13:04:54 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,18)
ResYAnchor(9,7)
YShift(9,27)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni043F">
/* VTTTalk glyph 649, char 0x43f */
/* GUI generated Tue Apr 21 13:05:05 2020 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,4)
ResYAnchor(1,6)
YShift(1,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0444">
/* VTTTalk glyph 655, char 0x444 */
/* GUI generated Tue Apr 21 13:19:01 2020 */

/* Y direction */
ResYAnchor(2,10)
YDist(2,0,&gt;=)
YShift(2,24)
YShift(2,26)
YShift(26,37)
ResYAnchor(10,6)
YDist(10,12,&gt;=)
YShift(10,14)
YShift(10,29)
YShift(29,47)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0446">
/* VTTTalk glyph 658, char 0x446 */
/* GUI generated Tue Apr 21 13:21:35 2020 */

/* Y direction */
YAnchor(1,10)
YShift(1,34)
ResYAnchor(8,11)
YDist(8,0,&gt;=)
YShift(8,23)
ResYAnchor(15,6)
YShift(15,29)
YInterpolate(8,30,5,27,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0447">
/* VTTTalk glyph 657, char 0x447 */
/* GUI generated Tue Apr 21 13:20:44 2020 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(8,6)
YShift(8,18)
YIPAnchor(8,4,0)
YInterpolate(8,16,1,4)
YShift(4,13)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0448">
/* VTTTalk glyph 659, char 0x448 */
/* GUI generated Wed Apr 22 13:36:15 2020 */

/* Y direction */
ResYAnchor(1,10)
ResYAnchor(13,11)
YShift(13,28)
YShift(13,5)
YShift(5,41)
ResYAnchor(21,6)
YShift(21,34)
YShift(21,46)
YInterpolate(13,38,2,9,44,32,35,21)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0449">
/* VTTTalk glyph 660, char 0x449 */
/* GUI generated Wed Apr 22 13:37:22 2020 */

/* Y direction */
YAnchor(1,18)
YDist(1,0,&gt;=)
YShift(1,54)
ResYAnchor(16,11)
YShift(16,31)
YShift(16,8)
YShift(8,44)
ResYAnchor(24,6)
YShift(24,37)
YShift(24,49)
YInterpolate(16,50,41,5,12,47,35,24)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni044A">
/* VTTTalk glyph 663, char 0x44a */
/* GUI generated Wed Apr 22 13:51:30 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,24)
ResYAnchor(10,6)
YShift(10,9)
YIPAnchor(10,14,0)
YShift(14,33)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni044B">
/* VTTTalk glyph 664, char 0x44b */
/* GUI generated Wed Apr 22 13:51:46 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,14)
ResYAnchor(7,6)
YShift(7,33)
YIPAnchor(7,22,0)
YShift(22,21)
ResYAnchor(35,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni044C">
/* VTTTalk glyph 662, char 0x44c */
/* GUI generated Wed Apr 22 13:51:14 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,15)
ResYAnchor(7,6)
YIPAnchor(7,23,0)
YShift(23,22)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni044D">
/* VTTTalk glyph 669, char 0x44d */
/* GUI generated Wed Apr 22 13:53:44 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,8)
ResYAnchor(24,7)
YShift(24,17)
YIPAnchor(24,34,0)
YShift(34,35)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni044E">
/* VTTTalk glyph 674, char 0x44e */
/* GUI generated Wed Apr 22 14:50:20 2020 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(1,6)
ResYAnchor(8,11)
YShift(8,26)
ResYAnchor(17,7)
YShift(17,35)
YIPAnchor(17,6,8)
YShift(6,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni044E.loclBGR">
/* VTTTalk glyph 750, char 0xffff */
/* GUI generated Sat Apr 25 13:25:52 2020 */

/* Y direction */
YAnchor(0,10)
ResYAnchor(1,0)
ResYAnchor(8,11)
YShift(8,26)
ResYAnchor(17,7)
YShift(17,35)
YIPAnchor(8,6,17)
YShift(6,3)
YShift(6,12)
YShift(12,40)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni044F">
/* VTTTalk glyph 675, char 0x44f */
/* GUI generated Wed Apr 22 14:50:45 2020 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,14)
ResYAnchor(8,6)
YShift(8,12)
YIPAnchor(8,16,0)
YShift(16,1)
YShift(16,18)
YShift(8,24)
YShift(24,20)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0452">
/* VTTTalk glyph 676, char 0x452 */
/* GUI generated Wed Apr 22 14:52:17 2020 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(5,0)
YAnchor(12)
YShift(12,22)
YIPAnchor(5,38,12)
YShift(38,31)
YDist(38,1,&gt;=)
YShift(1,10)
YShift(1,4)
YShift(4,7)
YShift(38,35)
YShift(35,34)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0454">
/* VTTTalk glyph 668, char 0x454 */
/* GUI generated Wed Apr 22 13:53:12 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,25)
ResYAnchor(10,7)
YShift(10,17)
YIPAnchor(10,33,0)
YShift(33,34)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0459">
/* VTTTalk glyph 665, char 0x459 */
/* GUI generated Wed Apr 22 13:52:08 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,20)
ResYAnchor(11,10)
ResYAnchor(14,6)
YShift(14,5)
YIPAnchor(14,33,0)
YShift(33,26)
YShift(33,30)
YShift(30,29)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni045A">
/* VTTTalk glyph 666, char 0x45a */
/* GUI generated Wed Apr 22 13:52:25 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,19)
ResYAnchor(8,10)
ResYAnchor(9,6)
YShift(9,14)
YIPAnchor(9,11,27,0)
YShift(11,6)
YShift(27,26)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni045B">
/* VTTTalk glyph 673, char 0x45b */
/* GUI generated Wed Apr 22 14:49:11 2020 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,27)
ResYAnchor(5,0)
YIPAnchor(5,23,0)
YShift(23,16)
YDist(23,10,&gt;=)
YShift(10,1)
YShift(10,7)
YShift(7,4)
YShift(23,20)
YShift(20,19)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0462">
/* VTTTalk glyph 556, char 0x462 */
/* GUI generated Fri Apr 17 10:55:36 2020 */

/* Y direction */
ResYAnchor(9,8)
YShift(9,27)
ResYAnchor(14,2)
YIPAnchor(14,16,20,9)
YShift(16,12)
YShift(16,19)
YShift(19,11)
YShift(20,26)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0463">
/* VTTTalk glyph 677, char 0x463 */
/* GUI generated Wed Apr 22 14:52:47 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,34)
ResYAnchor(13,10)
ResYAnchor(14,6)
ResYAnchor(19,7)
YShift(19,8)
YInterpolate(13,11,16,19)
YIPAnchor(19,26,0)
YShift(26,40)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni046A">
/* VTTTalk glyph 557, char 0x46a */
/* GUI generated Fri Apr 17 10:57:45 2020 */

/* Y direction */
YAnchor(0)
YShift(0,10)
YShift(0,14)
ResYAnchor(2,2)
YShift(2,7)
YShift(7,20)
YInterpolate(0,16,2)
YShift(16,1)
YShift(16,4)
YShift(16,8)
YShift(16,12)
YShift(2,19)
YShift(19,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni046B">
/* VTTTalk glyph 678, char 0x46b */
/* GUI generated Wed Apr 22 14:53:21 2020 */

/* Y direction */
YAnchor(0)
YShift(0,6)
YShift(0,10)
ResYAnchor(2,6)
YShift(2,17)
YIPAnchor(2,12,0)
YShift(12,1)
YShift(12,4)
YShift(12,8)
YShift(12,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0474">
/* VTTTalk glyph 559, char 0x474 */
/* GUI generated Fri Apr 17 10:58:27 2020 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(1,2)
YInterpolate(0,3,1)
YShift(1,8)
YShift(8,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0475">
/* VTTTalk glyph 680, char 0x475 */
/* GUI generated Wed Apr 22 14:58:31 2020 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(1,6)
YInterpolate(0,3,1)
YShift(1,12)
YAnchor(12)
YShift(12,13)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni048C">
/* VTTTalk glyph 618, char 0x48c */
/* GUI generated Tue Apr 21 11:10:24 2020 */

/* Y direction */
ResYAnchor(4,8)
YShift(4,17)
ResYAnchor(5,2)
YIPAnchor(5,7,4)
YShift(7,27)
YDist(7,0,&gt;=)
YShift(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni048D">
/* VTTTalk glyph 739, char 0x48d */
/* GUI generated Sat Apr 25 13:14:59 2020 */

/* Y direction */
YAnchor(4,10)
YShift(4,16)
ResYAnchor(5,0)
YIPAnchor(5,7,4)
YShift(7,26)
YDist(7,0,&gt;=)
YShift(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni048E">
/* VTTTalk glyph 619, char 0x48e */
/* GUI generated Tue Apr 21 11:11:40 2020 */

/* Y direction */
ResYAnchor(4,2)
YShift(4,28)
ResYAnchor(17,8)
YIPAnchor(4,15,17)
YShift(15,3)
YAnchor(3)
YShift(3,2)
YShift(15,29)
YShift(29,1)
YAnchor(1)
YShift(1,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni048E.1">
/* VTTTalk glyph 1062, char 0xffff */
/* GUI generated Sun Apr 26 13:29:21 2020 */

/* Y direction */
ResYAnchor(4,2)
YShift(4,28)
YAnchor(17,8)
YIPAnchor(17,15,4)
YShift(15,3)
YShift(3,2)
YShift(15,29)
YShift(29,1)
YShift(1,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni048F">
/* VTTTalk glyph 740, char 0x48f */
/* GUI generated Sat Apr 25 13:16:31 2020 */

/* Y direction */
ResYAnchor(4,6)
ResYAnchor(9,7)
YShift(9,33)
ResYAnchor(18,11)
YShift(18,3)
YShift(3,2)
YInterpolate(18,21,39,38,6,9)
YShift(18,24)
YShift(24,1)
YShift(1,0)
ResYAnchor(23,14)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0490">
/* VTTTalk glyph 511, char 0x490 */
/* GUI generated Thu Apr 16 12:43:34 2020 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(1,2)
YDist(1,3,&gt;=)
YShift(1,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0491">
/* VTTTalk glyph 632, char 0x491 */
/* GUI generated Tue Apr 21 12:51:35 2020 */

/* Y direction */
YAnchor(0)
YShift(0,7)
ResYAnchor(11,6)
YDist(11,13,&gt;=)
YShift(11,16)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0492">
/* VTTTalk glyph 560, char 0x492 */
/* GUI generated Fri Apr 17 10:58:49 2020 */

/* Y direction */
ResYAnchor(4,8)
ResYAnchor(5,2)
YShift(5,8)
YIPAnchor(5,0,4)
YShift(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0493">
/* VTTTalk glyph 681, char 0x493 */
/* GUI generated Wed Apr 22 14:59:00 2020 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(1,6)
YShift(1,4)
YIPAnchor(1,6,0)
YShift(6,7)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0493.loclBSH">
/* VTTTalk glyph 751, char 0xffff */
/* GUI generated Sat Apr 25 13:27:42 2020 */

/* Y direction */
YAnchor(0)
ResYAnchor(1,6)
YShift(1,4)
YIPAnchor(1,6,0)
YShift(6,7)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0494">
/* VTTTalk glyph 561, char 0x494 */
/* GUI generated Fri Apr 17 10:59:03 2020 */

/* Y direction */
YAnchor(0)
YShift(0,7)
ResYAnchor(28,8)
ResYAnchor(29,2)
YShift(29,32)
YIPAnchor(29,21,0)
YShift(21,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0495">
/* VTTTalk glyph 682, char 0x495 */
/* GUI generated Wed Apr 22 15:00:33 2020 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(1,6)
YShift(1,4)
YAnchor(6)
YShift(6,13)
YIPAnchor(4,28,6)
YShift(28,21)
YShift(28,25)
YShift(25,24)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0496">
/* VTTTalk glyph 562, char 0x496 */
/* GUI generated Fri Apr 17 11:00:46 2020 */

/* Y direction */
YAnchor(6,8)
YShift(6,24)
YShift(24,19)
YDist(19,0,&gt;=)
YShift(19,3)
YAnchor(8,2)
YShift(8,12)
YShift(12,16)
YInterpolate(6,26,8)
YShift(26,7)
YShift(26,18)
YShift(26,22)
YShift(26,10)
YShift(10,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0497">
/* VTTTalk glyph 683, char 0x497 */
/* GUI generated Wed Apr 22 15:04:00 2020 */

/* Y direction */
ResYAnchor(6,10)
YShift(6,31)
YShift(6,2)
YShift(2,3)
YShift(2,26)
YDist(2,0,&gt;=)
ResYAnchor(10,6)
YShift(10,15)
YShift(10,22)
YIPAnchor(10,13,0)
YShift(13,16)
YShift(13,33)
YShift(33,9)
YShift(33,25)
YShift(33,29)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0498">
/* VTTTalk glyph 563, char 0x498 */
/* GUI generated Fri Apr 17 11:01:21 2020 */

/* Y direction */
ResYAnchor(4,9)
YShift(4,1)
YShift(4,11)
YDist(4,0,&gt;=)

ResYAnchor(36,3)
YShift(36,29)

YIPAnchor(36,20,0)
YShift(20,19)
YShift(19,43)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0499">
/* VTTTalk glyph 684, char 0x499 */
/* GUI generated Wed Apr 22 15:04:48 2020 */

/* Y direction */
ResYAnchor(4,11)
YShift(4,11)
YDist(4,0,&gt;=)
YShift(4,2)
YShift(2,1)
ResYAnchor(34,7)
YShift(34,27)
YIPAnchor(34,19,4)
YShift(19,18)
YShift(19,41)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni049A">
/* VTTTalk glyph 564, char 0x49a */
/* GUI generated Fri Apr 17 12:43:39 2020 */

/* Y direction */
ResYAnchor(6,8)
YShift(6,15)
YDist(6,0,&gt;=)
YShift(6,2)
YShift(2,3)
ResYAnchor(7,2)
YShift(7,12)
YIPAnchor(7,9,0)
YShift(9,13)
YShift(9,17)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni049B">
/* VTTTalk glyph 685, char 0x49b */
/* GUI generated Wed Apr 22 15:21:16 2020 */

/* Y direction */
ResYAnchor(6,10)
YShift(6,2)
YShift(2,3)
YShift(2,18)
YDist(2,0,&gt;=)
ResYAnchor(7,6)
YShift(7,14)
YIPAnchor(7,9,0)
YShift(9,21)
YShift(21,17)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni049C">
/* VTTTalk glyph 565, char 0x49c */
/* GUI generated Fri Apr 17 12:44:57 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,9)
ResYAnchor(1,2)
YShift(1,6)
YIPAnchor(1,11,0)
YShift(11,7)
YShift(11,13)
YAnchor(13)
YShift(11,3)
YUpToGrid(14)
YShift(3,14)
YAnchor(14)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni049D">
/* VTTTalk glyph 686, char 0x49d */
/* GUI generated Wed Apr 22 15:21:56 2020 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,13)
ResYAnchor(1,6)
YShift(1,8)
YIPAnchor(1,15,0)
YShift(15,11)
YDist(15,17,&gt;=)
YShift(15,3)
YDist(3,18,&gt;=)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni049F">
/* VTTTalk glyph 687, char 0x49f */
/* GUI generated Wed Apr 22 15:22:38 2020 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,13)
ResYAnchor(1,0)
YIPAnchor(1,18,15,0)
YShift(18,17)
YShift(15,3)
YShift(15,11)
ResYAnchor(8,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04A0">
/* VTTTalk glyph 567, char 0x4a0 */
/* GUI generated Fri Apr 17 12:46:12 2020 */

/* Y direction */
ResYAnchor(1,2)
YShift(1,0)
YShift(1,6)
YShift(1,10)
ResYAnchor(4,8)
YShift(4,13)
YIPAnchor(1,15,4)
YShift(15,7)
YShift(15,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04A1">
/* VTTTalk glyph 688, char 0x4a1 */
/* GUI generated Wed Apr 22 15:23:19 2020 */

/* Y direction */
ResYAnchor(1,6)
YShift(1,0)
YShift(1,6)
YShift(1,12)
ResYAnchor(4,10)
YShift(4,17)
YIPAnchor(1,19,4)
YShift(19,7)
YShift(19,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04A4">
/* VTTTalk glyph 760, char 0x4a4 */
/* GUI generated Sat Apr 25 13:41:46 2020 */

/* Y direction */
ResYAnchor(4,2)
YShift(4,9)
YShift(4,1)
YShift(1,0)
ResYAnchor(15,8)
YShift(15,11)
YIPAnchor(4,13,15)
YShift(13,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04A5">
/* VTTTalk glyph 761, char 0x4a5 */
/* GUI generated Sat Apr 25 13:43:29 2020 */

/* Y direction */
ResYAnchor(4,10)
YShift(4,12)
ResYAnchor(5,6)
YShift(5,10)
YShift(5,1)
YShift(1,0)
YIPAnchor(5,14,4)
YShift(14,7)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04A6">
/* VTTTalk glyph 569, char 0x4a6 */
/* GUI generated Fri Apr 17 13:19:31 2020 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,4)
ResYAnchor(1,2)
YShift(1,6)
YAnchor(8)
YShift(8,14)
YIPAnchor(1,27,8)
YShift(27,20)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04A7">
/* VTTTalk glyph 691, char 0x4a7 */
/* GUI generated Thu Apr 23 13:17:35 2020 */

/* Y direction */
YAnchor(0)
YShift(0,7)
ResYAnchor(24,10)
YShift(24,20)
ResYAnchor(25,6)
YShift(25,22)
YIPAnchor(25,30,0)
YShift(30,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04A8">
/* VTTTalk glyph 571, char 0x4a8 */
/* GUI generated Fri Apr 17 13:21:20 2020 */

/* Y direction */
ResYAnchor(3,9)
YShift(3,52)
ResYAnchor(9,9)
YShift(9,29)
YShift(9,6)
YShift(6,32)
YShift(6,49)
YShift(6,64)
ResYAnchor(19,3)
YShift(19,20)
ResYAnchor(40,3)
YShift(40,56)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04A9">
/* VTTTalk glyph 692, char 0x4a9 */
/* GUI generated Thu Apr 23 13:19:00 2020 */

/* Y direction */
ResYAnchor(3,11)
YShift(3,47)
ResYAnchor(9,11)
YShift(9,27)
YShift(27,30)
YShift(30,6)
YShift(30,44)
YShift(30,59)
ResYAnchor(37,7)
YShift(37,51)
YShift(37,18)
YShift(18,19)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04AA">
/* VTTTalk glyph 572, char 0x4aa */
/* GUI generated Fri Apr 17 13:24:56 2020 */

/* Y direction */
ResYAnchor(11,3)
YShift(11,19)
ResYAnchor(38,9)
YShift(38,1)
YShift(38,29)
YDist(38,39,&gt;=)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04AA.loclBSH">
/* VTTTalk glyph 625, char 0xffff */
/* GUI generated Tue Apr 21 12:46:22 2020 */

/* Y direction */
ResYAnchor(11,3)
YShift(11,19)
ResYAnchor(38,9)
YShift(38,1)
YShift(38,29)
YDist(38,39,&gt;=)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04AB">
/* VTTTalk glyph 693, char 0x4ab */
/* GUI generated Thu Apr 23 13:20:28 2020 */

/* Y direction */
ResYAnchor(10,7)
YShift(10,17)
ResYAnchor(35,11)
YShift(35,1)
YShift(35,26)
YDist(35,36,&gt;=)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04AB.loclBSH">
/* VTTTalk glyph 753, char 0xffff */
/* GUI generated Sat Apr 25 13:30:04 2020 */

/* Y direction */
ResYAnchor(10,7)
YShift(10,17)
ResYAnchor(35,11)
YShift(35,1)
YShift(35,26)
YDist(35,36,&gt;=)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04B2">
/* VTTTalk glyph 576, char 0x4b2 */
/* GUI generated Fri Apr 17 13:29:05 2020 */

/* Y direction */
ResYAnchor(7,2)
YShift(7,11)
ResYAnchor(17,8)
YShift(17,2)
YShift(2,3)
YShift(2,14)
YDist(14,0,&gt;=)
YInterpolate(17,15,12,6,9,7)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04B3">
/* VTTTalk glyph 697, char 0x4b3 */
/* GUI generated Thu Apr 23 13:24:09 2020 */

/* Y direction */
ResYAnchor(7,6)
YShift(7,13)
YAnchor(16,18)
YDist(16,0,&gt;=)
ResYAnchor(21,10)
YShift(21,2)
YShift(2,3)
YShift(2,15)
YInterpolate(21,18,6,14,10,7)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04B4">
/* VTTTalk glyph 762, char 0x4b4 */
/* GUI generated Sat Apr 25 13:51:32 2020 */

/* Y direction */
YAnchor(8,8)
YDist(8,6,&gt;=)
YShift(8,11)
YShift(11,15)
ResYAnchor(9,2)
YShift(9,4)
YShift(9,10)
YShift(9,13)
YAnchor(13)
YShift(9,3)
YShift(3,2)
YShift(2,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04B5">
/* VTTTalk glyph 763, char 0x4b5 */
/* GUI generated Sat Apr 25 13:52:07 2020 */

/* Y direction */
YAnchor(8,10)
YDist(8,6,&gt;=)
YShift(8,11)
YShift(11,15)
ResYAnchor(9,6)
YShift(9,10)
YShift(9,13)
YAnchor(13)
YShift(9,0)
YShift(0,5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04B9">
/* VTTTalk glyph 699, char 0x4b9 */
/* GUI generated Thu Apr 23 14:27:43 2020 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(8,6)
YShift(8,18)
YIPAnchor(0,4,8)
YShift(4,20)
YAnchor(20)
YShift(4,13)
YShift(13,21)
YAnchor(21)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04BA">
/* VTTTalk glyph 579, char 0x4ba */
/* GUI generated Fri Apr 17 13:31:03 2020 */

/* Y direction */
ResYAnchor(1,8)
YShift(1,12)
ResYAnchor(2,2)
YIPAnchor(2,7,1)
YInterpolate(7,4,20,1)
YShift(7,16)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04BC">
/* VTTTalk glyph 581, char 0x4bc */
/* GUI generated Fri Apr 17 13:32:18 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,30)
ResYAnchor(10,3)
YShift(10,20)
YIPAnchor(10,54,0)
YShift(54,53)


YShift(54,55)
YShift(53,56)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04BD">
/* VTTTalk glyph 702, char 0x4bd */
/* GUI generated Thu Apr 23 14:34:44 2020 */

/* Y direction */
ResYAnchor(16,11)
YShift(16,56)
ResYAnchor(25,7)
YShift(25,47)

YIPAnchor(25,32,16)
YShift(32,39)

YShift(32,9)
YShift(9,8)
YShift(8,7)
YShift(9,10)
YShift(10,35)
YShift(8,36)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04BE">
/* VTTTalk glyph 582, char 0x4be */
/* GUI generated Fri Apr 17 13:36:26 2020 */

/* Y direction */
ResYAnchor(4,9)
YShift(4,2)
YDist(4,3,&gt;=)
YShift(4,34)
ResYAnchor(14,3)
YShift(14,24)
YInterpolate(4,58,14)
YShift(58,59)
YShift(58,57)
YShift(57,56)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04BF">
/* VTTTalk glyph 703, char 0x4bf */
/* GUI generated Thu Apr 23 14:36:55 2020 */

/* Y direction */
ResYAnchor(20,11)
YDist(20,3,&gt;=)
YShift(20,60)
YShift(60,1)
ResYAnchor(29,7)
YShift(29,51)
YIPAnchor(20,36,29)
YShift(36,39)
YShift(36,43)
YShift(43,40)


YShift(36,13)
YShift(43,12)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04C3">
/* VTTTalk glyph 585, char 0x4c3 */
/* GUI generated Fri Apr 17 13:43:34 2020 */

/* Y direction */
YAnchor(0)
YShift(0,6)
ResYAnchor(17,8)
ResYAnchor(18,2)
YShift(18,26)
YIPAnchor(18,20,0)
YShift(20,15)
YShift(20,27)
YShift(27,24)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04C4">
/* VTTTalk glyph 706, char 0x4c4 */
/* GUI generated Thu Apr 23 14:39:59 2020 */

/* Y direction */
YAnchor(8)
YShift(8,14)
ResYAnchor(25,10)
ResYAnchor(26,6)
YShift(26,34)
YIPAnchor(26,28,8)
YShift(28,23)
YShift(23,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04CB">
/* VTTTalk glyph 589, char 0x4cb */
/* GUI generated Fri Apr 17 13:46:53 2020 */

/* Y direction */
ResYAnchor(9,8)
YDist(9,0,&gt;=)
YShift(9,4)
YShift(4,1)
ResYAnchor(18,2)
YShift(18,7)
YIPAnchor(9,13,18)
YShift(13,23)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04CC">
/* VTTTalk glyph 710, char 0x4cc */
/* GUI generated Thu Apr 23 14:54:21 2020 */

/* Y direction */
ResYAnchor(6,10)
YDist(6,0,&gt;=)
YShift(6,4)
YShift(4,1)
ResYAnchor(14,6)
YShift(14,24)
YIPAnchor(14,10,6)
YShift(10,19)
YShift(19,7)
YShift(7,22)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04E0">
/* VTTTalk glyph 598, char 0x4e0 */
/* GUI generated Fri Apr 17 14:00:30 2020 */

/* Y direction */
ResYAnchor(9,9)
YShift(9,16)
ResYAnchor(29,2)
YShift(29,28)
YShift(29,31)
YIPAnchor(29,25,9)
YShift(25,24)
YShift(25,32)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04E1">
/* VTTTalk glyph 719, char 0x4e1 */
/* GUI generated Thu Apr 23 14:59:19 2020 */

/* Y direction */
ResYAnchor(0,15)
YShift(0,7)
ResYAnchor(19,6)
YShift(19,18)
YShift(18,21)
YIPAnchor(19,22,0)
YShift(22,15)
YShift(22,16)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04E8">
/* VTTTalk glyph 602, char 0x4e8 */
/* GUI generated Fri Apr 17 14:02:05 2020 */

/* Y direction */
ResYAnchor(4,9)
YShift(4,24)
ResYAnchor(14,3)
YShift(14,34)
YIPAnchor(14,0,4)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04E9">
/* VTTTalk glyph 723, char 0x4e9 */
/* GUI generated Thu Apr 23 15:00:54 2020 */

/* Y direction */
ResYAnchor(4,11)
YShift(4,22)
ResYAnchor(13,7)
YShift(13,31)
YIPAnchor(13,0,4)
YShift(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04F7">
/* VTTTalk glyph 730, char 0x4f7 */
/* GUI generated Thu Apr 23 15:10:01 2020 */

/* Y direction */
ResYAnchor(4,11)
YDist(4,0,&gt;=)
YShift(4,38)
YShift(38,1)
YShift(1,2)
ResYAnchor(25,7)
YShift(25,18)
YInterpolate(4,35,8,31,11,28,15,25)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04FA">
/* VTTTalk glyph 611, char 0x4fa */
/* GUI generated Fri Apr 17 14:17:42 2020 */

/* Y direction */
YAnchor(11,8)
YShift(11,12)
YShift(11,22)
YAnchor(17,8)
YShift(17,0)
YAnchor(0)
YShift(0,7)
YAnchor(18,2)
YShift(18,21)
YIPAnchor(11,23,18)
YShift(23,24)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04FB">
/* VTTTalk glyph 732, char 0x4fb */
/* GUI generated Thu Apr 23 15:11:48 2020 */

/* Y direction */
YAnchor(0)
YShift(0,6)
YAnchor(10,10)
YShift(10,11)
YShift(10,16)
ResYAnchor(17,6)
YShift(17,20)
YIPAnchor(17,23,0)
YShift(23,22)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04FC">
/* VTTTalk glyph 612, char 0x4fc */
/* GUI generated Fri Apr 17 14:18:44 2020 */

/* Y direction */
YAnchor(0)
YShift(0,5)
YAnchor(15,18)
ResYAnchor(17,2)
YShift(17,21)
YInterpolate(15,13,16,22,19,17)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04FD">
/* VTTTalk glyph 733, char 0x4fd */
/* GUI generated Thu Apr 23 15:23:29 2020 */

/* Y direction */
YAnchor(0)
YShift(0,6)
YAnchor(16,18)
ResYAnchor(19,6)
YShift(19,25)
YInterpolate(16,14,26,18,22,19)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04FE">
/* VTTTalk glyph 613, char 0x4fe */
/* GUI generated Fri Apr 17 14:32:12 2020 */

/* Y direction */
ResYAnchor(5,2)
YShift(5,9)
YAnchor(11)
YShift(11,15)
YIPAnchor(5,0,11)
YInterpolate(5,7,10,4,0)
YInterpolate(0,13,11)
YShift(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04FF">
/* VTTTalk glyph 734, char 0x4ff */
/* GUI generated Thu Apr 23 15:25:02 2020 */

/* Y direction */
ResYAnchor(5,6)
YShift(5,11)

YAnchor(13)
YShift(13,19)

YIPAnchor(5,0,13)

YInterpolate(5,8,12,4,16,0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0510">
/* VTTTalk glyph 614, char 0x510 */
/* GUI generated Fri Apr 17 14:33:01 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,40)
ResYAnchor(14,3)
YShift(14,22)
YIPAnchor(14,30,0)
YShift(30,7)
YShift(30,33)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0511">
/* VTTTalk glyph 735, char 0x511 */
/* GUI generated Thu Apr 23 15:26:30 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,41)
ResYAnchor(15,7)
YShift(15,24)
YIPAnchor(15,31,0)
YShift(31,7)
YShift(31,34)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0513">
/* VTTTalk glyph 736, char 0x513 */
/* GUI generated Thu Apr 23 15:28:17 2020 */

/* Y direction */
YAnchor(0)
YShift(0,6)
YAnchor(18,18)
ResYAnchor(21,6)
YShift(21,12)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni1E9E">
/* VTTTalk glyph 173, char 0x1e9e */
/* GUI generated Sun Apr 19 14:56:18 2020 */

/* Y direction */
YAnchor(0,9)
YShift(0,7)
YShift(0,34)
YAnchor(34)
YAnchor(39,3)
YShift(39,28)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2002">
/* VTTTalk Unicode 0x2002 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni2003">
/* VTTTalk Unicode 0x2003 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni2007">
/* VTTTalk Unicode 0x2007 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni2008">
/* VTTTalk Unicode 0x2008 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni2009">
/* VTTTalk Unicode 0x2009 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni200A">
/* VTTTalk Unicode 0x200a */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni200B">
/* VTTTalk Unicode 0x200b */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni2070">
/* VTTTalk glyph 827, char 0x2070 */
/* GUI generated Thu Apr 30 16:45:58 2020 */

/* Y direction */
YAnchor(0,79)
YShift(0,22)
YLink(0,9,77)
YShift(9,31)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2074">
/* VTTTalk glyph 831, char 0x2074 */
/* GUI generated Thu Apr 30 16:53:27 2020 */

/* Y direction */
YAnchor(0,79)
YLink(0,4,77)
YShift(4,13)
YIPAnchor(0,1,4)
YShift(1,9)
YShift(1,12)
YShift(12,3)
YShift(12,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2075">
/* VTTTalk glyph 832, char 0x2075 */
/* GUI generated Thu Apr 30 16:54:26 2020 */

/* Y direction */
YAnchor(8,79)
YShift(8,15)
YLink(8,32,77)
YShift(32,35)
YIPAnchor(8,0,32)
YShift(0,22)
YShift(22,36)
YShift(36,26)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2076">
/* VTTTalk glyph 833, char 0x2076 */
/* GUI generated Thu Apr 30 16:55:10 2020 */

/* Y direction */
YAnchor(23,79)
YShift(23,27)
YLink(23,16,77)
YShift(16,9)
YIPAnchor(23,3,16)
YShift(3,34)
YShift(34,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2077">
/* VTTTalk glyph 834, char 0x2077 */
/* GUI generated Thu Apr 30 16:55:54 2020 */

/* Y direction */
YAnchor(5,79)
YLink(5,2,77)
YShift(2,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2078">
/* VTTTalk glyph 835, char 0x2078 */
/* GUI generated Thu Apr 30 16:57:04 2020 */

/* Y direction */
YAnchor(4,79)
YShift(4,42)
YLink(4,20,77)
YShift(20,56)
YIPAnchor(4,34,20)
YShift(34,49)
YShift(34,12)
YShift(12,27)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2079">
/* VTTTalk glyph 836, char 0x2079 */
/* GUI generated Thu Apr 30 16:58:10 2020 */

/* Y direction */
YAnchor(0,79)
YShift(0,7)
YLink(0,21,77)
YShift(21,35)
YIPAnchor(0,14,21)
YShift(14,28)
YShift(28,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2080">
/* VTTTalk glyph 790, char 0x2080 */
/* GUI generated Thu Apr 30 14:56:04 2020 */

/* Y direction */
YAnchor(0,76)
YShift(0,22)
YLink(0,9,77)
YShift(9,31)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2081">
/* VTTTalk glyph 791, char 0x2081 */
/* GUI generated Thu Apr 30 14:57:52 2020 */

/* Y direction */
YAnchor(2,76)
YShift(2,4)
YShift(4,17)
YLink(2,15,77)
YShift(15,5)
YShift(5,10)
YShift(10,9)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2082">
/* VTTTalk glyph 792, char 0x2082 */
/* GUI generated Thu Apr 30 15:02:52 2020 */

/* Y direction */
YAnchor(0,76)
YShift(0,33)
YLink(0,21,77)
YShift(21,12)
YInterpolate(0,29,4,9,24,21)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2083">
/* VTTTalk glyph 793, char 0x2083 */
/* GUI generated Thu Apr 30 15:04:08 2020 */

/* Y direction */
YAnchor(0,76)
YShift(0,8)
YLink(0,32,77)
YShift(32,24)
YIPAnchor(0,15,32)
YShift(15,18)
YShift(18,38)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2084">
/* VTTTalk glyph 794, char 0x2084 */
/* GUI generated Thu Apr 30 15:05:21 2020 */

/* Y direction */
YAnchor(0,76)
YLink(0,4,77)
YShift(4,13)
YIPAnchor(0,1,4)
YShift(1,9)
YShift(1,12)
YShift(12,3)
YShift(12,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2085">
/* VTTTalk glyph 795, char 0x2085 */
/* GUI generated Thu Apr 30 15:06:24 2020 */

/* Y direction */
YAnchor(8,76)
YShift(8,15)
YLink(8,32,77)
YShift(32,35)
YIPAnchor(8,0,32)
YShift(0,22)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2086">
/* VTTTalk glyph 796, char 0x2086 */
/* GUI generated Thu Apr 30 15:07:33 2020 */

/* Y direction */
YAnchor(23,76)
YShift(23,27)
YLink(23,16,77)
YShift(16,9)
YIPAnchor(23,3,16)
YShift(3,34)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2087">
/* VTTTalk glyph 797, char 0x2087 */
/* GUI generated Thu Apr 30 15:10:36 2020 */

/* Y direction */
YAnchor(4,76)
YLink(4,2,77)
YShift(2,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2088">
/* VTTTalk glyph 798, char 0x2088 */
/* GUI generated Thu Apr 30 15:11:33 2020 */

/* Y direction */
YAnchor(4,76)
YShift(4,40)
YLink(4,20,77)
YShift(20,54)
YIPAnchor(4,33,20)
YShift(33,47)
YShift(33,12)
YShift(12,27)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2089">
/* VTTTalk glyph 799, char 0x2089 */
/* GUI generated Thu Apr 30 15:13:30 2020 */

/* Y direction */
YAnchor(0,76)
YShift(0,7)
YLink(0,21,77)
YShift(21,35)
YIPAnchor(21,14,0)
YShift(14,28)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20A6">
/* VTTTalk glyph 914, char 0x20a6 */
/* GUI generated Tue Apr 28 13:58:26 2020 */

/* Y direction */
YAnchor(10,8)
YShift(10,17)
YShift(17,13)
ResYAnchor(11,2)
YShift(11,8)
YShift(11,14)
YIPAnchor(10,2,11)
YShift(2,1)
YDist(2,5,&gt;=)
YShift(5,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20A9">
/* VTTTalk glyph 922, char 0x20a9 */
/* GUI generated Tue Apr 28 14:30:49 2020 */

/* Y direction */
YAnchor(29,8)
YShift(29,26)
YAnchor(26)
ResYAnchor(30,2)
YIPAnchor(29,8,30)
YInterpolate(29,32,22,27,33,21,18,8)
YShift(8,15)
YDist(8,3,&gt;=)
YShift(3,4)
YShift(3,0)
YShift(0,7)
YShift(8,11)
YShift(11,12)
YShift(30,16)
YAnchor(16)
YShift(16,19)
YAnchor(19)
YShift(19,23)
YAnchor(23)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20AD">
/* VTTTalk glyph 910, char 0x20ad */
/* GUI generated Tue Apr 28 13:47:01 2020 */

/* Y direction */
ResYAnchor(4,2)
YShift(4,7)
YAnchor(15,8)
YShift(15,11)
YIPAnchor(15,1,4)
YInterpolate(1,13,6,12,9,4)
YShift(1,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20AE">
/* VTTTalk glyph 921, char 0x20ae */
/* GUI generated Tue Apr 28 14:28:21 2020 */

/* Y direction */
ResYAnchor(10,2)
YShift(10,9)
YShift(9,13)
YAnchor(15,8)
YInterpolate(15,4,5,7,6,0,1,3,2,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20B1">
/* VTTTalk glyph 916, char 0x20b1 */
/* GUI generated Tue Apr 28 14:13:29 2020 */

/* Y direction */
YAnchor(8,8)
ResYAnchor(9,2)
YShift(9,33)
YDownToGrid(22)
YIPAnchor(8,22,4,9)
YShift(22,20)
YShift(4,7)
YDist(4,3,&gt;=)
YShift(3,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20B2">
/* VTTTalk glyph 908, char 0x20b2 */
/* GUI generated Tue Apr 28 13:41:53 2020 */

/* Y direction */
ResYAnchor(8,9)
YDist(8,2,&gt;=)
YShift(8,34)
YShift(8,1)
YShift(1,0)
ResYAnchor(18,3)
YDist(18,4,&gt;=)
YShift(18,25)
YShift(25,7)
YShift(7,6)
YIPAnchor(8,43,18)
YInterpolate(8,38,37,43)
YShift(43,42)
YAnchor(46,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20B4">
/* VTTTalk glyph 909, char 0x20b4 */
/* GUI generated Tue Apr 28 13:45:31 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,33)
ResYAnchor(20,3)
YShift(20,13)
YIPAnchor(0,41,20)
YInterpolate(0,30,3,41)
YInterpolate(41,23,10,20)
YShift(41,40)
YDist(41,44,&gt;=)
YShift(44,45)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20B5">
/* VTTTalk glyph 899, char 0x20b5 */
/* GUI generated Thu Apr 23 15:17:17 2020 */

/* Y direction */
ResYAnchor(8,9)
YDist(8,2,&gt;=)
YShift(8,36)
YShift(8,0)
YShift(0,1)
ResYAnchor(19,3)
YDist(19,4,&gt;=)
YShift(19,27)
YShift(27,7)
YShift(7,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20B8">
/* VTTTalk glyph 920, char 0x20b8 */
/* GUI generated Tue Apr 28 14:25:16 2020 */

/* Y direction */
YAnchor(0,8)
ResYAnchor(9,2)
YShift(9,8)
YDist(9,3,&gt;=2)
YShift(3,2)
YShift(2,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20B9">
/* VTTTalk glyph 918, char 0x20b9 */
/* GUI generated Tue Apr 28 14:21:05 2020 */

/* Y direction */
ResYAnchor(1,2)
YShift(1,23)
YDist(1,27,&gt;=2)
YShift(27,26)
YAnchor(12,8)
YIPAnchor(12,10,1)
YShift(10,14)
ResYAnchor(32,2)
YShift(32,29)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20BA">
/* VTTTalk glyph 912, char 0xffff */
/* GUI generated Tue Apr 28 13:50:58 2020 */

/* Y direction */
YAnchor(0,8)
YShift(0,3)
ResYAnchor(1,2)
YInterpolate(0,15,16,19,20,18,17,22,21,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20BC">
/* VTTTalk glyph 913, char 0x20bc */
/* GUI generated Tue Apr 28 13:55:17 2020 */

/* Y direction */
YAnchor(20,9)
YShift(20,7)
YAnchor(27)
YShift(27,26)
YIPAnchor(20,29,0,27)
YShift(29,28)
YShift(0,13)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20BD">
/* VTTTalk glyph 917, char 0x20bd */
/* GUI generated Tue Apr 28 14:15:04 2020 */

/* Y direction */
YAnchor(16,8)
ResYAnchor(25,2)
YShift(25,36)
YIPAnchor(16,21,25)
YShift(21,10)
YDist(21,20,&gt;=)
YShift(20,11)
YShift(20,17)
YShift(17,14)
YShift(21,24)
YShift(24,37)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2113">
/* VTTTalk glyph 964, char 0x2113 */
/* GUI generated Wed Apr 29 15:32:53 2020 */

/* Y direction */
YAnchor(0)
YShift(0,7)
YAnchor(31)
YShift(31,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2116">
/* VTTTalk glyph 966, char 0x2116 */
/* GUI generated Wed Apr 29 15:35:50 2020 */

/* Y direction */
YAnchor(2,8)
YShift(2,9)
YShift(9,5)
ResYAnchor(3,2)
YShift(3,0)
YShift(3,6)
YShift(6,19)
YAnchor(19)
YShift(19,38)
YShift(19,10)
YAnchor(10)
YShift(10,31)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2120">
/* VTTTalk glyph 1046, char 0x2120 */
/* GUI generated Sun Apr 26 13:17:48 2020 */

/* Y direction */
YAnchor(50,3)
YShift(50,17)
YShift(50,11)
YAnchor(11)
YShift(11,1)
YShift(50,29)
YAnchor(29)
YShift(29,36)
YShift(29,10)
YAnchor(10)
YShift(10,4)
YInterpolate(10,6,7,0,5,8,11)
YInterpolate(29,39,26,42,23,46,20,50)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2126">
/* VTTTalk glyph 943, char 0x2126 */
/* GUI generated Wed Apr 29 15:05:19 2020 */

/* Y direction */
ResYAnchor(10,3)
YShift(10,33)
YAnchor(22,8)
YShift(22,19)
YShift(19,23)
YAnchor(44,8)
YShift(44,1)
YShift(1,43)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2154">
/* VTTTalk Unicode 0x2154 */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 42 19 */
/* Min and Max */
ResYAnchor(42,19)	/* min, CVT */
YAnchor(21)	/* max */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(21,12) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(21,74,42)
YAnchor(74)
YShift(74,66) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(21,0,42)
YAnchor(0)
YShift(0,33) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
YInterpolate(21,58,42)
YAnchor(58)
YShift(58,59) /*perpendicular to the stroke*/

/* YDir: Stroke #4 */
YShift(42,50) /*perpendicular to the stroke*/

/* Contour #1 */
YShift(21,38) /* max */
YShift(42,41) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2206">
/* VTTTalk glyph 944, char 0x2206 */
/* GUI generated Wed Apr 29 15:06:08 2020 */

/* Y direction */
ResYAnchor(2,8)
YShift(2,8)
YShift(8,3)
YShift(3,0)
YAnchor(4,2)
YShift(4,7)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2215">
/* VTTTalk glyph 925, char 0x2215 */
/* GUI generated Tue Apr 28 14:48:14 2020 */

/* Y direction */
ResYAnchor(1,16)
YShift(1,2)
ResYAnchor(3,18)
YShift(3,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2219">
/* VTTTalk glyph 924, char 0x2219 */
/* GUI generated Tue Apr 28 14:47:45 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="ustraitcy">
/* VTTTalk glyph 695, char 0x4af */
/* GUI generated Thu Apr 23 13:22:30 2020 */

/* Y direction */
ResYAnchor(2,6)
YShift(2,10)
ResYAnchor(14,14)
YInterpolate(14,1,13,4,2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="ustraitstrokecy">
/* VTTTalk glyph 696, char 0x4b1 */
/* GUI generated Thu Apr 23 13:23:00 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)
ResYAnchor(4,14)
ResYAnchor(6,6)
YShift(6,14)
YInterpolate(4,5,17,8,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="v">
/* VTTTalk glyph 437, char 0x76 (v) */
/* GUI generated Wed Apr 15 14:52:03 2020 */

/* Y direction */
ResYAnchor(0,6)
YShift(0,8)
ResYAnchor(12,10)
YInterpolate(12,2,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="v.sc">
/* VTTTalk glyph 497, char 0xffff */
/* GUI generated Thu Apr 23 14:21:02 2020 */

/* Y direction */
YAnchor(0,74)
YShift(0,4)
YAnchor(5)
YInterpolate(0,2,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="verticalbarcy">
/* VTTTalk glyph 1026, char 0xffff */
/* GUI generated Tue Apr 28 15:08:41 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)
YAnchor(1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="verticalbarcy.case">
/* VTTTalk glyph 1028, char 0xffff */
/* GUI generated Tue Apr 28 15:09:20 2020 */

/* Y direction */
YAnchor(0)
YShift(0,1)
YAnchor(1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="w">
/* VTTTalk glyph 438, char 0x77 (w) */
/* GUI generated Wed Apr 15 14:52:25 2020 */

/* Y direction */
ResYAnchor(0,6)
YShift(0,7)
YShift(0,12)
YShift(0,23)
ResYAnchor(32,10)
YShift(32,27)
YInterpolate(32,16,2,28,15,5,8,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="w.sc">
/* VTTTalk glyph 498, char 0xffff */
/* GUI generated Thu Apr 23 14:22:12 2020 */

/* Y direction */
YAnchor(0,74)
YShift(0,5)
YAnchor(5)
YShift(0,8)
YAnchor(8)
YShift(0,12)
YAnchor(13)
YShift(13,17)
YInterpolate(13,2,10,15,3,9,6,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="w.ss09">
/* VTTTalk glyph 467, char 0xffff */
/* GUI generated Tue Apr 21 13:37:41 2020 */

/* Y direction */
ResYAnchor(0,6)
YShift(0,4)
YShift(0,7)
YAnchor(8)
YShift(8,12)
YInterpolate(12,2,5,10,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="x">
/* VTTTalk glyph 443, char 0x78 (x) */
/* GUI generated Wed Apr 15 14:52:47 2020 */

/* Y direction */
ResYAnchor(1,6)
YShift(1,7)
ResYAnchor(15,10)
YShift(15,10)
YInterpolate(15,12,8,0,4,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="x.sc">
/* VTTTalk glyph 499, char 0xffff */
/* GUI generated Fri Apr 17 12:26:47 2020 */

/* Y direction */
YAnchor(1,74)
YShift(1,5)
YAnchor(11,10)
YShift(11,8)
YInterpolate(11,9,6,0,3,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="y">
/* VTTTalk glyph 444, char 0x79 (y) */
/* GUI generated Wed Apr 15 14:53:02 2020 */

/* Y direction */
ResYAnchor(6,6)
YShift(6,15)
ResYAnchor(26,15)
YInterpolate(6,8,5,26)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="y.sc">
/* VTTTalk glyph 500, char 0xffff */
/* GUI generated Thu Apr 23 14:22:46 2020 */

/* Y direction */
YAnchor(1,74)
YShift(1,5)
YAnchor(7)
YInterpolate(7,6,0,3,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="y.ss10">
/* VTTTalk glyph 468, char 0xffff */
/* GUI generated Tue Apr 21 13:38:29 2020 */

/* Y direction */
ResYAnchor(1,6)
YShift(1,5)
ResYAnchor(6,14)
YInterpolate(6,0,3,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="yen">
/* VTTTalk glyph 923, char 0xa5 */
/* GUI generated Tue Apr 28 14:41:46 2020 */

/* Y direction */
YAnchor(10,8)
ResYAnchor(20,2)
YShift(20,23)
YIPAnchor(10,16,20)
YInterpolate(10,4,15,22,16)
YShift(16,3)
YDist(16,14,&gt;=)
YShift(14,5)
YShift(14,11)
YShift(11,8)
YShift(16,19)
YShift(19,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="z">
/* VTTTalk glyph 454, char 0x7a (z) */
/* GUI generated Wed Apr 15 14:53:14 2020 */

/* Y direction */
ResYAnchor(3,6)
YShift(3,2)
YShift(3,5)
ResYAnchor(9,10)
YShift(9,6)
YShift(6,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="z.sc">
/* VTTTalk glyph 501, char 0xffff */
/* GUI generated Thu Apr 23 14:23:15 2020 */

/* Y direction */
YAnchor(3,74)
YShift(3,2)
YShift(2,5)
YAnchor(9)
YShift(9,6)
YShift(6,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="zero">
/* VTTTalk Unicode 0x30 (0) */
/* ACT generated Wed Apr  8 10:34:40 2020 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 13 */
/* CVT 9 5 */
/* Min and Max */
ResYAnchor(0,13)	/* min, CVT */
ResYAnchor(9,5)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(9,26) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YShift(0,18) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="zero.dnom">
/* VTTTalk glyph 807, char 0xffff */
/* GUI generated Thu Apr 30 15:55:19 2020 */


/* Y direction */
YAnchor(0,11)
YShift(0,18)
YLink(0,9,77)
YShift(9,27)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="zero.lf">
/* VTTTalk glyph 777, char 0xffff */
/* GUI generated Fri Apr 17 10:32:47 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,22)
ResYAnchor(11,3)
YShift(11,33)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="zero.numr">
/* VTTTalk glyph 817, char 0xffff */
/* GUI generated Thu Apr 30 16:10:05 2020 */

/* Y direction */
YAnchor(0,78)
YShift(0,22)
YLink(0,9,77)
YShift(9,31)

/* X direction */

Smooth()

    </glyphProgram>

  </TSI3>

  <TSI5>
    <glyphgroup name=".notdef" value="1"/>
    <glyphgroup name="A" value="1"/>
    <glyphgroup name="AE" value="2"/>
    <glyphgroup name="AEacute" value="1"/>
    <glyphgroup name="Aacute" value="1"/>
    <glyphgroup name="Abreve" value="1"/>
    <glyphgroup name="Acircumflex" value="1"/>
    <glyphgroup name="Adieresis" value="1"/>
    <glyphgroup name="Agrave" value="1"/>
    <glyphgroup name="Amacron" value="1"/>
    <glyphgroup name="Aogonek" value="1"/>
    <glyphgroup name="Aring" value="1"/>
    <glyphgroup name="Aringacute" value="2"/>
    <glyphgroup name="Atilde" value="1"/>
    <glyphgroup name="B" value="1"/>
    <glyphgroup name="C" value="1"/>
    <glyphgroup name="CR" value="1"/>
    <glyphgroup name="Cacute" value="1"/>
    <glyphgroup name="Ccaron" value="1"/>
    <glyphgroup name="Ccedilla" value="1"/>
    <glyphgroup name="Ccircumflex" value="1"/>
    <glyphgroup name="Cdotaccent" value="1"/>
    <glyphgroup name="D" value="1"/>
    <glyphgroup name="Dcaron" value="1"/>
    <glyphgroup name="Dcroat" value="1"/>
    <glyphgroup name="E" value="1"/>
    <glyphgroup name="Eacute" value="1"/>
    <glyphgroup name="Ebreve" value="1"/>
    <glyphgroup name="Ecaron" value="1"/>
    <glyphgroup name="Ecircumflex" value="1"/>
    <glyphgroup name="Edieresis" value="1"/>
    <glyphgroup name="Edotaccent" value="1"/>
    <glyphgroup name="Egrave" value="1"/>
    <glyphgroup name="Emacron" value="1"/>
    <glyphgroup name="Eng" value="2"/>
    <glyphgroup name="Eogonek" value="1"/>
    <glyphgroup name="Eth" value="1"/>
    <glyphgroup name="Euro" value="1"/>
    <glyphgroup name="F" value="1"/>
    <glyphgroup name="G" value="1"/>
    <glyphgroup name="G.ss11" value="1"/>
    <glyphgroup name="Gbreve" value="1"/>
    <glyphgroup name="Gcaron" value="1"/>
    <glyphgroup name="Gcircumflex" value="1"/>
    <glyphgroup name="Gdotaccent" value="1"/>
    <glyphgroup name="H" value="1"/>
    <glyphgroup name="Hbar" value="1"/>
    <glyphgroup name="Hcircumflex" value="1"/>
    <glyphgroup name="I" value="1"/>
    <glyphgroup name="IJ" value="1"/>
    <glyphgroup name="Iacute" value="1"/>
    <glyphgroup name="Ibreve" value="1"/>
    <glyphgroup name="Icircumflex" value="1"/>
    <glyphgroup name="Idieresis" value="1"/>
    <glyphgroup name="Idotaccent" value="1"/>
    <glyphgroup name="Igrave" value="1"/>
    <glyphgroup name="Imacron" value="1"/>
    <glyphgroup name="Iogonek" value="1"/>
    <glyphgroup name="Itilde" value="1"/>
    <glyphgroup name="J" value="1"/>
    <glyphgroup name="Jcircumflex" value="1"/>
    <glyphgroup name="K" value="1"/>
    <glyphgroup name="L" value="1"/>
    <glyphgroup name="Lacute" value="1"/>
    <glyphgroup name="Lcaron" value="1"/>
    <glyphgroup name="Ldot" value="1"/>
    <glyphgroup name="Lslash" value="1"/>
    <glyphgroup name="M" value="1"/>
    <glyphgroup name="N" value="1"/>
    <glyphgroup name="NULL" value="1"/>
    <glyphgroup name="Nacute" value="1"/>
    <glyphgroup name="Ncaron" value="1"/>
    <glyphgroup name="Ntilde" value="1"/>
    <glyphgroup name="O" value="1"/>
    <glyphgroup name="OE" value="1"/>
    <glyphgroup name="Oacute" value="1"/>
    <glyphgroup name="Obreve" value="1"/>
    <glyphgroup name="Ocircumflex" value="1"/>
    <glyphgroup name="Odieresis" value="1"/>
    <glyphgroup name="Ograve" value="1"/>
    <glyphgroup name="Ohorn" value="1"/>
    <glyphgroup name="Ohungarumlaut" value="1"/>
    <glyphgroup name="Omacron" value="1"/>
    <glyphgroup name="Oslash" value="1"/>
    <glyphgroup name="Oslashacute" value="1"/>
    <glyphgroup name="Otilde" value="1"/>
    <glyphgroup name="P" value="1"/>
    <glyphgroup name="Q" value="1"/>
    <glyphgroup name="R" value="1"/>
    <glyphgroup name="Racute" value="1"/>
    <glyphgroup name="Rcaron" value="1"/>
    <glyphgroup name="S" value="1"/>
    <glyphgroup name="Sacute" value="1"/>
    <glyphgroup name="Scaron" value="1"/>
    <glyphgroup name="Scedilla" value="1"/>
    <glyphgroup name="Scircumflex" value="1"/>
    <glyphgroup name="T" value="1"/>
    <glyphgroup name="Tbar" value="1"/>
    <glyphgroup name="Tcaron" value="1"/>
    <glyphgroup name="Thorn" value="1"/>
    <glyphgroup name="U" value="1"/>
    <glyphgroup name="Uacute" value="1"/>
    <glyphgroup name="Ubreve" value="1"/>
    <glyphgroup name="Ucircumflex" value="1"/>
    <glyphgroup name="Udieresis" value="1"/>
    <glyphgroup name="Ugrave" value="1"/>
    <glyphgroup name="Uhorn" value="1"/>
    <glyphgroup name="Uhungarumlaut" value="1"/>
    <glyphgroup name="Umacron" value="1"/>
    <glyphgroup name="Uogonek" value="1"/>
    <glyphgroup name="Uring" value="1"/>
    <glyphgroup name="Ustraitcy" value="1"/>
    <glyphgroup name="Ustraitstrokecy" value="1"/>
    <glyphgroup name="Utilde" value="1"/>
    <glyphgroup name="V" value="1"/>
    <glyphgroup name="W" value="1"/>
    <glyphgroup name="W.ss09" value="1"/>
    <glyphgroup name="Wacute" value="1"/>
    <glyphgroup name="Wcircumflex" value="1"/>
    <glyphgroup name="Wdieresis" value="1"/>
    <glyphgroup name="Wgrave" value="1"/>
    <glyphgroup name="X" value="1"/>
    <glyphgroup name="Y" value="1"/>
    <glyphgroup name="Yacute" value="1"/>
    <glyphgroup name="Ycircumflex" value="1"/>
    <glyphgroup name="Ydieresis" value="1"/>
    <glyphgroup name="Ygrave" value="1"/>
    <glyphgroup name="Z" value="1"/>
    <glyphgroup name="Zacute" value="1"/>
    <glyphgroup name="Zcaron" value="1"/>
    <glyphgroup name="Zdotaccent" value="1"/>
    <glyphgroup name="a" value="1"/>
    <glyphgroup name="a.sc" value="1"/>
    <glyphgroup name="a.ss01" value="1"/>
    <glyphgroup name="a.ss02" value="3"/>
    <glyphgroup name="aacute" value="1"/>
    <glyphgroup name="abreve" value="1"/>
    <glyphgroup name="acircumflex" value="1"/>
    <glyphgroup name="acute" value="1"/>
    <glyphgroup name="acutecomb" value="1"/>
    <glyphgroup name="adieresis" value="1"/>
    <glyphgroup name="ae" value="3"/>
    <glyphgroup name="aeacute" value="1"/>
    <glyphgroup name="agrave" value="1"/>
    <glyphgroup name="amacron" value="1"/>
    <glyphgroup name="ampersand" value="2"/>
    <glyphgroup name="aogonek" value="1"/>
    <glyphgroup name="apostrophe" value="1"/>
    <glyphgroup name="approxequal" value="1"/>
    <glyphgroup name="aring" value="1"/>
    <glyphgroup name="aringacute" value="1"/>
    <glyphgroup name="asciicircum" value="2"/>
    <glyphgroup name="asciitilde" value="1"/>
    <glyphgroup name="asterisk" value="2"/>
    <glyphgroup name="at" value="1"/>
    <glyphgroup name="atilde" value="1"/>
    <glyphgroup name="b" value="1"/>
    <glyphgroup name="b.sc" value="1"/>
    <glyphgroup name="backslash" value="1"/>
    <glyphgroup name="bar" value="1"/>
    <glyphgroup name="braceleft" value="1"/>
    <glyphgroup name="braceright" value="1"/>
    <glyphgroup name="bracketleft" value="1"/>
    <glyphgroup name="bracketright" value="1"/>
    <glyphgroup name="breve" value="1"/>
    <glyphgroup name="brevecombcy" value="1"/>
    <glyphgroup name="brevecombcy.case" value="1"/>
    <glyphgroup name="brokenbar" value="1"/>
    <glyphgroup name="bullet" value="1"/>
    <glyphgroup name="c" value="1"/>
    <glyphgroup name="c.sc" value="3"/>
    <glyphgroup name="c_t" value="3"/>
    <glyphgroup name="cacute" value="1"/>
    <glyphgroup name="caron" value="1"/>
    <glyphgroup name="ccaron" value="1"/>
    <glyphgroup name="ccedilla" value="1"/>
    <glyphgroup name="ccircumflex" value="1"/>
    <glyphgroup name="cdotaccent" value="1"/>
    <glyphgroup name="cedilla" value="1"/>
    <glyphgroup name="cent" value="1"/>
    <glyphgroup name="circumflex" value="1"/>
    <glyphgroup name="colon" value="1"/>
    <glyphgroup name="colonmonetary" value="1"/>
    <glyphgroup name="comma" value="1"/>
    <glyphgroup name="copyright" value="2"/>
    <glyphgroup name="currency" value="1"/>
    <glyphgroup name="d" value="1"/>
    <glyphgroup name="d.sc" value="1"/>
    <glyphgroup name="d.ss03" value="3"/>
    <glyphgroup name="dagger" value="1"/>
    <glyphgroup name="daggerdbl" value="1"/>
    <glyphgroup name="dcaron" value="1"/>
    <glyphgroup name="dcroat" value="1"/>
    <glyphgroup name="degree" value="1"/>
    <glyphgroup name="descendercy" value="1"/>
    <glyphgroup name="descendercy.case" value="1"/>
    <glyphgroup name="dieresis" value="1"/>
    <glyphgroup name="divide" value="3"/>
    <glyphgroup name="dollar" value="1"/>
    <glyphgroup name="dong" value="1"/>
    <glyphgroup name="dotaccent" value="1"/>
    <glyphgroup name="dotbelow" value="1"/>
    <glyphgroup name="dotbelowcomb" value="1"/>
    <glyphgroup name="dotlessi" value="1"/>
    <glyphgroup name="e" value="1"/>
    <glyphgroup name="e.sc" value="3"/>
    <glyphgroup name="eacute" value="1"/>
    <glyphgroup name="ebreve" value="1"/>
    <glyphgroup name="ecaron" value="1"/>
    <glyphgroup name="ecircumflex" value="1"/>
    <glyphgroup name="edieresis" value="1"/>
    <glyphgroup name="edotaccent" value="1"/>
    <glyphgroup name="egrave" value="1"/>
    <glyphgroup name="eight" value="1"/>
    <glyphgroup name="eight.dnom" value="3"/>
    <glyphgroup name="eight.lf" value="2"/>
    <glyphgroup name="eight.numr" value="1"/>
    <glyphgroup name="eight.subs" value="1"/>
    <glyphgroup name="ellipsis" value="1"/>
    <glyphgroup name="emacron" value="1"/>
    <glyphgroup name="emdash" value="1"/>
    <glyphgroup name="emptyset" value="3"/>
    <glyphgroup name="endash" value="1"/>
    <glyphgroup name="eng" value="1"/>
    <glyphgroup name="eogonek" value="1"/>
    <glyphgroup name="equal" value="1"/>
    <glyphgroup name="estimated" value="3"/>
    <glyphgroup name="eth" value="1"/>
    <glyphgroup name="exclam" value="1"/>
    <glyphgroup name="exclamdown" value="1"/>
    <glyphgroup name="f" value="3"/>
    <glyphgroup name="f.sc" value="1"/>
    <glyphgroup name="f_f" value="3"/>
    <glyphgroup name="f_f_i" value="3"/>
    <glyphgroup name="f_f_l" value="3"/>
    <glyphgroup name="fi" value="3"/>
    <glyphgroup name="figuredash" value="1"/>
    <glyphgroup name="five" value="4"/>
    <glyphgroup name="five.dnom" value="3"/>
    <glyphgroup name="five.lf" value="1"/>
    <glyphgroup name="five.numr" value="1"/>
    <glyphgroup name="five.subs" value="1"/>
    <glyphgroup name="fiveeighths" value="1"/>
    <glyphgroup name="fl" value="3"/>
    <glyphgroup name="florin" value="1"/>
    <glyphgroup name="four" value="4"/>
    <glyphgroup name="four.dnom" value="3"/>
    <glyphgroup name="four.lf" value="2"/>
    <glyphgroup name="four.numr" value="1"/>
    <glyphgroup name="four.subs" value="1"/>
    <glyphgroup name="fraction" value="1"/>
    <glyphgroup name="franc" value="1"/>
    <glyphgroup name="g" value="1"/>
    <glyphgroup name="g.sc" value="1"/>
    <glyphgroup name="gbreve" value="1"/>
    <glyphgroup name="gcaron" value="1"/>
    <glyphgroup name="gcircumflex" value="1"/>
    <glyphgroup name="gdotaccent" value="1"/>
    <glyphgroup name="germandbls" value="1"/>
    <glyphgroup name="grave" value="1"/>
    <glyphgroup name="gravecomb" value="1"/>
    <glyphgroup name="greater" value="1"/>
    <glyphgroup name="greaterequal" value="1"/>
    <glyphgroup name="guillemotleft" value="1"/>
    <glyphgroup name="guillemotright" value="1"/>
    <glyphgroup name="guilsinglleft" value="1"/>
    <glyphgroup name="guilsinglright" value="1"/>
    <glyphgroup name="h" value="1"/>
    <glyphgroup name="h.sc" value="1"/>
    <glyphgroup name="hbar" value="1"/>
    <glyphgroup name="hcircumflex" value="1"/>
    <glyphgroup name="hookabovecomb" value="1"/>
    <glyphgroup name="hookcy" value="1"/>
    <glyphgroup name="hookcy.case" value="1"/>
    <glyphgroup name="hungarumlaut" value="1"/>
    <glyphgroup name="hyphen" value="1"/>
    <glyphgroup name="i" value="1"/>
    <glyphgroup name="i.loclTRK" value="1"/>
    <glyphgroup name="i.sc" value="1"/>
    <glyphgroup name="iacute" value="1"/>
    <glyphgroup name="ibreve" value="1"/>
    <glyphgroup name="icircumflex" value="1"/>
    <glyphgroup name="idieresis" value="1"/>
    <glyphgroup name="igrave" value="1"/>
    <glyphgroup name="ij" value="1"/>
    <glyphgroup name="imacron" value="1"/>
    <glyphgroup name="infinity" value="1"/>
    <glyphgroup name="integral" value="1"/>
    <glyphgroup name="iogonek" value="1"/>
    <glyphgroup name="itilde" value="1"/>
    <glyphgroup name="j" value="1"/>
    <glyphgroup name="j.sc" value="1"/>
    <glyphgroup name="j.ss04" value="3"/>
    <glyphgroup name="jcircumflex" value="1"/>
    <glyphgroup name="k" value="1"/>
    <glyphgroup name="k.sc" value="1"/>
    <glyphgroup name="kgreenlandic" value="1"/>
    <glyphgroup name="l" value="1"/>
    <glyphgroup name="l.sc" value="1"/>
    <glyphgroup name="l.ss05" value="3"/>
    <glyphgroup name="lacute" value="1"/>
    <glyphgroup name="lcaron" value="1"/>
    <glyphgroup name="ldot" value="1"/>
    <glyphgroup name="less" value="1"/>
    <glyphgroup name="lessequal" value="1"/>
    <glyphgroup name="lira" value="1"/>
    <glyphgroup name="logicalnot" value="1"/>
    <glyphgroup name="lozenge" value="1"/>
    <glyphgroup name="lslash" value="1"/>
    <glyphgroup name="m" value="1"/>
    <glyphgroup name="m.sc" value="1"/>
    <glyphgroup name="macron" value="1"/>
    <glyphgroup name="minus" value="1"/>
    <glyphgroup name="minute" value="1"/>
    <glyphgroup name="multiply" value="1"/>
    <glyphgroup name="n" value="1"/>
    <glyphgroup name="n.sc" value="1"/>
    <glyphgroup name="nacute" value="1"/>
    <glyphgroup name="napostrophe" value="1"/>
    <glyphgroup name="ncaron" value="1"/>
    <glyphgroup name="nine" value="4"/>
    <glyphgroup name="nine.dnom" value="1"/>
    <glyphgroup name="nine.lf" value="2"/>
    <glyphgroup name="nine.numr" value="1"/>
    <glyphgroup name="nine.subs" value="1"/>
    <glyphgroup name="notequal" value="1"/>
    <glyphgroup name="ntilde" value="1"/>
    <glyphgroup name="numbersign" value="1"/>
    <glyphgroup name="o" value="1"/>
    <glyphgroup name="o.sc" value="3"/>
    <glyphgroup name="oacute" value="1"/>
    <glyphgroup name="obreve" value="1"/>
    <glyphgroup name="ocircumflex" value="1"/>
    <glyphgroup name="odieresis" value="1"/>
    <glyphgroup name="oe" value="1"/>
    <glyphgroup name="ogonek" value="1"/>
    <glyphgroup name="ograve" value="1"/>
    <glyphgroup name="ohorn" value="1"/>
    <glyphgroup name="ohungarumlaut" value="1"/>
    <glyphgroup name="omacron" value="1"/>
    <glyphgroup name="one" value="3"/>
    <glyphgroup name="one.dnom" value="1"/>
    <glyphgroup name="one.lf" value="1"/>
    <glyphgroup name="one.numr" value="1"/>
    <glyphgroup name="one.subs" value="1"/>
    <glyphgroup name="oneeighth" value="1"/>
    <glyphgroup name="onehalf" value="3"/>
    <glyphgroup name="onequarter" value="1"/>
    <glyphgroup name="ordfeminine" value="1"/>
    <glyphgroup name="ordmasculine" value="1"/>
    <glyphgroup name="oslash" value="1"/>
    <glyphgroup name="oslashacute" value="1"/>
    <glyphgroup name="otilde" value="1"/>
    <glyphgroup name="p" value="1"/>
    <glyphgroup name="p.sc" value="1"/>
    <glyphgroup name="paragraph" value="2"/>
    <glyphgroup name="parenleft" value="1"/>
    <glyphgroup name="parenright" value="1"/>
    <glyphgroup name="partialdiff" value="2"/>
    <glyphgroup name="percent" value="1"/>
    <glyphgroup name="period" value="1"/>
    <glyphgroup name="periodcentered" value="1"/>
    <glyphgroup name="periodcentered.loclCAT" value="1"/>
    <glyphgroup name="perthousand" value="2"/>
    <glyphgroup name="peseta" value="1"/>
    <glyphgroup name="pi" value="1"/>
    <glyphgroup name="plus" value="1"/>
    <glyphgroup name="plusminus" value="1"/>
    <glyphgroup name="product" value="2"/>
    <glyphgroup name="q" value="1"/>
    <glyphgroup name="q.sc" value="1"/>
    <glyphgroup name="q.ss06" value="3"/>
    <glyphgroup name="question" value="1"/>
    <glyphgroup name="questiondown" value="1"/>
    <glyphgroup name="quotedbl" value="1"/>
    <glyphgroup name="quotedblbase" value="1"/>
    <glyphgroup name="quotedblleft" value="1"/>
    <glyphgroup name="quotedblright" value="1"/>
    <glyphgroup name="quoteleft" value="1"/>
    <glyphgroup name="quoteright" value="1"/>
    <glyphgroup name="quotesinglbase" value="1"/>
    <glyphgroup name="quotesingle" value="2"/>
    <glyphgroup name="r" value="1"/>
    <glyphgroup name="r.sc" value="1"/>
    <glyphgroup name="racute" value="1"/>
    <glyphgroup name="radical" value="1"/>
    <glyphgroup name="rcaron" value="1"/>
    <glyphgroup name="registered" value="2"/>
    <glyphgroup name="ring" value="1"/>
    <glyphgroup name="s" value="1"/>
    <glyphgroup name="s.sc" value="1"/>
    <glyphgroup name="s_t" value="3"/>
    <glyphgroup name="sacute" value="1"/>
    <glyphgroup name="scaron" value="1"/>
    <glyphgroup name="scedilla" value="1"/>
    <glyphgroup name="scircumflex" value="1"/>
    <glyphgroup name="second" value="1"/>
    <glyphgroup name="section" value="2"/>
    <glyphgroup name="semicolon" value="3"/>
    <glyphgroup name="seven" value="1"/>
    <glyphgroup name="seven.dnom" value="3"/>
    <glyphgroup name="seven.lf" value="2"/>
    <glyphgroup name="seven.numr" value="1"/>
    <glyphgroup name="seven.subs" value="1"/>
    <glyphgroup name="seveneighths" value="1"/>
    <glyphgroup name="six" value="1"/>
    <glyphgroup name="six.dnom" value="3"/>
    <glyphgroup name="six.lf" value="1"/>
    <glyphgroup name="six.numr" value="1"/>
    <glyphgroup name="six.subs" value="1"/>
    <glyphgroup name="slash" value="2"/>
    <glyphgroup name="space" value="1"/>
    <glyphgroup name="sterling" value="1"/>
    <glyphgroup name="summation" value="2"/>
    <glyphgroup name="t" value="1"/>
    <glyphgroup name="t.sc" value="1"/>
    <glyphgroup name="t.ss07" value="3"/>
    <glyphgroup name="tailcy" value="1"/>
    <glyphgroup name="tailcy.case" value="1"/>
    <glyphgroup name="tbar" value="1"/>
    <glyphgroup name="tcaron" value="1"/>
    <glyphgroup name="thorn" value="1"/>
    <glyphgroup name="three" value="1"/>
    <glyphgroup name="three.dnom" value="3"/>
    <glyphgroup name="three.lf" value="2"/>
    <glyphgroup name="three.numr" value="1"/>
    <glyphgroup name="three.subs" value="1"/>
    <glyphgroup name="threeeighths" value="1"/>
    <glyphgroup name="threequarters" value="1"/>
    <glyphgroup name="tilde" value="1"/>
    <glyphgroup name="tildecomb" value="1"/>
    <glyphgroup name="trademark" value="1"/>
    <glyphgroup name="two" value="1"/>
    <glyphgroup name="two.dnom" value="3"/>
    <glyphgroup name="two.lf" value="1"/>
    <glyphgroup name="two.numr" value="1"/>
    <glyphgroup name="two.subs" value="1"/>
    <glyphgroup name="u" value="1"/>
    <glyphgroup name="u.sc" value="1"/>
    <glyphgroup name="u.ss08" value="3"/>
    <glyphgroup name="uacute" value="1"/>
    <glyphgroup name="ubreve" value="1"/>
    <glyphgroup name="ucircumflex" value="1"/>
    <glyphgroup name="udieresis" value="1"/>
    <glyphgroup name="ugrave" value="1"/>
    <glyphgroup name="uhorn" value="1"/>
    <glyphgroup name="uhungarumlaut" value="1"/>
    <glyphgroup name="umacron" value="1"/>
    <glyphgroup name="underscore" value="1"/>
    <glyphgroup name="uni00A0" value="1"/>
    <glyphgroup name="uni00AD" value="1"/>
    <glyphgroup name="uni00B2" value="1"/>
    <glyphgroup name="uni00B3" value="1"/>
    <glyphgroup name="uni00B5" value="3"/>
    <glyphgroup name="uni00B9" value="1"/>
    <glyphgroup name="uni0122" value="1"/>
    <glyphgroup name="uni0123" value="1"/>
    <glyphgroup name="uni0136" value="1"/>
    <glyphgroup name="uni0137" value="1"/>
    <glyphgroup name="uni013B" value="1"/>
    <glyphgroup name="uni013C" value="1"/>
    <glyphgroup name="uni0145" value="1"/>
    <glyphgroup name="uni0146" value="1"/>
    <glyphgroup name="uni0156" value="1"/>
    <glyphgroup name="uni0157" value="1"/>
    <glyphgroup name="uni0162" value="1"/>
    <glyphgroup name="uni0163" value="1"/>
    <glyphgroup name="uni018F" value="1"/>
    <glyphgroup name="uni01C4" value="1"/>
    <glyphgroup name="uni01C5" value="1"/>
    <glyphgroup name="uni01C6" value="1"/>
    <glyphgroup name="uni01C7" value="1"/>
    <glyphgroup name="uni01C8" value="1"/>
    <glyphgroup name="uni01C9" value="1"/>
    <glyphgroup name="uni01CA" value="1"/>
    <glyphgroup name="uni01CB" value="1"/>
    <glyphgroup name="uni01CC" value="1"/>
    <glyphgroup name="uni01EA" value="1"/>
    <glyphgroup name="uni01EB" value="1"/>
    <glyphgroup name="uni01F1" value="1"/>
    <glyphgroup name="uni01F2" value="1"/>
    <glyphgroup name="uni01F3" value="1"/>
    <glyphgroup name="uni01F4" value="1"/>
    <glyphgroup name="uni01F5" value="1"/>
    <glyphgroup name="uni0200" value="1"/>
    <glyphgroup name="uni0201" value="1"/>
    <glyphgroup name="uni0202" value="1"/>
    <glyphgroup name="uni0203" value="1"/>
    <glyphgroup name="uni0204" value="1"/>
    <glyphgroup name="uni0205" value="1"/>
    <glyphgroup name="uni0206" value="1"/>
    <glyphgroup name="uni0207" value="1"/>
    <glyphgroup name="uni0208" value="1"/>
    <glyphgroup name="uni0209" value="1"/>
    <glyphgroup name="uni020A" value="1"/>
    <glyphgroup name="uni020B" value="1"/>
    <glyphgroup name="uni020C" value="1"/>
    <glyphgroup name="uni020D" value="1"/>
    <glyphgroup name="uni020E" value="1"/>
    <glyphgroup name="uni020F" value="1"/>
    <glyphgroup name="uni0210" value="1"/>
    <glyphgroup name="uni0211" value="1"/>
    <glyphgroup name="uni0212" value="1"/>
    <glyphgroup name="uni0213" value="1"/>
    <glyphgroup name="uni0214" value="1"/>
    <glyphgroup name="uni0215" value="1"/>
    <glyphgroup name="uni0216" value="1"/>
    <glyphgroup name="uni0217" value="1"/>
    <glyphgroup name="uni0218" value="1"/>
    <glyphgroup name="uni0219" value="1"/>
    <glyphgroup name="uni021A" value="1"/>
    <glyphgroup name="uni021B" value="1"/>
    <glyphgroup name="uni022A" value="1"/>
    <glyphgroup name="uni022B" value="1"/>
    <glyphgroup name="uni022C" value="1"/>
    <glyphgroup name="uni022D" value="1"/>
    <glyphgroup name="uni0230" value="1"/>
    <glyphgroup name="uni0231" value="1"/>
    <glyphgroup name="uni0232" value="1"/>
    <glyphgroup name="uni0233" value="1"/>
    <glyphgroup name="uni0237" value="3"/>
    <glyphgroup name="uni0259" value="1"/>
    <glyphgroup name="uni02B9" value="1"/>
    <glyphgroup name="uni02BA" value="1"/>
    <glyphgroup name="uni02BB" value="1"/>
    <glyphgroup name="uni02BC" value="1"/>
    <glyphgroup name="uni02BE" value="1"/>
    <glyphgroup name="uni02BF" value="1"/>
    <glyphgroup name="uni02C8" value="1"/>
    <glyphgroup name="uni02C9" value="1"/>
    <glyphgroup name="uni02CB" value="1"/>
    <glyphgroup name="uni02CC" value="1"/>
    <glyphgroup name="uni0302" value="1"/>
    <glyphgroup name="uni03020300" value="1"/>
    <glyphgroup name="uni03020301" value="1"/>
    <glyphgroup name="uni03020303" value="1"/>
    <glyphgroup name="uni03020309" value="1"/>
    <glyphgroup name="uni0304" value="1"/>
    <glyphgroup name="uni0306" value="1"/>
    <glyphgroup name="uni03060300" value="1"/>
    <glyphgroup name="uni03060301" value="1"/>
    <glyphgroup name="uni03060303" value="1"/>
    <glyphgroup name="uni03060309" value="1"/>
    <glyphgroup name="uni0307" value="1"/>
    <glyphgroup name="uni0308" value="1"/>
    <glyphgroup name="uni030A" value="1"/>
    <glyphgroup name="uni030B" value="1"/>
    <glyphgroup name="uni030C" value="1"/>
    <glyphgroup name="uni030C.alt" value="1"/>
    <glyphgroup name="uni030F" value="1"/>
    <glyphgroup name="uni0311" value="1"/>
    <glyphgroup name="uni0312" value="1"/>
    <glyphgroup name="uni031B" value="1"/>
    <glyphgroup name="uni0324" value="1"/>
    <glyphgroup name="uni0326" value="1"/>
    <glyphgroup name="uni0326.1" value="1"/>
    <glyphgroup name="uni0327" value="1"/>
    <glyphgroup name="uni0328" value="1"/>
    <glyphgroup name="uni032E" value="1"/>
    <glyphgroup name="uni0331" value="1"/>
    <glyphgroup name="uni0335" value="1"/>
    <glyphgroup name="uni0394" value="1"/>
    <glyphgroup name="uni03A9" value="1"/>
    <glyphgroup name="uni03BC" value="1"/>
    <glyphgroup name="uni0400" value="1"/>
    <glyphgroup name="uni0401" value="1"/>
    <glyphgroup name="uni0402" value="1"/>
    <glyphgroup name="uni0403" value="1"/>
    <glyphgroup name="uni0404" value="1"/>
    <glyphgroup name="uni0405" value="1"/>
    <glyphgroup name="uni0406" value="1"/>
    <glyphgroup name="uni0407" value="1"/>
    <glyphgroup name="uni0408" value="1"/>
    <glyphgroup name="uni0409" value="1"/>
    <glyphgroup name="uni040A" value="1"/>
    <glyphgroup name="uni040B" value="1"/>
    <glyphgroup name="uni040C" value="1"/>
    <glyphgroup name="uni040D" value="1"/>
    <glyphgroup name="uni040E" value="1"/>
    <glyphgroup name="uni040F" value="1"/>
    <glyphgroup name="uni0410" value="1"/>
    <glyphgroup name="uni0411" value="2"/>
    <glyphgroup name="uni0412" value="1"/>
    <glyphgroup name="uni0413" value="1"/>
    <glyphgroup name="uni0414" value="2"/>
    <glyphgroup name="uni0414.loclBGR" value="1"/>
    <glyphgroup name="uni0415" value="1"/>
    <glyphgroup name="uni0416" value="1"/>
    <glyphgroup name="uni0417" value="1"/>
    <glyphgroup name="uni0418" value="1"/>
    <glyphgroup name="uni0419" value="1"/>
    <glyphgroup name="uni041A" value="1"/>
    <glyphgroup name="uni041B" value="1"/>
    <glyphgroup name="uni041B.loclBGR" value="1"/>
    <glyphgroup name="uni041C" value="1"/>
    <glyphgroup name="uni041D" value="1"/>
    <glyphgroup name="uni041E" value="1"/>
    <glyphgroup name="uni041F" value="1"/>
    <glyphgroup name="uni0420" value="1"/>
    <glyphgroup name="uni0421" value="1"/>
    <glyphgroup name="uni0422" value="1"/>
    <glyphgroup name="uni0423" value="1"/>
    <glyphgroup name="uni0424" value="2"/>
    <glyphgroup name="uni0424.loclBGR" value="2"/>
    <glyphgroup name="uni0425" value="1"/>
    <glyphgroup name="uni0426" value="1"/>
    <glyphgroup name="uni0427" value="1"/>
    <glyphgroup name="uni0428" value="1"/>
    <glyphgroup name="uni0429" value="1"/>
    <glyphgroup name="uni042A" value="1"/>
    <glyphgroup name="uni042B" value="1"/>
    <glyphgroup name="uni042C" value="1"/>
    <glyphgroup name="uni042D" value="1"/>
    <glyphgroup name="uni042E" value="1"/>
    <glyphgroup name="uni042F" value="1"/>
    <glyphgroup name="uni0430" value="1"/>
    <glyphgroup name="uni0431" value="1"/>
    <glyphgroup name="uni0431.loclSRB" value="1"/>
    <glyphgroup name="uni0432" value="3"/>
    <glyphgroup name="uni0432.loclBGR" value="1"/>
    <glyphgroup name="uni0433" value="3"/>
    <glyphgroup name="uni0433.loclSRB" value="1"/>
    <glyphgroup name="uni0434" value="1"/>
    <glyphgroup name="uni0434.loclBGR" value="1"/>
    <glyphgroup name="uni0434.loclSRB" value="1"/>
    <glyphgroup name="uni0435" value="1"/>
    <glyphgroup name="uni0436" value="1"/>
    <glyphgroup name="uni0436.loclBGR" value="1"/>
    <glyphgroup name="uni0437" value="3"/>
    <glyphgroup name="uni0437.loclBGR" value="1"/>
    <glyphgroup name="uni0438" value="1"/>
    <glyphgroup name="uni0439" value="1"/>
    <glyphgroup name="uni043A" value="1"/>
    <glyphgroup name="uni043A.loclBGR" value="1"/>
    <glyphgroup name="uni043B" value="1"/>
    <glyphgroup name="uni043C" value="3"/>
    <glyphgroup name="uni043D" value="1"/>
    <glyphgroup name="uni043E" value="1"/>
    <glyphgroup name="uni043F" value="1"/>
    <glyphgroup name="uni043F.loclBGR" value="1"/>
    <glyphgroup name="uni043F.loclSRB" value="1"/>
    <glyphgroup name="uni0440" value="1"/>
    <glyphgroup name="uni0441" value="1"/>
    <glyphgroup name="uni0442" value="1"/>
    <glyphgroup name="uni0442.loclBGR" value="1"/>
    <glyphgroup name="uni0443" value="1"/>
    <glyphgroup name="uni0444" value="1"/>
    <glyphgroup name="uni0445" value="1"/>
    <glyphgroup name="uni0446" value="3"/>
    <glyphgroup name="uni0447" value="1"/>
    <glyphgroup name="uni0448" value="3"/>
    <glyphgroup name="uni0449" value="3"/>
    <glyphgroup name="uni044A" value="1"/>
    <glyphgroup name="uni044B" value="1"/>
    <glyphgroup name="uni044C" value="1"/>
    <glyphgroup name="uni044D" value="1"/>
    <glyphgroup name="uni044E" value="1"/>
    <glyphgroup name="uni044E.loclBGR" value="1"/>
    <glyphgroup name="uni044F" value="1"/>
    <glyphgroup name="uni0450" value="1"/>
    <glyphgroup name="uni0451" value="1"/>
    <glyphgroup name="uni0452" value="1"/>
    <glyphgroup name="uni0453" value="1"/>
    <glyphgroup name="uni0453.loclMKD" value="3"/>
    <glyphgroup name="uni0454" value="1"/>
    <glyphgroup name="uni0455" value="1"/>
    <glyphgroup name="uni0456" value="1"/>
    <glyphgroup name="uni0457" value="3"/>
    <glyphgroup name="uni0458" value="1"/>
    <glyphgroup name="uni0459" value="1"/>
    <glyphgroup name="uni045A" value="1"/>
    <glyphgroup name="uni045B" value="1"/>
    <glyphgroup name="uni045C" value="1"/>
    <glyphgroup name="uni045D" value="1"/>
    <glyphgroup name="uni045E" value="1"/>
    <glyphgroup name="uni045F" value="1"/>
    <glyphgroup name="uni0462" value="1"/>
    <glyphgroup name="uni0463" value="1"/>
    <glyphgroup name="uni046A" value="1"/>
    <glyphgroup name="uni046B" value="1"/>
    <glyphgroup name="uni0472" value="1"/>
    <glyphgroup name="uni0473" value="1"/>
    <glyphgroup name="uni0474" value="1"/>
    <glyphgroup name="uni0475" value="3"/>
    <glyphgroup name="uni048A" value="1"/>
    <glyphgroup name="uni048B" value="3"/>
    <glyphgroup name="uni048C" value="1"/>
    <glyphgroup name="uni048D" value="1"/>
    <glyphgroup name="uni048E" value="1"/>
    <glyphgroup name="uni048E.1" value="1"/>
    <glyphgroup name="uni048F" value="1"/>
    <glyphgroup name="uni0490" value="1"/>
    <glyphgroup name="uni0491" value="3"/>
    <glyphgroup name="uni0492" value="1"/>
    <glyphgroup name="uni0492.loclBSH" value="1"/>
    <glyphgroup name="uni0493" value="3"/>
    <glyphgroup name="uni0493.loclBSH" value="1"/>
    <glyphgroup name="uni0494" value="1"/>
    <glyphgroup name="uni0495" value="3"/>
    <glyphgroup name="uni0496" value="2"/>
    <glyphgroup name="uni0497" value="3"/>
    <glyphgroup name="uni0498" value="1"/>
    <glyphgroup name="uni0498.loclBSH" value="1"/>
    <glyphgroup name="uni0499" value="3"/>
    <glyphgroup name="uni0499.loclBSH" value="1"/>
    <glyphgroup name="uni049A" value="1"/>
    <glyphgroup name="uni049B" value="1"/>
    <glyphgroup name="uni049C" value="1"/>
    <glyphgroup name="uni049D" value="3"/>
    <glyphgroup name="uni049E" value="1"/>
    <glyphgroup name="uni049F" value="3"/>
    <glyphgroup name="uni04A0" value="1"/>
    <glyphgroup name="uni04A1" value="3"/>
    <glyphgroup name="uni04A2" value="1"/>
    <glyphgroup name="uni04A3" value="1"/>
    <glyphgroup name="uni04A4" value="1"/>
    <glyphgroup name="uni04A5" value="1"/>
    <glyphgroup name="uni04A6" value="1"/>
    <glyphgroup name="uni04A7" value="1"/>
    <glyphgroup name="uni04A8" value="2"/>
    <glyphgroup name="uni04A9" value="3"/>
    <glyphgroup name="uni04AA" value="2"/>
    <glyphgroup name="uni04AA.loclBSH" value="2"/>
    <glyphgroup name="uni04AA.loclCHU" value="1"/>
    <glyphgroup name="uni04AB" value="3"/>
    <glyphgroup name="uni04AB.loclBSH" value="1"/>
    <glyphgroup name="uni04AB.loclCHU" value="1"/>
    <glyphgroup name="uni04AC" value="1"/>
    <glyphgroup name="uni04AD" value="3"/>
    <glyphgroup name="uni04B2" value="1"/>
    <glyphgroup name="uni04B3" value="3"/>
    <glyphgroup name="uni04B4" value="1"/>
    <glyphgroup name="uni04B5" value="1"/>
    <glyphgroup name="uni04B6" value="1"/>
    <glyphgroup name="uni04B7" value="1"/>
    <glyphgroup name="uni04B8" value="1"/>
    <glyphgroup name="uni04B9" value="1"/>
    <glyphgroup name="uni04BA" value="1"/>
    <glyphgroup name="uni04BB" value="1"/>
    <glyphgroup name="uni04BC" value="1"/>
    <glyphgroup name="uni04BD" value="1"/>
    <glyphgroup name="uni04BE" value="1"/>
    <glyphgroup name="uni04BF" value="3"/>
    <glyphgroup name="uni04C0" value="1"/>
    <glyphgroup name="uni04C1" value="1"/>
    <glyphgroup name="uni04C2" value="1"/>
    <glyphgroup name="uni04C3" value="1"/>
    <glyphgroup name="uni04C4" value="1"/>
    <glyphgroup name="uni04C5" value="1"/>
    <glyphgroup name="uni04C6" value="1"/>
    <glyphgroup name="uni04C7" value="1"/>
    <glyphgroup name="uni04C8" value="1"/>
    <glyphgroup name="uni04C9" value="1"/>
    <glyphgroup name="uni04CA" value="1"/>
    <glyphgroup name="uni04CB" value="1"/>
    <glyphgroup name="uni04CC" value="1"/>
    <glyphgroup name="uni04CD" value="1"/>
    <glyphgroup name="uni04CE" value="1"/>
    <glyphgroup name="uni04CF" value="1"/>
    <glyphgroup name="uni04D0" value="1"/>
    <glyphgroup name="uni04D1" value="1"/>
    <glyphgroup name="uni04D2" value="1"/>
    <glyphgroup name="uni04D3" value="1"/>
    <glyphgroup name="uni04D4" value="1"/>
    <glyphgroup name="uni04D5" value="1"/>
    <glyphgroup name="uni04D6" value="1"/>
    <glyphgroup name="uni04D7" value="1"/>
    <glyphgroup name="uni04D8" value="1"/>
    <glyphgroup name="uni04D9" value="1"/>
    <glyphgroup name="uni04DA" value="1"/>
    <glyphgroup name="uni04DB" value="1"/>
    <glyphgroup name="uni04DC" value="1"/>
    <glyphgroup name="uni04DD" value="1"/>
    <glyphgroup name="uni04DE" value="1"/>
    <glyphgroup name="uni04DF" value="1"/>
    <glyphgroup name="uni04E0" value="1"/>
    <glyphgroup name="uni04E1" value="1"/>
    <glyphgroup name="uni04E2" value="1"/>
    <glyphgroup name="uni04E3" value="1"/>
    <glyphgroup name="uni04E4" value="1"/>
    <glyphgroup name="uni04E5" value="1"/>
    <glyphgroup name="uni04E6" value="1"/>
    <glyphgroup name="uni04E7" value="1"/>
    <glyphgroup name="uni04E8" value="1"/>
    <glyphgroup name="uni04E9" value="1"/>
    <glyphgroup name="uni04EA" value="1"/>
    <glyphgroup name="uni04EB" value="1"/>
    <glyphgroup name="uni04EC" value="1"/>
    <glyphgroup name="uni04ED" value="3"/>
    <glyphgroup name="uni04EE" value="1"/>
    <glyphgroup name="uni04EF" value="1"/>
    <glyphgroup name="uni04F0" value="1"/>
    <glyphgroup name="uni04F1" value="3"/>
    <glyphgroup name="uni04F2" value="1"/>
    <glyphgroup name="uni04F3" value="1"/>
    <glyphgroup name="uni04F4" value="1"/>
    <glyphgroup name="uni04F5" value="1"/>
    <glyphgroup name="uni04F6" value="1"/>
    <glyphgroup name="uni04F7" value="3"/>
    <glyphgroup name="uni04F8" value="1"/>
    <glyphgroup name="uni04F9" value="1"/>
    <glyphgroup name="uni04FA" value="2"/>
    <glyphgroup name="uni04FB" value="3"/>
    <glyphgroup name="uni04FC" value="1"/>
    <glyphgroup name="uni04FD" value="3"/>
    <glyphgroup name="uni04FE" value="1"/>
    <glyphgroup name="uni04FF" value="1"/>
    <glyphgroup name="uni0510" value="1"/>
    <glyphgroup name="uni0511" value="1"/>
    <glyphgroup name="uni0512" value="1"/>
    <glyphgroup name="uni0513" value="3"/>
    <glyphgroup name="uni051A" value="1"/>
    <glyphgroup name="uni051B" value="1"/>
    <glyphgroup name="uni051C" value="1"/>
    <glyphgroup name="uni051D" value="1"/>
    <glyphgroup name="uni0524" value="1"/>
    <glyphgroup name="uni0525" value="1"/>
    <glyphgroup name="uni0526" value="1"/>
    <glyphgroup name="uni0527" value="1"/>
    <glyphgroup name="uni0528" value="1"/>
    <glyphgroup name="uni0529" value="1"/>
    <glyphgroup name="uni052E" value="1"/>
    <glyphgroup name="uni052F" value="1"/>
    <glyphgroup name="uni1E08" value="1"/>
    <glyphgroup name="uni1E09" value="1"/>
    <glyphgroup name="uni1E0C" value="1"/>
    <glyphgroup name="uni1E0D" value="1"/>
    <glyphgroup name="uni1E0E" value="1"/>
    <glyphgroup name="uni1E0F" value="1"/>
    <glyphgroup name="uni1E14" value="1"/>
    <glyphgroup name="uni1E15" value="1"/>
    <glyphgroup name="uni1E16" value="1"/>
    <glyphgroup name="uni1E17" value="1"/>
    <glyphgroup name="uni1E1C" value="1"/>
    <glyphgroup name="uni1E1D" value="1"/>
    <glyphgroup name="uni1E20" value="1"/>
    <glyphgroup name="uni1E21" value="1"/>
    <glyphgroup name="uni1E24" value="1"/>
    <glyphgroup name="uni1E25" value="1"/>
    <glyphgroup name="uni1E2A" value="1"/>
    <glyphgroup name="uni1E2B" value="1"/>
    <glyphgroup name="uni1E2E" value="1"/>
    <glyphgroup name="uni1E2F" value="1"/>
    <glyphgroup name="uni1E36" value="1"/>
    <glyphgroup name="uni1E37" value="1"/>
    <glyphgroup name="uni1E3A" value="1"/>
    <glyphgroup name="uni1E3B" value="1"/>
    <glyphgroup name="uni1E42" value="1"/>
    <glyphgroup name="uni1E43" value="1"/>
    <glyphgroup name="uni1E44" value="1"/>
    <glyphgroup name="uni1E45" value="1"/>
    <glyphgroup name="uni1E46" value="1"/>
    <glyphgroup name="uni1E47" value="1"/>
    <glyphgroup name="uni1E48" value="1"/>
    <glyphgroup name="uni1E49" value="1"/>
    <glyphgroup name="uni1E4C" value="1"/>
    <glyphgroup name="uni1E4D" value="1"/>
    <glyphgroup name="uni1E4E" value="1"/>
    <glyphgroup name="uni1E4F" value="1"/>
    <glyphgroup name="uni1E50" value="1"/>
    <glyphgroup name="uni1E51" value="1"/>
    <glyphgroup name="uni1E52" value="1"/>
    <glyphgroup name="uni1E53" value="1"/>
    <glyphgroup name="uni1E5A" value="1"/>
    <glyphgroup name="uni1E5B" value="1"/>
    <glyphgroup name="uni1E5E" value="1"/>
    <glyphgroup name="uni1E5F" value="1"/>
    <glyphgroup name="uni1E60" value="1"/>
    <glyphgroup name="uni1E61" value="1"/>
    <glyphgroup name="uni1E62" value="1"/>
    <glyphgroup name="uni1E63" value="1"/>
    <glyphgroup name="uni1E64" value="1"/>
    <glyphgroup name="uni1E65" value="1"/>
    <glyphgroup name="uni1E66" value="1"/>
    <glyphgroup name="uni1E67" value="1"/>
    <glyphgroup name="uni1E68" value="1"/>
    <glyphgroup name="uni1E69" value="1"/>
    <glyphgroup name="uni1E6C" value="1"/>
    <glyphgroup name="uni1E6D" value="1"/>
    <glyphgroup name="uni1E6E" value="1"/>
    <glyphgroup name="uni1E6F" value="1"/>
    <glyphgroup name="uni1E78" value="1"/>
    <glyphgroup name="uni1E79" value="1"/>
    <glyphgroup name="uni1E7A" value="1"/>
    <glyphgroup name="uni1E7B" value="1"/>
    <glyphgroup name="uni1E8E" value="1"/>
    <glyphgroup name="uni1E8F" value="1"/>
    <glyphgroup name="uni1E92" value="1"/>
    <glyphgroup name="uni1E93" value="1"/>
    <glyphgroup name="uni1E97" value="1"/>
    <glyphgroup name="uni1E9E" value="2"/>
    <glyphgroup name="uni1EA0" value="1"/>
    <glyphgroup name="uni1EA1" value="1"/>
    <glyphgroup name="uni1EA2" value="1"/>
    <glyphgroup name="uni1EA3" value="1"/>
    <glyphgroup name="uni1EA4" value="1"/>
    <glyphgroup name="uni1EA5" value="1"/>
    <glyphgroup name="uni1EA6" value="1"/>
    <glyphgroup name="uni1EA7" value="1"/>
    <glyphgroup name="uni1EA8" value="1"/>
    <glyphgroup name="uni1EA9" value="1"/>
    <glyphgroup name="uni1EAA" value="1"/>
    <glyphgroup name="uni1EAB" value="1"/>
    <glyphgroup name="uni1EAC" value="1"/>
    <glyphgroup name="uni1EAD" value="1"/>
    <glyphgroup name="uni1EAE" value="1"/>
    <glyphgroup name="uni1EAF" value="1"/>
    <glyphgroup name="uni1EB0" value="1"/>
    <glyphgroup name="uni1EB1" value="1"/>
    <glyphgroup name="uni1EB2" value="1"/>
    <glyphgroup name="uni1EB3" value="1"/>
    <glyphgroup name="uni1EB4" value="1"/>
    <glyphgroup name="uni1EB5" value="1"/>
    <glyphgroup name="uni1EB6" value="1"/>
    <glyphgroup name="uni1EB7" value="1"/>
    <glyphgroup name="uni1EB8" value="1"/>
    <glyphgroup name="uni1EB9" value="1"/>
    <glyphgroup name="uni1EBA" value="1"/>
    <glyphgroup name="uni1EBB" value="1"/>
    <glyphgroup name="uni1EBC" value="1"/>
    <glyphgroup name="uni1EBD" value="1"/>
    <glyphgroup name="uni1EBE" value="1"/>
    <glyphgroup name="uni1EBF" value="1"/>
    <glyphgroup name="uni1EC0" value="1"/>
    <glyphgroup name="uni1EC1" value="1"/>
    <glyphgroup name="uni1EC2" value="1"/>
    <glyphgroup name="uni1EC3" value="1"/>
    <glyphgroup name="uni1EC4" value="1"/>
    <glyphgroup name="uni1EC5" value="1"/>
    <glyphgroup name="uni1EC6" value="1"/>
    <glyphgroup name="uni1EC7" value="1"/>
    <glyphgroup name="uni1EC8" value="1"/>
    <glyphgroup name="uni1EC9" value="1"/>
    <glyphgroup name="uni1ECA" value="1"/>
    <glyphgroup name="uni1ECB" value="1"/>
    <glyphgroup name="uni1ECC" value="1"/>
    <glyphgroup name="uni1ECD" value="1"/>
    <glyphgroup name="uni1ECE" value="1"/>
    <glyphgroup name="uni1ECF" value="1"/>
    <glyphgroup name="uni1ED0" value="1"/>
    <glyphgroup name="uni1ED1" value="1"/>
    <glyphgroup name="uni1ED2" value="1"/>
    <glyphgroup name="uni1ED3" value="1"/>
    <glyphgroup name="uni1ED4" value="1"/>
    <glyphgroup name="uni1ED5" value="1"/>
    <glyphgroup name="uni1ED6" value="1"/>
    <glyphgroup name="uni1ED7" value="1"/>
    <glyphgroup name="uni1ED8" value="1"/>
    <glyphgroup name="uni1ED9" value="1"/>
    <glyphgroup name="uni1EDA" value="1"/>
    <glyphgroup name="uni1EDB" value="1"/>
    <glyphgroup name="uni1EDC" value="1"/>
    <glyphgroup name="uni1EDD" value="1"/>
    <glyphgroup name="uni1EDE" value="1"/>
    <glyphgroup name="uni1EDF" value="1"/>
    <glyphgroup name="uni1EE0" value="1"/>
    <glyphgroup name="uni1EE1" value="1"/>
    <glyphgroup name="uni1EE2" value="1"/>
    <glyphgroup name="uni1EE3" value="1"/>
    <glyphgroup name="uni1EE4" value="1"/>
    <glyphgroup name="uni1EE5" value="1"/>
    <glyphgroup name="uni1EE6" value="1"/>
    <glyphgroup name="uni1EE7" value="1"/>
    <glyphgroup name="uni1EE8" value="1"/>
    <glyphgroup name="uni1EE9" value="1"/>
    <glyphgroup name="uni1EEA" value="1"/>
    <glyphgroup name="uni1EEB" value="1"/>
    <glyphgroup name="uni1EEC" value="1"/>
    <glyphgroup name="uni1EED" value="1"/>
    <glyphgroup name="uni1EEE" value="1"/>
    <glyphgroup name="uni1EEF" value="1"/>
    <glyphgroup name="uni1EF0" value="1"/>
    <glyphgroup name="uni1EF1" value="1"/>
    <glyphgroup name="uni1EF4" value="1"/>
    <glyphgroup name="uni1EF5" value="3"/>
    <glyphgroup name="uni1EF6" value="1"/>
    <glyphgroup name="uni1EF7" value="1"/>
    <glyphgroup name="uni1EF8" value="1"/>
    <glyphgroup name="uni1EF9" value="1"/>
    <glyphgroup name="uni2002" value="1"/>
    <glyphgroup name="uni2003" value="1"/>
    <glyphgroup name="uni2007" value="1"/>
    <glyphgroup name="uni2008" value="1"/>
    <glyphgroup name="uni2009" value="1"/>
    <glyphgroup name="uni200A" value="1"/>
    <glyphgroup name="uni200B" value="1"/>
    <glyphgroup name="uni2010" value="1"/>
    <glyphgroup name="uni2015" value="1"/>
    <glyphgroup name="uni2070" value="1"/>
    <glyphgroup name="uni2074" value="1"/>
    <glyphgroup name="uni2075" value="1"/>
    <glyphgroup name="uni2076" value="1"/>
    <glyphgroup name="uni2077" value="1"/>
    <glyphgroup name="uni2078" value="1"/>
    <glyphgroup name="uni2079" value="1"/>
    <glyphgroup name="uni2080" value="1"/>
    <glyphgroup name="uni2081" value="1"/>
    <glyphgroup name="uni2082" value="1"/>
    <glyphgroup name="uni2083" value="1"/>
    <glyphgroup name="uni2084" value="1"/>
    <glyphgroup name="uni2085" value="1"/>
    <glyphgroup name="uni2086" value="1"/>
    <glyphgroup name="uni2087" value="1"/>
    <glyphgroup name="uni2088" value="1"/>
    <glyphgroup name="uni2089" value="1"/>
    <glyphgroup name="uni20A6" value="1"/>
    <glyphgroup name="uni20A9" value="1"/>
    <glyphgroup name="uni20AD" value="1"/>
    <glyphgroup name="uni20AE" value="1"/>
    <glyphgroup name="uni20B1" value="1"/>
    <glyphgroup name="uni20B2" value="1"/>
    <glyphgroup name="uni20B4" value="1"/>
    <glyphgroup name="uni20B5" value="2"/>
    <glyphgroup name="uni20B8" value="1"/>
    <glyphgroup name="uni20B9" value="1"/>
    <glyphgroup name="uni20BA" value="1"/>
    <glyphgroup name="uni20BC" value="1"/>
    <glyphgroup name="uni20BD" value="1"/>
    <glyphgroup name="uni2113" value="1"/>
    <glyphgroup name="uni2116" value="2"/>
    <glyphgroup name="uni2120" value="1"/>
    <glyphgroup name="uni2126" value="2"/>
    <glyphgroup name="uni2153" value="1"/>
    <glyphgroup name="uni2154" value="1"/>
    <glyphgroup name="uni2206" value="2"/>
    <glyphgroup name="uni2215" value="1"/>
    <glyphgroup name="uni2219" value="1"/>
    <glyphgroup name="uogonek" value="1"/>
    <glyphgroup name="uring" value="1"/>
    <glyphgroup name="ustraitcy" value="1"/>
    <glyphgroup name="ustraitstrokecy" value="1"/>
    <glyphgroup name="utilde" value="1"/>
    <glyphgroup name="v" value="1"/>
    <glyphgroup name="v.sc" value="1"/>
    <glyphgroup name="verticalbarcy" value="1"/>
    <glyphgroup name="verticalbarcy.case" value="1"/>
    <glyphgroup name="w" value="1"/>
    <glyphgroup name="w.sc" value="1"/>
    <glyphgroup name="w.ss09" value="3"/>
    <glyphgroup name="wacute" value="1"/>
    <glyphgroup name="wcircumflex" value="1"/>
    <glyphgroup name="wdieresis" value="1"/>
    <glyphgroup name="wgrave" value="1"/>
    <glyphgroup name="x" value="1"/>
    <glyphgroup name="x.sc" value="3"/>
    <glyphgroup name="y" value="1"/>
    <glyphgroup name="y.sc" value="1"/>
    <glyphgroup name="y.ss10" value="1"/>
    <glyphgroup name="yacute" value="1"/>
    <glyphgroup name="ycircumflex" value="1"/>
    <glyphgroup name="ydieresis" value="1"/>
    <glyphgroup name="yen" value="1"/>
    <glyphgroup name="ygrave" value="1"/>
    <glyphgroup name="z" value="1"/>
    <glyphgroup name="z.sc" value="1"/>
    <glyphgroup name="zacute" value="1"/>
    <glyphgroup name="zcaron" value="1"/>
    <glyphgroup name="zdotaccent" value="1"/>
    <glyphgroup name="zero" value="4"/>
    <glyphgroup name="zero.dnom" value="1"/>
    <glyphgroup name="zero.lf" value="2"/>
    <glyphgroup name="zero.numr" value="1"/>
    <glyphgroup name="zero.subs" value="1"/>
  </TSI5>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="1063"/>
    <maxPoints value="108"/>
    <maxContours value="7"/>
    <maxCompositePoints value="111"/>
    <maxCompositeContours value="6"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="36"/>
    <maxStorage value="78"/>
    <maxFunctionDefs value="154"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="516"/>
    <maxSizeOfInstructions value="3971"/>
    <maxComponentElements value="3"/>
    <maxComponentDepth value="2"/>
  </maxp>

</ttFont>
